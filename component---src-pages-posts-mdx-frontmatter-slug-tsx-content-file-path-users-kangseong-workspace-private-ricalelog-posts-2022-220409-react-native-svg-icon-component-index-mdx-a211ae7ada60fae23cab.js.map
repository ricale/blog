{"version":3,"file":"component---src-pages-posts-mdx-frontmatter-slug-tsx-content-file-path-users-kangseong-workspace-private-ricalelog-posts-2022-220409-react-native-svg-icon-component-index-mdx-a211ae7ada60fae23cab.js","mappings":"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","sources":["webpack://ricalelog/./posts/2022/220409-react-native-svg-icon-component/index.mdx","webpack://ricalelog/./src/pages/posts/{mdx.frontmatter__slug}.tsx","webpack://ricalelog/./src/components/Comments.tsx","webpack://ricalelog/./src/components/MdxContent.tsx","webpack://ricalelog/./src/components/SameSeriesPosts.tsx","webpack://ricalelog/./src/components/Tag.tsx","webpack://ricalelog/./src/components/TagList.tsx","webpack://ricalelog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    h2: \"h2\",\n    a: \"a\",\n    div: \"div\",\n    code: \"code\",\n    h3: \"h3\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"아이콘 같은 간단한 이미지를 다룰 때는 PNG 형식보다는 SVG 가 더 좋다. 하지만 React Native 에서는 기본적으로 SVG 파일을 지원하지 않는다.\"), \"\\n\", React.createElement(_components.p, null, \"그럼 React Native 에서 SVG 파일을 아이콘으로 사용할 수 있도록 설정 및 구현해보자.\"), \"\\n\", React.createElement(_components.h1, null, \"1. 환경 구성 및 설정\"), \"\\n\", React.createElement(_components.h2, null, \"1.1. react-native-svg\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://github.com/react-native-svg/react-native-svg\"\n  }, \"react-native-svg\"), \" 는 React Native 프로젝트에서 SVG 및 관련 엘리먼트들을 웹과 유사한 형식으로 사용할 수 있게 해주는 라이브러리다. 이 라이브러리를 먼저 설치하자.\"), \"\\n\", React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">yarn</span> <span class=\\\"token function\\\">add</span> react-native-svg\\n$ <span class=\\\"token builtin class-name\\\">cd</span> ./ios <span class=\\\"token operator\\\">&amp;&amp;</span> pod <span class=\\\"token function\\\">install</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"설치만 하면 된다. 특별한 설정은 필요 없다.\"), \"\\n\", React.createElement(_components.h2, null, \"1.2. react-native-svg-transformer\"), \"\\n\", React.createElement(_components.p, null, \"react-native-svg 는 \", React.createElement(_components.code, null, \"<Svg />\"), \", \", React.createElement(_components.code, null, \"<G />\"), \", \", React.createElement(_components.code, null, \"<Path />\"), \" 등 거의 모든 SVG 관련 컴포넌트를 제공하지만, SVG 파일 자체를 \", React.createElement(_components.code, null, \"import\"), \" 할 수 있게 해주지는 않는다. SVG 파일들을 \", React.createElement(_components.code, null, \"import\"), \" 해서 사용하려면 \", React.createElement(_components.a, {\n    href: \"https://github.com/kristerkari/react-native-svg-transformer\"\n  }, \"react-native-svg-transformer\"), \" 라이브러리도 필요하다. 이 라이브러리는 react-native-svg 라이브러리를 사용해 SVG 파일을 읽어들여 React 컴포넌트로 사용할 수 있게 해준다.\"), \"\\n\", React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">yarn</span> <span class=\\\"token function\\\">add</span> <span class=\\\"token parameter variable\\\">--dev</span> react-native-svg-transformer</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"설치 이후 추가적인 설정이 필요하다. (react-native-svg-transformer 의 \", React.createElement(_components.a, {\n    href: \"https://github.com/kristerkari/react-native-svg-transformer/blob/master/README.md\"\n  }, \"README\"), \"에도 잘 나와있다.)\"), \"\\n\", React.createElement(_components.h3, null, \"1.2.1. \", React.createElement(_components.code, null, \"metro.config.js\")), \"\\n\", React.createElement(_components.p, null, \"프로젝트의 루트 디렉토리에 \", React.createElement(_components.code, null, \"metro.config.js\"), \" 파일이 있다. 기본 설정되어있는 내용과 \", React.createElement(_components.a, {\n    href: \"https://github.com/kristerkari/react-native-svg-transformer#for-react-native-v059-or-newer\"\n  }, \"라이브러리 README.md 의 \", React.createElement(_components.code, null, \"metro.config.js\")), \" 내용을 병합하자. 아래는 병합한 결과물 예시이다.\"), \"\\n\", React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// metro.config.js</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> getDefaultConfig <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"metro-config\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token literal-property property\\\">resolver</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span> sourceExts<span class=\\\"token punctuation\\\">,</span> assetExts <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">getDefaultConfig</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token literal-property property\\\">transformer</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function-variable function\\\">getTransformOptions</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token literal-property property\\\">transform</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token literal-property property\\\">experimentalImportSupport</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n          <span class=\\\"token literal-property property\\\">inlineRequires</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token literal-property property\\\">babelTransformerPath</span><span class=\\\"token operator\\\">:</span> require<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"react-native-svg-transformer\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token literal-property property\\\">resolver</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token literal-property property\\\">assetExts</span><span class=\\\"token operator\\\">:</span> assetExts<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">ext</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> ext <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">\\\"svg\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token literal-property property\\\">sourceExts</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span>sourceExts<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"svg\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h3, null, \"1.2.2. \", React.createElement(_components.code, null, \"declaration.d.ts\")), \"\\n\", React.createElement(_components.p, null, \"타입스크립트를 사용한다면 프로젝트 루트 디렉토리에 \", React.createElement(_components.code, null, \"declaration.d.ts\"), \" 파일을 새로 만들어서 아래 내용을 넣어주어야 한다.\"), \"\\n\", React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"ts\\\"><pre class=\\\"language-ts\\\"><code class=\\\"language-ts\\\"><span class=\\\"token comment\\\">// declaration.d.ts</span>\\n\\n<span class=\\\"token keyword\\\">declare</span> <span class=\\\"token keyword\\\">module</span> <span class=\\\"token string\\\">\\\"*.svg\\\"</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> SvgProps <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react-native-svg\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> content<span class=\\\"token operator\\\">:</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">FC</span><span class=\\\"token operator\\\">&lt;</span>SvgProps<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> content<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h3, null, \"1.2.3. \", React.createElement(_components.code, null, \".svgrrc\")), \"\\n\", React.createElement(_components.p, null, \"이 파일은 꼭 작성할 필요는 없다. 하지만 작성하면 읽어들인 SVG 컴포넌트의 어트리뷰트를 동적으로 지정할 수 있게 된다. 프로젝트 루트 디렉토리에 \", React.createElement(_components.code, null, \".svgrrc\"), \" 파일을 만들어 아래 내용을 넣자.\"), \"\\n\", React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"json\\\"><pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token comment\\\">// .svgrrc</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"replaceAttrValues\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"#000\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"{props.fill}\\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"이렇게 설정하면 읽어들인 svg 파일 내에서 \", React.createElement(_components.code, null, \"\\\"#000\\\"\"), \"로 값이 설정된 어트리뷰트는 \", React.createElement(_components.code, null, \"fill\"), \" prop 의 값으로 치환된다.\"), \"\\n\", React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"xml\\\"><pre class=\\\"language-xml\\\"><code class=\\\"language-xml\\\"><span class=\\\"token comment\\\">&lt;!-- Logo.svg --></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>svg</span> <span class=\\\"token attr-name\\\">width</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>14<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">height</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>14<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">viewBox</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>0 0 14 14<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">fill</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>none<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">xmlns</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>http://www.w3.org/2000/svg<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>path</span> <span class=\\\"token attr-name\\\">d</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>M2.965 6.0925C4.045 8.215 ...<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">fill</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>#000<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">/></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>svg</span><span class=\\\"token punctuation\\\">></span></span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위처럼 작성된 \", React.createElement(_components.code, null, \"Logo.svg\"), \" 파일을 \", React.createElement(_components.code, null, \"import\"), \" 해서 아래처럼 쓸 수 있다.\"), \"\\n\", React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"tsx\\\"><pre class=\\\"language-tsx\\\"><code class=\\\"language-tsx\\\"><span class=\\\"token keyword\\\">import</span> Logo <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"./Logo.svg\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">SomeComp</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token comment\\\">// 이렇게 하면 Logo.svg 파일 내의 \\\"#000\\\" 어트리뷰트를 \\\"#FFF\\\" 로 치환되어 적용된다.</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Logo</span></span> <span class=\\\"token attr-name\\\">width</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">120</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token attr-name\\\">height</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">40</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token attr-name\\\">fill</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"#FFF\\\"</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"이 기능은 react-native-svg-transformer 가 내부적으로 \", React.createElement(_components.a, {\n    href: \"https://github.com/gregberge/svgr\"\n  }, \"SVGR\"), \"이라는 라이브러리를 사용해서 구현했다. 따라서 SVGR 에서 지원하는 다른 설정들도 사용할 수 있다. 좀 더 정보를 얻고 싶다면 \", React.createElement(_components.a, {\n    href: \"https://react-svgr.com/docs/configuration-files/\"\n  }, \"해당 라이브러리의 문서\"), \"를 확인하자.\"), \"\\n\", React.createElement(_components.h4, null, \"# \", React.createElement(_components.code, null, \".svgrrc\"), \" 설정을 수정해도 적용되지 않는다?\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \".svgrrc\"), \" 설정을 수정하고 다시 빌드해도 수정한 사항이 적용되지 않을 때가 있다. 그럴 때는 metro 를 끄고 \", React.createElement(_components.code, null, \"yarn start --reset-cache\"), \" 로 다시 실행시켜주자.\"), \"\\n\", React.createElement(_components.h1, null, \"2. 공통 아이콘 컴포넌트 작성\"), \"\\n\", React.createElement(_components.p, null, \"이제 SVG 파일을 웹에서처럼 읽어들여 사용할 수 있다. 하지만 SVG 파일을 일일이 따로따로 \", React.createElement(_components.code, null, \"import\"), \" 해줘야 하므로 사용하기 번거롭고, 아이콘들의 공통 props 혹은 속성을 관리하기도 힘들다.\"), \"\\n\", React.createElement(_components.p, null, \"그러한 불편함을 해결하기 위해 별도의 컴포넌트를 하나 구현할 것이다. 해당 컴포넌트는 아이콘 이름만으로 아이콘을 사용할 수 있게 해줄 것이며 공통적으로 쓰일 props 들도 관리할 것이다.\"), \"\\n\", React.createElement(_components.h3, null, \"2.1. SVG 파일들 re-export\"), \"\\n\", React.createElement(_components.p, null, \"일단 컴포넌트를 작성하기 전에, 모든 SVG 파일은 직접 \", React.createElement(_components.code, null, \"import\"), \" 해서 쓰는 게 아니라 인덱스 파일을 따로 만들어 한 곳에서 관리하도록 하자.\"), \"\\n\", React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"ts\\\"><pre class=\\\"language-ts\\\"><code class=\\\"language-ts\\\"><span class=\\\"token comment\\\">// src/res/index.ts</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token keyword\\\">as</span> Calendar <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"./calendar.svg\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token keyword\\\">as</span> Clock <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"./clock.svg\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token keyword\\\">as</span> Sandwatch <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"./sandwatch.svg\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token keyword\\\">as</span> Watch <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"./watch.svg\\\"</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"이제 다른 파일에서는 아래와 같은 형식으로 import 가 가능하다.\"), \"\\n\", React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"tsx\\\"><pre class=\\\"language-tsx\\\"><code class=\\\"language-tsx\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Calendar <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"../res\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Calendar</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 혹은</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> icons <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"../res\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> Comp <span class=\\\"token operator\\\">=</span> icons<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"Calendar\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Comp</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h3, null, \"2.2. \", React.createElement(_components.code, null, \"<SvgIcon />\"), \" 구현\"), \"\\n\", React.createElement(_components.p, null, \"하나의 파일에 묶이게 된 SVG 파일들을 읽어와 사용하는 컴포넌트 \", React.createElement(_components.code, null, \"<SvgIcon />\"), \" 은 아래처럼 구현할 수 있다.\"), \"\\n\", React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"tsx\\\"><pre class=\\\"language-tsx\\\"><code class=\\\"language-tsx\\\"><span class=\\\"token comment\\\">// src/components/SvgIcon.tsx</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> SvgProps <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react-native-svg\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> Icons <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"../res\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">IconProps</span> <span class=\\\"token operator\\\">=</span> SvgProps <span class=\\\"token operator\\\">&amp;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// res 에서 re-export 되는 SVG 파일들의 이름을 name 으로 받을 수 있다.</span>\\n  name<span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">keyof</span> <span class=\\\"token keyword\\\">typeof</span> Icons<span class=\\\"token punctuation\\\">;</span>\\n  size<span class=\\\"token operator\\\">?</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Icon</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">,</span>\\n  fill <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"black\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  width<span class=\\\"token operator\\\">:</span> _width<span class=\\\"token punctuation\\\">,</span>\\n  height<span class=\\\"token operator\\\">:</span> _height<span class=\\\"token punctuation\\\">,</span>\\n  size<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token operator\\\">...</span>props\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">:</span> IconProps<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> Comp <span class=\\\"token operator\\\">=</span> Icons<span class=\\\"token punctuation\\\">[</span>name<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// `width`, `height` 를 따로 지정할 수 있지만</span>\\n  <span class=\\\"token comment\\\">// 아이콘은 보통 가로 세로 값이 같은 정사각형 형식이기 때문에</span>\\n  <span class=\\\"token comment\\\">// 여기서는 `size` 를 사용해 너비와 높이를 같이 지정할 수 있게 해주었다.</span>\\n  <span class=\\\"token keyword\\\">const</span> width <span class=\\\"token operator\\\">=</span> _width <span class=\\\"token operator\\\">??</span> size<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> height <span class=\\\"token operator\\\">=</span> _height <span class=\\\"token operator\\\">??</span> size<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> sizeProps <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">(</span>width <span class=\\\"token operator\\\">!==</span> <span class=\\\"token keyword\\\">undefined</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">{</span> width <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">(</span>height <span class=\\\"token operator\\\">!==</span> <span class=\\\"token keyword\\\">undefined</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">{</span> height <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Comp</span></span>\\n      <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">}</span></span>\\n      <span class=\\\"token comment\\\">// 1.2.3. `.svgrrc` 의 설정 덕분에 `fill` prop 을 이렇게 사용할 수 있다.</span>\\n      <span class=\\\"token attr-name\\\">fill</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>fill<span class=\\\"token punctuation\\\">}</span></span>\\n      <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>sizeProps<span class=\\\"token punctuation\\\">}</span></span>\\n    <span class=\\\"token punctuation\\\">/></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> Icon<span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h1, null, \"3. 결과\"), \"\\n\", React.createElement(_components.h2, null, \"3.1. 사용 예\"), \"\\n\", React.createElement(_components.p, null, \"구현한 컴포넌트 \", React.createElement(_components.code, null, \"<SvgIcon />\"), \"을 아래처럼 사용할 수 있다.\"), \"\\n\", React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"tsx\\\"><pre class=\\\"language-tsx\\\"><code class=\\\"language-tsx\\\"><span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token keyword\\\">import</span> SvgIcon <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"./components/SvgIcon\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">SafeAreaView</span></span> <span class=\\\"token attr-name\\\">style</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token literal-property property\\\">flex</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token literal-property property\\\">padding</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">24</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n      </span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/* ... */</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token plain-text\\\">\\n      </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">SvgIcon</span></span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>Calendar<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token plain-text\\\">\\n      </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">SvgIcon</span></span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>Clock<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">fill</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>orange<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token plain-text\\\">\\n      </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">SvgIcon</span></span> <span class=\\\"token attr-name\\\">size</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">48</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>Watch<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">fill</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>gold<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token plain-text\\\">\\n      </span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/* ... */</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token plain-text\\\">\\n    </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span><span class=\\\"token class-name\\\">SafeAreaView</span></span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"3.2. 소스코드 전문\"), \"\\n\", React.createElement(_components.p, null, \"설정 및 구현이 적용된 실제 소스코드를 참고하고 싶다면 \", React.createElement(_components.a, {\n    href: \"https://github.com/ricale/RnSvgIconExample\"\n  }, \"RnSvgIconExample\"), \" 리파지토리를 참고하자. 이 문서를 작성하면서 다시 한 번 적용 및 구현해본 리파지토리이며, 실행 또한 잘 된다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/kangseong/workspace/private/ricalelog/posts/2022/220409-react-native-svg-icon-component/index.mdx\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\nimport * as React from \"react\";\nimport {GatsbyImage, getImage} from \"gatsby-plugin-image\";\nimport Layout from \"../../components/Layout\";\nimport Seo from \"../../components/Seo\";\nimport styled from \"../../themes\";\nimport MdxContent from \"../../components/MdxContent\";\nimport Comments from \"../../components/Comments\";\nimport SameSeriesPosts from \"../../components/SameSeriesPosts\";\nimport TagList from \"../../components/TagList\";\nconst PostDetailPage = _ref => {\n  let {data, children} = _ref;\n  const {frontmatter, sameSeriesPosts} = data.mdx;\n  const {title, slug, date, tags, series, heroImage, heroImageAlt} = frontmatter;\n  const image = heroImage ? getImage(heroImage) : null;\n  return React.createElement(Layout, null, React.createElement(Header, null, React.createElement(\"h1\", null, title), React.createElement(WrittenDate, null, date), React.createElement(TagList, {\n    tags: tags\n  })), React.createElement(SameSeriesPosts, {\n    name: series,\n    data: sameSeriesPosts,\n    current: slug\n  }), !!image && React.createElement(ThumbnailImage, {\n    image: image,\n    alt: heroImageAlt !== null && heroImageAlt !== void 0 ? heroImageAlt : \"\"\n  }), React.createElement(PostContent, null, children), React.createElement(Comments, null));\n};\nconst Header = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  margin: 60px 0 72px;\\n  padding: 0 24px;\\n\\n  & > h1 {\\n    font-size: 2.5rem;\\n    word-break: keep-all;\\n    margin: 0;\\n  }\\n\"])));\nconst ThumbnailImage = styled(GatsbyImage)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n  margin-bottom: 16px;\\n\"])));\nconst WrittenDate = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose([\"\\n  margin: 16px 0;\\n\"])));\nconst Tags = styled.ul(_templateObject4 || (_templateObject4 = _taggedTemplateLiteralLoose([\"\\n  display: flex;\\n  flex-direction: row;\\n  flex-wrap: wrap;\\n  gap: \", \"px;\\n\\n  margin: 0;\\n  padding: 0;\\n  list-style: none;\\n\\n  > li {\\n    padding: \", \"px\\n      \", \"px;\\n    border-radius: 2px;\\n\\n    background-color: \", \";\\n    color: \", \";\\n\\n    > a {\\n      text-decoration: none;\\n    }\\n  }\\n\"])), p => p.theme.dimens.gutter, p => p.theme.dimens.spacing, p => p.theme.dimens.gutter, p => p.theme.colors.tag, p => p.theme.colors.onTag);\nconst PostContent = styled(MdxContent)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteralLoose([\"\\n  margin-bottom: 60px;\\n\"])));\nconst query = \"2677585968\";\nexport const Head = _ref2 => {\n  var _image$images, _image$images$fallbac;\n  let {data} = _ref2;\n  const {frontmatter: {title, slug, tags, heroImage, previewContent}, excerpt} = data.mdx;\n  const image = heroImage ? getImage(heroImage) : null;\n  return React.createElement(Seo, {\n    title: title,\n    description: previewContent !== null && previewContent !== void 0 ? previewContent : excerpt,\n    path: \"posts/\" + slug,\n    thumbnail: image === null || image === void 0 ? void 0 : (_image$images = image.images) === null || _image$images === void 0 ? void 0 : (_image$images$fallbac = _image$images.fallback) === null || _image$images$fallbac === void 0 ? void 0 : _image$images$fallbac.src,\n    keywords: tags,\n    ogType: \"article\"\n  });\n};\nPostDetailPage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostDetailPage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import React, { useEffect, useRef } from \"react\";\n\nfunction Comments() {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const scriptTag = document.createElement(\"script\");\n    const attrs = {\n      src: \"https://utteranc.es/client.js\",\n      repo: \"ricale/blog\",\n      \"issue-term\": \"pathname\",\n      label: \"utterances\",\n      theme: \"github-dark\",\n      crossOrigin: \"anonymous\",\n      async: \"true\",\n    };\n    Object.entries(attrs).forEach(([key, value]) => {\n      scriptTag.setAttribute(key, value);\n    });\n    ref.current?.appendChild(scriptTag);\n  }, []);\n\n  return <div id=\"comments\" ref={ref} />;\n}\n\nexport default Comments;\n","import styled from \"../themes\";\n\nconst MdxContent = styled.div`\n  font-size: 16px;\n  line-height: 1.5;\n\n  p {\n    margin-top: 0;\n    margin-bottom: 16px;\n  }\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    margin-top: 24px;\n    margin-bottom: 16px;\n    line-height: 1.25;\n    font-weight: 600;\n  }\n\n  h1 {\n    padding-bottom: 0.3em;\n    border-bottom: 1px solid #21262d;\n    font-size: 2em;\n  }\n\n  h2 {\n    padding-bottom: 0.3em;\n    border-bottom: 1px solid #21262d;\n    font-size: 1.5em;\n  }\n\n  h3 {\n    font-size: 1.25em;\n  }\n\n  h4 {\n    font-size: 1em;\n  }\n\n  h5 {\n    font-size: 0.875em;\n  }\n\n  ul,\n  ol,\n  .gatsby-resp-image-wrapper {\n    margin-bottom: 16px;\n  }\n\n  table {\n    width: max-content;\n    max-width: 100%;\n    margin-bottom: 16px;\n    border-collapse: collapse;\n    tr {\n      border-top: 1px solid #21262d;\n    }\n    td,\n    th {\n      padding: 6px 13px;\n      border: 1px solid #30363d;\n    }\n  }\n\n  hr {\n    height: 0.25em;\n    margin: 24px 0;\n    border: 0;\n\n    background-color: #30363d;\n  }\n\n  li > ul,\n  li > ol {\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n\n  blockquote {\n    position: relative;\n\n    margin-left: 0;\n    margin-right: 0;\n    margin-bottom: 16px;\n    padding: 16px 32px;\n    border-left: 1px solid ${(p) => p.theme.colors.blockquoteBorder};\n    border-left-width: 10px;\n\n    background-color: ${(p) => p.theme.colors.blockquote};\n\n    > :first-child {\n      margin-top: 0;\n    }\n    > :last-child {\n      margin-bottom: 0;\n    }\n    > ul,\n    > ol {\n      padding-left: 20px;\n    }\n  }\n\n  blockquote:before {\n    content: '\"';\n\n    position: absolute;\n    top: -10px;\n    left: 5px;\n\n    font-size: 3em;\n    color: ${(p) => p.theme.colors.blockquoteBorder};\n  }\n  blockquote:after {\n    content: '\"';\n\n    position: absolute;\n    bottom: -30px;\n    right: 5px;\n\n    font-size: 3em;\n    color: ${(p) => p.theme.colors.blockquoteBorder};\n  }\n\n  code {\n    padding: 0.2em 0.4em;\n    border-radius: 2px;\n\n    font-size: 0.85em;\n\n    background-color: ${(p) => p.theme.colors.code};\n    color: ${(p) => p.theme.colors.onCode};\n    white-space: break-spaces;\n  }\n\n  pre {\n    margin-bottom: 16px;\n\n    overflow-x: auto;\n  }\n\n  pre > code {\n    padding: unset;\n    border-radius: unset;\n    background-color: unset;\n    color: unset;\n  }\n`;\n\nexport default MdxContent;\n","import * as React from \"react\";\nimport { Link } from \"gatsby\";\n\nimport styled, { css } from \"../themes\";\n\ntype SameSeriesPostsProps = {\n  name?: string;\n  data?:\n    | null\n    | {\n        frontmatter: {\n          title: string;\n          slug: string;\n        };\n      }[];\n  current?: string;\n};\nconst SameSeriesPosts = ({ name, data, current }: SameSeriesPostsProps) => {\n  const [collapsed, setCollapsed] = React.useState(true);\n  if (!data) {\n    return null;\n  }\n  return (\n    <Container>\n      <Header collapsed={collapsed} onClick={() => setCollapsed((st) => !st)}>\n        <h2>\n          시리즈 <Link to={`/series/${name}/`}>{`\"${name}\"`}</Link>\n        </h2>\n        <span>▲</span>\n      </Header>\n      {!collapsed && (\n        <List>\n          {data.map(({ frontmatter: { slug, title } }) => (\n            <ListItem active={slug === current} key={slug}>\n              <Link to={`/posts/${slug}`}>{title}</Link>\n            </ListItem>\n          ))}\n        </List>\n      )}\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  margin-bottom: 16px;\n  align-items: center;\n\n  background-color: #111111;\n`;\n\ntype HeaderProps = {\n  collapsed: boolean;\n};\nconst Header = styled.div<HeaderProps>`\n  display: flex;\n  justify-content: space-between;\n  padding: 16px;\n  cursor: pointer;\n\n  > h2 {\n    margin: 0;\n    font-size: 1rem;\n  }\n\n  > span {\n    user-select: none;\n    transform: rotate(${(p) => (p.collapsed ? 0 : 180)}deg);\n  }\n`;\n\nconst List = styled.ol`\n  margin: 0 16px;\n  padding-bottom: 16px;\n`;\n\ntype ListItemProps = {\n  active: boolean;\n};\nconst ListItem = styled.li<ListItemProps>`\n  ${(p) =>\n    p.active &&\n    css`\n      & > a {\n        font-weight: bold;\n        font-style: italic;\n        text-decoration: underline;\n      }\n    `}\n`;\n\nexport default SameSeriesPosts;\n","import * as React from \"react\";\nimport { Link } from \"gatsby\";\nimport styled from \"../themes\";\n\ntype TagProps = {\n  value: string;\n};\nfunction Tag({ value }: TagProps) {\n  return <TagComp to={`/tags/${value}`}>{value}</TagComp>;\n}\n\nconst TagComp = styled(Link)`\n  display: inline-block;\n  padding: ${(p) => p.theme.dimens.spacing}px ${(p) => p.theme.dimens.gutter}px;\n  border-radius: 2px;\n\n  background-color: ${(p) => p.theme.colors.tag};\n  color: ${(p) => p.theme.colors.onTag};\n  text-decoration: none;\n`;\n\nexport default Tag;\n","import * as React from \"react\";\n\nimport styled from \"../themes\";\nimport Tag from \"./Tag\";\n\nfunction isStringArray(arr: unknown[]): arr is string[] {\n  return typeof arr[0] === \"string\";\n}\n\ntype TagListProps = {\n  tags: string[] | { fieldValue: string; totalCount: number }[];\n};\nfunction TagList({ tags, ...props }: TagListProps) {\n  const items = isStringArray(tags)\n    ? tags.map((tag) => ({ fieldValue: tag, totalCount: undefined }))\n    : tags;\n  return (\n    <Container {...props}>\n      {items.map((tag) => (\n        <li key={tag.fieldValue}>\n          {/* <Link to={`/tags/${tag.fieldValue}`}>{tag.fieldValue}</Link> */}\n          <Tag value={tag.fieldValue} />\n        </li>\n      ))}\n    </Container>\n  );\n}\n\nconst Container = styled.ul`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: ${(p) => p.theme.dimens.gutter}px;\n\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nexport default TagList;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode} [children]\n *   Children.\n *\n * @callback MergeComponents\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components|MergeComponents} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  let allComponents = useMDXComponents(components)\n\n  if (disableParentContext) {\n    allComponents = components || emptyObject\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h1","h2","a","div","code","h3","h4","_provideComponents","components","React","href","dangerouslySetInnerHTML","__html","_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","wrapper","MDXLayout","PostDetailPage","_ref","data","children","frontmatter","sameSeriesPosts","mdx","title","slug","date","tags","series","heroImage","heroImageAlt","image","getImage","Layout","Header","WrittenDate","TagList","SameSeriesPosts","name","current","ThumbnailImage","alt","PostContent","Comments","styled","_taggedTemplateLiteralLoose","GatsbyImage","theme","dimens","gutter","spacing","colors","tag","onTag","MdxContent","Head","_ref2","_image$images","_image$images$fallbac","previewContent","excerpt","Seo","description","path","thumbnail","images","fallback","src","keywords","ogType","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","ref","useRef","useEffect","scriptTag","document","createElement","entries","repo","label","crossOrigin","async","forEach","key","value","setAttribute","_ref$current","appendChild","id","blockquoteBorder","blockquote","onCode","Container","collapsed","List","ListItem","active","css","setCollapsed","onClick","st","Link","to","map","TagComp","items","fieldValue","totalCount","undefined","Tag","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}