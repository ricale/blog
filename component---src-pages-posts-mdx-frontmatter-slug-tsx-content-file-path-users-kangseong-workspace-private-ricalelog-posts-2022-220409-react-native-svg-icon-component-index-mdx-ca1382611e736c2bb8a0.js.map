{"version":3,"file":"component---src-pages-posts-mdx-frontmatter-slug-tsx-content-file-path-users-kangseong-workspace-private-ricalelog-posts-2022-220409-react-native-svg-icon-component-index-mdx-ca1382611e736c2bb8a0.js","mappings":"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","sources":["webpack://ricalelog/./posts/2022/220409-react-native-svg-icon-component/index.mdx","webpack://ricalelog/./src/pages/posts/{mdx.frontmatter__slug}.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    h2: \"h2\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"아이콘 같은 간단한 이미지를 다룰 때는 PNG 형식보다는 SVG 가 더 좋다. 하지만 React Native 에서는 기본적으로 SVG 파일을 지원하지 않는다.\"), \"\\n\", React.createElement(_components.p, null, \"그럼 React Native 에서 SVG 파일을 아이콘으로 사용할 수 있도록 설정 및 구현해보자.\"), \"\\n\", React.createElement(_components.h1, null, \"1. 환경 구성 및 설정\"), \"\\n\", React.createElement(_components.h2, null, \"1.1. react-native-svg\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://github.com/react-native-svg/react-native-svg\"\n  }, \"react-native-svg\"), \" 는 React Native 프로젝트에서 SVG 및 관련 엘리먼트들을 웹과 유사한 형식으로 사용할 수 있게 해주는 라이브러리다. 이 라이브러리를 먼저 설치하자.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"$ yarn add react-native-svg\\n$ cd ./ios && pod install\\n\")), \"\\n\", React.createElement(_components.p, null, \"설치만 하면 된다. 특별한 설정은 필요 없다.\"), \"\\n\", React.createElement(_components.h2, null, \"1.2. react-native-svg-transformer\"), \"\\n\", React.createElement(_components.p, null, \"react-native-svg 는 \", React.createElement(_components.code, null, \"<Svg />\"), \", \", React.createElement(_components.code, null, \"<G />\"), \", \", React.createElement(_components.code, null, \"<Path />\"), \" 등 거의 모든 SVG 관련 컴포넌트를 제공하지만, SVG 파일 자체를 \", React.createElement(_components.code, null, \"import\"), \" 할 수 있게 해주지는 않는다. SVG 파일들을 \", React.createElement(_components.code, null, \"import\"), \" 해서 사용하려면 \", React.createElement(_components.a, {\n    href: \"https://github.com/kristerkari/react-native-svg-transformer\"\n  }, \"react-native-svg-transformer\"), \" 라이브러리도 필요하다. 이 라이브러리는 react-native-svg 라이브러리를 사용해 SVG 파일을 읽어들여 React 컴포넌트로 사용할 수 있게 해준다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"$ yarn add --dev react-native-svg-transformer\\n\")), \"\\n\", React.createElement(_components.p, null, \"설치 이후 추가적인 설정이 필요하다. (react-native-svg-transformer 의 \", React.createElement(_components.a, {\n    href: \"https://github.com/kristerkari/react-native-svg-transformer/blob/master/README.md\"\n  }, \"README\"), \"에도 잘 나와있다.)\"), \"\\n\", React.createElement(_components.h3, null, \"1.2.1. \", React.createElement(_components.code, null, \"metro.config.js\")), \"\\n\", React.createElement(_components.p, null, \"프로젝트의 루트 디렉토리에 \", React.createElement(_components.code, null, \"metro.config.js\"), \" 파일이 있다. 기본 설정되어있는 내용과 \", React.createElement(_components.a, {\n    href: \"https://github.com/kristerkari/react-native-svg-transformer#for-react-native-v059-or-newer\"\n  }, \"라이브러리 README.md 의 \", React.createElement(_components.code, null, \"metro.config.js\")), \" 내용을 병합하자. 아래는 병합한 결과물 예시이다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"// metro.config.js\\n\\nconst { getDefaultConfig } = require(\\\"metro-config\\\");\\n\\nmodule.exports = (async () => {\\n  const {\\n    resolver: { sourceExts, assetExts },\\n  } = await getDefaultConfig();\\n  return {\\n    transformer: {\\n      getTransformOptions: async () => ({\\n        transform: {\\n          experimentalImportSupport: false,\\n          inlineRequires: true,\\n        },\\n      }),\\n      babelTransformerPath: require.resolve(\\\"react-native-svg-transformer\\\"),\\n    },\\n    resolver: {\\n      assetExts: assetExts.filter((ext) => ext !== \\\"svg\\\"),\\n      sourceExts: [...sourceExts, \\\"svg\\\"],\\n    },\\n  };\\n})();\\n\")), \"\\n\", React.createElement(_components.h3, null, \"1.2.2. \", React.createElement(_components.code, null, \"declaration.d.ts\")), \"\\n\", React.createElement(_components.p, null, \"타입스크립트를 사용한다면 프로젝트 루트 디렉토리에 \", React.createElement(_components.code, null, \"declaration.d.ts\"), \" 파일을 새로 만들어서 아래 내용을 넣어주어야 한다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"// declaration.d.ts\\n\\ndeclare module \\\"*.svg\\\" {\\n  import React from \\\"react\\\";\\n  import { SvgProps } from \\\"react-native-svg\\\";\\n  const content: React.FC<SvgProps>;\\n  export default content;\\n}\\n\")), \"\\n\", React.createElement(_components.h3, null, \"1.2.3. \", React.createElement(_components.code, null, \".svgrrc\")), \"\\n\", React.createElement(_components.p, null, \"이 파일은 꼭 작성할 필요는 없다. 하지만 작성하면 읽어들인 SVG 컴포넌트의 어트리뷰트를 동적으로 지정할 수 있게 된다. 프로젝트 루트 디렉토리에 \", React.createElement(_components.code, null, \".svgrrc\"), \" 파일을 만들어 아래 내용을 넣자.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-json\"\n  }, \"// .svgrrc\\n{\\n  \\\"replaceAttrValues\\\": {\\n    \\\"#000\\\": \\\"{props.fill}\\\"\\n  }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"이렇게 설정하면 읽어들인 svg 파일 내에서 \", React.createElement(_components.code, null, \"\\\"#000\\\"\"), \"로 값이 설정된 어트리뷰트는 \", React.createElement(_components.code, null, \"fill\"), \" prop 의 값으로 치환된다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-xml\"\n  }, \"<!-- Logo.svg -->\\n<svg width=\\\"14\\\" height=\\\"14\\\" viewBox=\\\"0 0 14 14\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n  <path d=\\\"M2.965 6.0925C4.045 8.215 ...\\\" fill=\\\"#000\\\"/>\\n</svg>\\n\")), \"\\n\", React.createElement(_components.p, null, \"위처럼 작성된 \", React.createElement(_components.code, null, \"Logo.svg\"), \" 파일을 \", React.createElement(_components.code, null, \"import\"), \" 해서 아래처럼 쓸 수 있다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"import Logo from \\\"./Logo.svg\\\";\\n\\n// ...\\nconst SomeComp = () => (\\n  // 이렇게 하면 Logo.svg 파일 내의 \\\"#000\\\" 어트리뷰트를 \\\"#FFF\\\" 로 치환되어 적용된다.\\n  <Logo width={120} height={40} fill={\\\"#FFF\\\"} />\\n);\\n\")), \"\\n\", React.createElement(_components.p, null, \"이 기능은 react-native-svg-transformer 가 내부적으로 \", React.createElement(_components.a, {\n    href: \"https://github.com/gregberge/svgr\"\n  }, \"SVGR\"), \"이라는 라이브러리를 사용해서 구현했다. 따라서 SVGR 에서 지원하는 다른 설정들도 사용할 수 있다. 좀 더 정보를 얻고 싶다면 \", React.createElement(_components.a, {\n    href: \"https://react-svgr.com/docs/configuration-files/\"\n  }, \"해당 라이브러리의 문서\"), \"를 확인하자.\"), \"\\n\", React.createElement(_components.h4, null, \"# \", React.createElement(_components.code, null, \".svgrrc\"), \" 설정을 수정해도 적용되지 않는다?\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \".svgrrc\"), \" 설정을 수정하고 다시 빌드해도 수정한 사항이 적용되지 않을 때가 있다. 그럴 때는 metro 를 끄고 \", React.createElement(_components.code, null, \"yarn start --reset-cache\"), \" 로 다시 실행시켜주자.\"), \"\\n\", React.createElement(_components.h1, null, \"2. 공통 아이콘 컴포넌트 작성\"), \"\\n\", React.createElement(_components.p, null, \"이제 SVG 파일을 웹에서처럼 읽어들여 사용할 수 있다. 하지만 SVG 파일을 일일이 따로따로 \", React.createElement(_components.code, null, \"import\"), \" 해줘야 하므로 사용하기 번거롭고, 아이콘들의 공통 props 혹은 속성을 관리하기도 힘들다.\"), \"\\n\", React.createElement(_components.p, null, \"그러한 불편함을 해결하기 위해 별도의 컴포넌트를 하나 구현할 것이다. 해당 컴포넌트는 아이콘 이름만으로 아이콘을 사용할 수 있게 해줄 것이며 공통적으로 쓰일 props 들도 관리할 것이다.\"), \"\\n\", React.createElement(_components.h3, null, \"2.1. SVG 파일들 re-export\"), \"\\n\", React.createElement(_components.p, null, \"일단 컴포넌트를 작성하기 전에, 모든 SVG 파일은 직접 \", React.createElement(_components.code, null, \"import\"), \" 해서 쓰는 게 아니라 인덱스 파일을 따로 만들어 한 곳에서 관리하도록 하자.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"// src/res/index.ts\\nexport { default as Calendar } from \\\"./calendar.svg\\\";\\nexport { default as Clock } from \\\"./clock.svg\\\";\\nexport { default as Sandwatch } from \\\"./sandwatch.svg\\\";\\nexport { default as Watch } from \\\"./watch.svg\\\";\\n\")), \"\\n\", React.createElement(_components.p, null, \"이제 다른 파일에서는 아래와 같은 형식으로 import 가 가능하다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"import { Calendar } from \\\"../res\\\";\\n<Calendar />;\\n// 혹은\\nimport * as icons from \\\"../res\\\";\\nconst Comp = icons[\\\"Calendar\\\"];\\n<Comp />;\\n\")), \"\\n\", React.createElement(_components.h3, null, \"2.2. \", React.createElement(_components.code, null, \"<SvgIcon />\"), \" 구현\"), \"\\n\", React.createElement(_components.p, null, \"하나의 파일에 묶이게 된 SVG 파일들을 읽어와 사용하는 컴포넌트 \", React.createElement(_components.code, null, \"<SvgIcon />\"), \" 은 아래처럼 구현할 수 있다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"// src/components/SvgIcon.tsx\\nimport React from \\\"react\\\";\\nimport { SvgProps } from \\\"react-native-svg\\\";\\n\\nimport * as Icons from \\\"../res\\\";\\n\\ntype IconProps = SvgProps & {\\n  // res 에서 re-export 되는 SVG 파일들의 이름을 name 으로 받을 수 있다.\\n  name: keyof typeof Icons;\\n  size?: number;\\n};\\nfunction Icon({\\n  name,\\n  fill = \\\"black\\\",\\n  width: _width,\\n  height: _height,\\n  size,\\n  ...props\\n}: IconProps) {\\n  const Comp = Icons[name];\\n  // `width`, `height` 를 따로 지정할 수 있지만\\n  // 아이콘은 보통 가로 세로 값이 같은 정사각형 형식이기 때문에\\n  // 여기서는 `size` 를 사용해 너비와 높이를 같이 지정할 수 있게 해주었다.\\n  const width = _width ?? size;\\n  const height = _height ?? size;\\n  const sizeProps = {\\n    ...(width !== undefined ? { width } : {}),\\n    ...(height !== undefined ? { height } : {}),\\n  };\\n\\n  return (\\n    <Comp\\n      {...props}\\n      // 1.2.3. `.svgrrc` 의 설정 덕분에 `fill` prop 을 이렇게 사용할 수 있다.\\n      fill={fill}\\n      {...sizeProps}\\n    />\\n  );\\n}\\n\\nexport default Icon;\\n\")), \"\\n\", React.createElement(_components.h1, null, \"3. 결과\"), \"\\n\", React.createElement(_components.h2, null, \"3.1. 사용 예\"), \"\\n\", React.createElement(_components.p, null, \"구현한 컴포넌트 \", React.createElement(_components.code, null, \"<SvgIcon />\"), \"을 아래처럼 사용할 수 있다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"// ...\\nimport SvgIcon from \\\"./components/SvgIcon\\\";\\n\\nconst App = () => {\\n  return (\\n    <SafeAreaView style={{ flex: 1, padding: 24 }}>\\n      {/* ... */}\\n      <SvgIcon name=\\\"Calendar\\\" />\\n      <SvgIcon name=\\\"Clock\\\" fill=\\\"orange\\\" />\\n      <SvgIcon size={48} name=\\\"Watch\\\" fill=\\\"gold\\\" />\\n      {/* ... */}\\n    </SafeAreaView>\\n  );\\n};\\n\")), \"\\n\", React.createElement(_components.h2, null, \"3.2. 소스코드 전문\"), \"\\n\", React.createElement(_components.p, null, \"설정 및 구현이 적용된 실제 소스코드를 참고하고 싶다면 \", React.createElement(_components.a, {\n    href: \"https://github.com/ricale/RnSvgIconExample\"\n  }, \"RnSvgIconExample\"), \" 리파지토리를 참고하자. 이 문서를 작성하면서 다시 한 번 적용 및 구현해본 리파지토리이며, 실행 또한 잘 된다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/kangseong/workspace/private/ricalelog/posts/2022/220409-react-native-svg-icon-component/index.mdx\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nvar _templateObject;\nimport * as React from \"react\";\nimport {Link} from \"gatsby\";\nimport {GatsbyImage, getImage} from \"gatsby-plugin-image\";\nimport Layout from \"../../components/Layout\";\nimport Seo from \"../../components/Seo\";\nimport styled from \"../../themes\";\nimport MdxContent from \"../../components/MdxContent\";\nconst PostDetailPage = _ref => {\n  let {data, children} = _ref;\n  const {title, date, tags, heroImage, heroImageAlt} = data.mdx.frontmatter;\n  const image = heroImage ? getImage(heroImage) : null;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, title), React.createElement(Tags, null, tags.map(tag => React.createElement(\"li\", {\n    key: tag\n  }, React.createElement(Link, {\n    to: \"/tags/\" + tag\n  }, tag)))), React.createElement(\"div\", null, date), !!image && React.createElement(GatsbyImage, {\n    image: image,\n    alt: heroImageAlt !== null && heroImageAlt !== void 0 ? heroImageAlt : \"\"\n  }), React.createElement(MdxContent, null, children));\n};\nconst Tags = styled.ul(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  display: flex;\\n  flex-direction: row;\\n  flex-wrap: wrap;\\n  gap: \", \"px;\\n\\n  margin: 0;\\n  padding: 0;\\n  list-style: none;\\n\\n  > li {\\n    padding: \", \"px \", \"px\\n      0px;\\n    border-radius: 2px;\\n\\n    background-color: \", \";\\n    color: \", \";\\n\\n    > a {\\n      text-decoration: none;\\n    }\\n  }\\n\"])), p => p.theme.dimens.gutter, p => p.theme.dimens.thin, p => p.theme.dimens.gutter, p => p.theme.colors.tag, p => p.theme.colors.onTag);\nconst query = \"3533977744\";\nexport const Head = _ref2 => {\n  var _image$images, _image$images$fallbac;\n  let {data} = _ref2;\n  const {frontmatter: {title, slug, tags, heroImage}, excerpt} = data.mdx;\n  const image = heroImage ? getImage(heroImage) : null;\n  return React.createElement(Seo, {\n    title: title,\n    description: excerpt,\n    path: \"posts/\" + slug,\n    thumbnail: image === null || image === void 0 ? void 0 : (_image$images = image.images) === null || _image$images === void 0 ? void 0 : (_image$images$fallbac = _image$images.fallback) === null || _image$images$fallbac === void 0 ? void 0 : _image$images$fallbac.src,\n    keywords: tags,\n    ogType: \"article\"\n  });\n};\nPostDetailPage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostDetailPage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h1","h2","a","pre","code","h3","h4","_provideComponents","components","React","href","className","_templateObject","wrapper","MDXLayout","PostDetailPage","_ref","data","children","title","date","tags","heroImage","heroImageAlt","mdx","frontmatter","image","getImage","Layout","Tags","map","tag","key","Link","to","GatsbyImage","alt","MdxContent","styled","_taggedTemplateLiteralLoose","theme","dimens","gutter","thin","colors","onTag","Head","_ref2","_image$images","_image$images$fallbac","slug","excerpt","Seo","description","path","thumbnail","images","fallback","src","keywords","ogType","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}