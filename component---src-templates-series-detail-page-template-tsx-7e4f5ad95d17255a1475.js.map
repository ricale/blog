{"version":3,"file":"component---src-templates-series-detail-page-template-tsx-7e4f5ad95d17255a1475.js","mappings":"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","sources":["webpack://ricalelog/./src/components/Layout.tsx","webpack://ricalelog/./src/components/ListPageHeader.tsx","webpack://ricalelog/./src/components/SimplePostList.tsx","webpack://ricalelog/./src/templates/SeriesDetailPageTemplate.tsx","webpack://ricalelog/./src/themes/themedStyledComponents.ts","webpack://ricalelog/./src/themes/normal.ts","webpack://ricalelog/./src/themes/GlobalStyle.ts","webpack://ricalelog/./src/themes/index.ts","webpack://ricalelog/./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js"],"sourcesContent":["import * as React from \"react\";\nimport { graphql, Link, useStaticQuery } from \"gatsby\";\n\nimport styled, {\n  css,\n  GlobalStyle,\n  normalTheme,\n  ThemeProvider,\n} from \"../themes\";\nimport { SiteMetadata } from \"../types\";\n\nconst isDevelopment = process.env.NODE_ENV === \"development\";\n\nconst menuItems = [\n  { path: \"/posts\", title: \"모든글\" },\n  { path: \"/series\", title: \"시리즈\" },\n  { path: \"/tags\", title: \"태그\" },\n  ...(isDevelopment ? [{ path: \"/drafts\", title: \"임시글\" }] : []),\n];\n\ntype LayoutQueryData = {\n  site: {\n    siteMetadata: SiteMetadata;\n  };\n};\ntype LayoutProps = {\n  emphasize?: boolean;\n  children?: React.ReactNode;\n};\nfunction Layout({ emphasize, children }: LayoutProps) {\n  const data = useStaticQuery<LayoutQueryData>(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          author\n        }\n      }\n    }\n  `);\n  const { title, author } = data.site.siteMetadata;\n  return (\n    <ThemeProvider theme={normalTheme}>\n      <GlobalStyle />\n      <Container>\n        <Header emphasize={emphasize}>\n          <header>\n            <Link to=\"/\">{title}</Link>\n          </header>\n          <address>\n            <a href=\"https://ricale.kr\">{`by ${author}`}</a>\n          </address>\n          <nav>\n            <ul>\n              {menuItems.map((item) => (\n                <li key={item.path}>\n                  <Link to={item.path}>{item.title}</Link>\n                </li>\n              ))}\n            </ul>\n          </nav>\n        </Header>\n        <main>{children}</main>\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nconst Container = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n\n  > main {\n    padding-left: ${(p) => p.theme.dimens.margin}px;\n    padding-right: ${(p) => p.theme.dimens.margin}px;\n    padding-bottom: ${(p) => p.theme.dimens.margin}px;\n\n    @media (max-width: 799px) {\n      padding-left: ${(p) => p.theme.dimens.margin + 4}px;\n      padding-right: ${(p) => p.theme.dimens.margin + 4}px;\n    }\n  }\n`;\ntype HeaderProps = {\n  emphasize?: boolean;\n};\nconst Header = styled.div<HeaderProps>`\n  display: flex;\n  flex-direction: row;\n\n  margin: 8px 16px;\n\n  & > header {\n    margin-right: 8px;\n    font-weight: 600;\n    font-size: 1.125rem;\n    > a {\n      color: white;\n    }\n  }\n\n  & > address {\n    font-size: 0.875rem;\n    font-style: normal;\n    > a {\n      color: white;\n    }\n  }\n\n  & > nav {\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-end;\n\n    flex: 1;\n    > ul {\n      display: flex;\n      flex-direction: row;\n      gap: 8px;\n\n      margin: 0;\n      margin-left: 16px;\n      padding: 0;\n      list-style: none;\n\n      > li > a {\n        display: inline-block;\n        /* padding: 0px 8px; */\n      }\n    }\n  }\n\n  ${(p) =>\n    p.emphasize &&\n    css`\n      padding-top: 56px;\n      padding-bottom: 48px;\n      & > header {\n        font-family: monospace;\n        font-size: 5rem;\n      }\n      & > address {\n        font-family: monospace;\n        font-size: 1.5rem;\n      }\n      & > nav {\n        display: none;\n      }\n\n      @media (max-width: 799px) {\n        flex-direction: column;\n\n        & > header {\n          font-family: monospace;\n          font-size: 4.5rem;\n        }\n        & > address {\n          font-family: monospace;\n          font-size: 1.25rem;\n        }\n      }\n    `}\n`;\n\nexport default Layout;\n","import * as React from \"react\";\nimport styled from \"../themes\";\n\ntype ListPageHeaderProps = {\n  title: string;\n  subtitle?: string;\n  note?: string | number;\n};\nfunction ListPageHeader({ title, subtitle, note }: ListPageHeaderProps) {\n  return (\n    <Container>\n      {!!subtitle && <Subtitle>{subtitle}</Subtitle>}\n      <TitleRow>\n        <h1>{title}</h1>\n        {!!note && <Note>{`(${note})`}</Note>}\n      </TitleRow>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  margin: 40px 0 45px;\n  padding-left: 40px;\n\n  @media (max-width: 414px) {\n    padding-left: 20px;\n  }\n`;\n\nconst Subtitle = styled.p``;\n\nconst TitleRow = styled.div`\n  display: flex;\n  align-items: flex-end;\n  gap: 8px;\n\n  & > h1 {\n    word-break: keep-all;\n  }\n\n  @media (max-width: 414px) {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n`;\n\nconst Note = styled.p`\n  margin-bottom: 8px;\n  font-size: 0.9375rem;\n`;\n\nexport default ListPageHeader;\n","import * as React from \"react\";\nimport { navigate } from \"gatsby\";\nimport styled from \"../themes\";\nimport { PostFrontmatter } from \"../types\";\n\ntype SimplePostListProps = {\n  data: {\n    node: {\n      frontmatter: Pick<PostFrontmatter, \"title\" | \"slug\" | \"date\"> & {\n        originalDate: string;\n      };\n    };\n  }[];\n};\n\nfunction SimplePostList({ data: source }: SimplePostListProps) {\n  const [orderByAsc, setOrderByAsc] = React.useState(false);\n  const data = [...source].sort(\n    (a, b) =>\n      a.node.frontmatter.originalDate.localeCompare(\n        b.node.frontmatter.originalDate\n      ) * (orderByAsc ? 1 : -1)\n  );\n\n  return (\n    <Container>\n      <SortingAction>\n        <span>정렬:</span>\n        <SortingToggleButton onClick={() => setOrderByAsc((st) => !st)}>\n          {`작성일 ${orderByAsc ? \"오름차순\" : \"내림차순\"}`}\n        </SortingToggleButton>\n      </SortingAction>\n      <PostList>\n        {data.map(({ node: { frontmatter } }) => (\n          <li\n            key={frontmatter.slug}\n            onClick={() => navigate(`/posts/${frontmatter.slug}`)}\n          >\n            <span className=\"date\">{frontmatter.date}</span>\n            <span className=\"title\">{frontmatter.title}</span>\n          </li>\n        ))}\n      </PostList>\n    </Container>\n  );\n}\n\nconst Container = styled.div``;\n\nconst SortingAction = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  padding: 2px;\n\n  > span {\n    font-size: 0.875rem;\n    color: #ffffff;\n  }\n`;\nconst SortingToggleButton = styled.button`\n  border: 0;\n  text-decoration: underline;\n\n  font-size: 0.875rem;\n  color: #ffffff;\n  background-color: transparent;\n  cursor: pointer;\n`;\n\nconst PostList = styled.ol`\n  margin-top: 8px;\n  padding-left: 0px;\n  list-style: none;\n  cursor: pointer;\n\n  li {\n    display: flex;\n    align-items: center;\n\n    padding: 2px;\n    margin-bottom: 4px;\n    :hover {\n      background-color: #666666;\n    }\n\n    > .date {\n      margin-right: 8px;\n      font-family: monospace;\n      font-size: 0.875rem;\n    }\n    > .title {\n      color: skyblue;\n    }\n  }\n\n  @media (max-width: 414px) {\n    li {\n      flex-direction: column;\n      align-items: flex-start;\n\n      margin-bottom: 12px;\n      > .date {\n        order: 2;\n        font-size: 0.75rem;\n      }\n      > .title {\n        order: 1;\n      }\n    }\n  }\n`;\n\nexport default SimplePostList;\n","import * as React from \"react\";\nimport { graphql, PageProps } from \"gatsby\";\n\nimport Layout from \"../components/Layout\";\nimport ListPageHeader from \"../components/ListPageHeader\";\nimport SimplePostList from \"../components/SimplePostList\";\nimport { PostFrontmatter } from \"../types\";\n\ntype SeriesDetailPageTemplateData = {\n  allMdx: {\n    totalCount: number;\n    edges: {\n      node: {\n        frontmatter: Pick<PostFrontmatter, \"title\" | \"slug\" | \"date\"> & {\n          originalDate: string;\n        };\n      };\n    }[];\n  };\n};\ntype SeriesDetailPageTemplateContext = {\n  series: string;\n};\nconst SeriesDetailPageTemplate = ({\n  pageContext,\n  data,\n}: PageProps<\n  SeriesDetailPageTemplateData,\n  SeriesDetailPageTemplateContext\n>) => {\n  const { series } = pageContext;\n  const { totalCount, edges } = data.allMdx;\n\n  return (\n    <Layout>\n      <ListPageHeader title={series} subtitle=\"시리즈\" note={totalCount} />\n      <SimplePostList data={edges} />\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query ($series: String) {\n    allMdx(\n      limit: 2000\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { series: { in: [$series] }, date: { ne: \"\" } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          frontmatter {\n            title\n            slug\n            date(formatString: \"YYYY.MM.DD.\")\n            originalDate: date\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default SeriesDetailPageTemplate;\n","import * as styledComponents from \"styled-components\";\n\nimport { RicalelogTheme } from \"./normal\";\n\nexport const {\n  default: styled,\n  css,\n  keyframes,\n  ThemeProvider,\n  ThemeContext,\n  createGlobalStyle,\n} = styledComponents as unknown as styledComponents.ThemedStyledComponentsModule<RicalelogTheme>;\n","const base = 16;\n\nconst colors = {\n  background: \"black\",\n  onBackground: \"white\",\n\n  blockquoteBorder: \"#666666\",\n  blockquote: \"#1a1a1a\",\n  onBlockquote: \"white\",\n\n  code: \"#333333\",\n  onCode: \"#DDDDDD\",\n\n  tag: \"#222222\",\n  onTag: \"skyblue\",\n\n  tableBorder: \"white\",\n};\n\nconst normal = {\n  dimens: {\n    bigMargin: base * 2,\n    margin: base * 1,\n    gutter: base * 0.5,\n    spacing: base * 0.25,\n    thin: base * 0.125,\n  },\n  colors,\n};\n\nexport default normal;\nexport type RicalelogTheme = typeof normal;\n","import { createGlobalStyle } from \"./themedStyledComponents\";\n\nconst GlobalStyle = createGlobalStyle`\n  html, body, #root {\n    width: 100%;\n    margin: 0;\n    padding: 0;\n\n    font-family: -apple-system,\n      BlinkMacSystemFont,\n      \"Segoe UI\",\n      \"Noto Sans\",\n      Helvetica,\n      Arial,\n      sans-serif,\n      \"Apple Color Emoji\",\n      \"Segoe UI Emoji\";\n\n    overflow-x: hidden;\n\n    background-color: ${(p) => p.theme.colors.background};\n    color: ${(p) => p.theme.colors.onBackground};\n  }\n\n  h1, h2, h3, h4, h5, h6, p {\n    margin: 0;\n  }\n\n  a {\n    color: skyblue;\n    text-decoration: none;\n  }\n  a:hover {\n    text-decoration: underline;\n  }\n\n  input, button, select {\n    margin: 0;\n    padding: 0;\n    font-size: 16px;\n    appearance: none;\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n`;\n\nexport default GlobalStyle;\n","import {\n  styled,\n  css,\n  keyframes,\n  ThemeProvider,\n} from \"./themedStyledComponents\";\n\nexport default styled;\nexport { css, keyframes, ThemeProvider };\n\nexport { default as normalTheme } from \"./normal\";\nexport * from \"./normal\";\nexport { default as GlobalStyle } from \"./GlobalStyle\";\nexport { default as useTheme } from \"./useTheme\";\n","export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n  strings.raw = raw;\n  return strings;\n}"],"names":["menuItems","path","title","Container","styled","p","theme","dimens","margin","Header","emphasize","css","children","data","useStaticQuery","author","site","siteMetadata","React","ThemeProvider","normalTheme","GlobalStyle","Link","to","href","map","item","key","Subtitle","TitleRow","Note","subtitle","note","SortingAction","SortingToggleButton","PostList","source","orderByAsc","setOrderByAsc","_toConsumableArray","sort","a","b","node","frontmatter","originalDate","localeCompare","onClick","st","_ref2","slug","navigate","className","date","_ref","pageContext","series","totalCount","edges","allMdx","Layout","ListPageHeader","SimplePostList","default","keyframes","ThemeContext","createGlobalStyle","styledComponents","bigMargin","base","gutter","spacing","thin","colors","background","onBackground","blockquoteBorder","blockquote","onBlockquote","code","onCode","tag","onTag","tableBorder","_taggedTemplateLiteralLoose","strings","raw","slice"],"sourceRoot":""}