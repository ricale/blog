"use strict";(self.webpackChunkricalelog=self.webpackChunkricalelog||[]).push([[4316],{4807:function(n,a,e){e.r(a),e.d(a,{Head:function(){return x},default:function(){return B}});var t=e(1151),s=e(7294);function o(n){const a=Object.assign({div:"div",p:"p",h2:"h2",a:"a",code:"code",h3:"h3",h4:"h4",ul:"ul",li:"li"},(0,t.ah)(),n.components);return s.createElement(s.Fragment,null,s.createElement(a.div,{className:"md"},s.createElement(a.p,null,"React Native 를 웹뷰 컨테이너로 사용해 웹앱을 구현하고 있다."),s.createElement(a.p,null,"웹뷰를 사용한 하이브리드앱 구현 시 주의해야 할 점 중 하나는 안드로이드 기기의 백버튼(뒤로가기 버튼)에 대한 처리다. 사람들은 이전 웹페이지로 돌아가길 기대하며 백버튼을 누르지만, React Native 는 웹뷰 내에서의 이전 페이지로 이동하는 것이 아니라 React Native 상의 이전 화면으로 돌아가기 때문이다."),s.createElement(a.p,null,"만약 웹뷰 화면이 해당 앱의 첫 화면이라면, 백버튼을 눌렀을 때 이전 웹페이지로 가는 것이 아니라 앱이 종료되는 것을 경험할 수 있다. 당연하게도 그것은 개발자가 의도한 사항도, 사용자가 의도한 사항도 아니다."),s.createElement(a.p,null,"그러면 웹뷰가 있는 화면에서 백버튼을 눌렀을 때 React Native 의 이전 화면이 아닌 웹뷰의 이전 웹페이지가로 가도록 코드를 수정해보자."),s.createElement(a.h2,{id:"1-onnavigationstatechange",style:{position:"relative"}},s.createElement(a.a,{href:"#1-onnavigationstatechange","aria-label":"1 onnavigationstatechange permalink",className:"anchor before"},s.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"1. ",s.createElement(a.code,null,"onNavigationStateChange")),s.createElement(a.p,null,"React Native WebView 를 사용하고 있다면 ",s.createElement(a.a,{href:"https://github.com/react-native-webview/react-native-webview/blob/master/docs/Reference.md#onnavigationstatechange"},s.createElement(a.code,null,"onNavigationStateChange")," 콜백"),"과 ",s.createElement(a.a,{href:"https://reactnative.dev/docs/backhandler"},s.createElement(a.code,null,"BackHandler")," API"),"를 사용해 이전 웹페이지로 이동하도록 백버튼의 기능을 조정할 수 있다."),s.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">HomeScreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> ref <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>navState<span class="token punctuation">,</span> setNavState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">onPress</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>navState<span class="token punctuation">.</span>canGoBack<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 뒤로 갈 수 있는 상태라면 이전 웹페이지로 이동한다</span>\n        ref<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">goBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 기본 뒤로가기 동작을 수행하지 않을 거라면 true 를 리턴한다.</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 뒤로 갈 수 없는 상태라면</span>\n        <span class="token comment">// 다른 원하는 행동을 하면 된다</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"do something"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 기본 뒤로가기 동작을 수행하지 않을 거라면 true 가 아닌 값을 리턴한다.</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 안드로이드 백버튼이 눌렸을 때 이벤트 리스너를 등록한다.</span>\n    BackHandler<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"hardwareBackPress"</span><span class="token punctuation">,</span> onPress<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      BackHandler<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"hardwareBackPress"</span><span class="token punctuation">,</span> onPress<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>navState<span class="token punctuation">.</span>canGoBack<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>WebView\n      <span class="token comment">// ...</span>\n      ref<span class="token operator">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span>\n      <span class="token comment">// 웹뷰의</span>\n      onNavigationStateChange<span class="token operator">=</span><span class="token punctuation">{</span>setNavState<span class="token punctuation">}</span>\n    <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),s.createElement(a.p,null,s.createElement(a.code,null,"onNavigationStateChange")," 콜백의 첫 번째 인자(",s.createElement(a.code,null,"navState"),")는 웹뷰의 현재 상태가 담긴 객체인데, 해당 객체의 ",s.createElement(a.code,null,"canGoBack")," 값은 현재 웹뷰에서 뒤로가기가 가능한 상태인지를 알려준다 (예를 들어 첫페이지에서는 뒤로 갈 수 없을 것이다. 그런 경우에는 ",s.createElement(a.code,null,"false")," 값을 가진다)."),s.createElement(a.p,null,"뒤로 갈 수 있다면 ",s.createElement(a.code,null,"ref.current.goBack()"),"메서드를 사용해 이전 페이지로 돌아가고, 그렇지 않다면 필요한 다른 작업을 하면 되겠다."),s.createElement(a.h2,{id:"2-html5-history-api-대응",style:{position:"relative"}},s.createElement(a.a,{href:"#2-html5-history-api-%EB%8C%80%EC%9D%91","aria-label":"2 html5 history api 대응 permalink",className:"anchor before"},s.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"2. HTML5 History API 대응"),s.createElement(a.p,null,"하지만 ",s.createElement(a.code,null,"onNavigationStateChange")," 콜백에 문제가 있으니, 바로 ",s.createElement(a.code,null,"pushState()"),", ",s.createElement(a.code,null,"replaceState()")," 등 ",s.createElement(a.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/History_API"},"HTML5 History API"),"로 추가된 기능으로 페이지 이동을 하면 동작하지 않는다는 것이다. 이는 ",s.createElement(a.code,null,"canGoBack")," 값이 최신화되지 않는다는 뜻이고, 위에서 작성한 코드가 정상적으로 동작할 수 없다는 뜻이다."),s.createElement(a.p,null,"물론 여기서 주저앉을 수는 없다. 이제 우리는 ",s.createElement(a.a,{href:"https://github.com/react-native-webview/react-native-webview/blob/master/docs/Reference.md#onmessage"},s.createElement(a.code,null,"onMessage")," 콜백"),"과 ",s.createElement(a.a,{href:"https://github.com/react-native-webview/react-native-webview/blob/master/docs/Reference.md#injectjavascriptstr"},s.createElement(a.code,null,"webview.injectJavaScript()")," 메서드"),"를 통해 ",s.createElement(a.code,null,"pushState()"),", ",s.createElement(a.code,null,"replaceState()")," 동작 시 웹뷰의 상태를 받아오도록 할 것이다."),s.createElement(a.h3,{id:"21-webviewinjectjavascript",style:{position:"relative"}},s.createElement(a.a,{href:"#21-webviewinjectjavascript","aria-label":"21 webviewinjectjavascript permalink",className:"anchor before"},s.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"2.1. ",s.createElement(a.code,null,"webview.injectJavaScript()")),s.createElement(a.p,null,s.createElement(a.code,null,"webview.injectJavaScript()")," 메서드는 웹뷰에 자바스크립트 코드를 삽입할 수 있도록 해주는 메서드이다. 해당 메서드를 통해 ",s.createElement(a.code,null,"pushState()"),"와 ",s.createElement(a.code,null,"replaceState()")," 메서드를 래핑해줄 것이다."),s.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token constant">INJECTED_CODE</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n(function() {\n  function wrap(fn) {\n    return function wrapper() {\n      var res = fn.apply(this, arguments);\n      window.ReactNativeWebView.postMessage(\'navigationStateChange\');\n      return res;\n    }\n  }\n\n  history.pushState = wrap(history.pushState);\n  history.replaceState = wrap(history.replaceState);\n  window.addEventListener(\'popstate\', function() {\n    window.ReactNativeWebView.postMessage(\'navigationStateChange\');\n  });\n})();\n\ntrue;\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">HomeScreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>WebView\n      <span class="token comment">// ...</span>\n      ref<span class="token operator">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span>\n      onLoadStart<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ref<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">injectJavaScript</span><span class="token punctuation">(</span><span class="token constant">INJECTED_CODE</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n      onNavigationStateChange<span class="token operator">=</span><span class="token punctuation">{</span>setNavState<span class="token punctuation">}</span>\n    <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),s.createElement(a.h4,{id:"211-injectedjavascript-props-는-안-되나",style:{position:"relative"}},s.createElement(a.a,{href:"#211-injectedjavascript-props-%EB%8A%94-%EC%95%88-%EB%90%98%EB%82%98","aria-label":"211 injectedjavascript props 는 안 되나 permalink",className:"anchor before"},s.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"2.1.1. ",s.createElement(a.code,null,"injectedJavaScript")," props 는 안 되나?"),s.createElement(a.p,null,"React Native WebView 에는 ",s.createElement(a.code,null,"webview.injectJavaScript()"),"메서드와 비슷한 기능을 하는 ",s.createElement(a.a,{href:"https://github.com/react-native-webview/react-native-webview/blob/master/docs/Reference.md#injectedjavascript"},s.createElement(a.code,null,"injectedJavaScript")," prop"),"도 존재한다. 하지만 결정적인 차이점이 존재하는데, ",s.createElement(a.code,null,"webview.injectJavaScript()"),"는 우리가 원하는 때에만 골라서 코드를 삽입할 수 있지만, ",s.createElement(a.code,null,"injectedJavaScript"),"는 ",s.createElement(a.code,null,"onLoad")," 이벤트가 발생할 때마다 코드를 삽입된다는 것이다."),s.createElement(a.p,null,s.createElement(a.code,null,"onLoadStart")," 이벤트는 실제 페이지 이동이 일어날 때만 발생하는데 반해 ",s.createElement(a.code,null,"onLoad")," 이벤트는 History API 등으로 로딩이 발생할 때도 발생한다. 때문에 같은 코드가 중복적으로 삽입될 수 있고, 우리는 그러한 현상을 피하기 위해 ",s.createElement(a.code,null,"onLoadStart"),"와 ",s.createElement(a.code,null,"injectJavaScript()")," 메서드를 조합해서 코드를 삽입한다."),s.createElement(a.p,null,"(단, ",s.createElement(a.code,null,"injectedJavaScriptBeforeContentLoaded")," prop 을 사용하면 위 코드와 거의 동일한 효과를 낼 수 있다.)"),s.createElement(a.h4,{id:"212-삽입된-코드는-어떤-코드",style:{position:"relative"}},s.createElement(a.a,{href:"#212-%EC%82%BD%EC%9E%85%EB%90%9C-%EC%BD%94%EB%93%9C%EB%8A%94-%EC%96%B4%EB%96%A4-%EC%BD%94%EB%93%9C","aria-label":"212 삽입된 코드는 어떤 코드 permalink",className:"anchor before"},s.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"2.1.2. 삽입된 코드는 어떤 코드?"),s.createElement(a.p,null,"위 코드에는 삽입된 코드가 통문자열로 되어있기 때문에 알아보기 힘들다. 하이라이트된 코드로 다시 살펴보자."),s.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token function">wrap</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      window<span class="token punctuation">.</span>ReactNativeWebView<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"navigationStateChange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  history<span class="token punctuation">.</span>pushState <span class="token operator">=</span> <span class="token function">wrap</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span>pushState<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  history<span class="token punctuation">.</span>replaceState <span class="token operator">=</span> <span class="token function">wrap</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span>replaceState<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"popstate"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span>ReactNativeWebView<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"navigationStateChange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token boolean">true</span><span class="token punctuation">;</span></code></pre></div>'}}),s.createElement(a.p,null,s.createElement(a.code,null,"pushState()"),"와 ",s.createElement(a.code,null,"replaceState()"),"를 래핑하고 ",s.createElement(a.code,null,"popState")," 이벤트에 리스너를 붙이는 코드라는 것을 알 수 있다. 모든 코드들은 공통적으로 ",s.createElement(a.a,{href:"https://github.com/react-native-webview/react-native-webview/blob/master/docs/Reference.md#postmessagestr"},s.createElement(a.code,null,"ReactNativeWebView.postMessage()")," 메서드"),"를 호출하는 것을 볼 수 있다. 이 메서드가 호출될 때마다 웹뷰는 웹페이지의 상태를 ",s.createElement(a.code,null,"onMessage")," 콜백으로 받아볼 수 있다."),s.createElement(a.h3,{id:"22-onmessage",style:{position:"relative"}},s.createElement(a.a,{href:"#22-onmessage","aria-label":"22 onmessage permalink",className:"anchor before"},s.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"2.2. ",s.createElement(a.code,null,"onMessage")),s.createElement(a.p,null,"그럼 ",s.createElement(a.code,null,"onMessage")," 콜백도 넣어보자."),s.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">HomeScreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>WebView\n      <span class="token comment">// ...</span>\n      ref<span class="token operator">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span>\n      onLoadStart<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ref<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">injectJavaScript</span><span class="token punctuation">(</span><span class="token constant">INJECTED_CODE</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n      onNavigationStateChange<span class="token operator">=</span><span class="token punctuation">{</span>setNavState<span class="token punctuation">}</span>\n      onMessage<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> nativeEvent <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>nativeEvent<span class="token punctuation">.</span>data <span class="token operator">===</span> <span class="token string">"navigationStateChange"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">setNavState</span><span class="token punctuation">(</span>nativeEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">}</span>\n    <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),s.createElement(a.p,null,"됐다. 이제 ",s.createElement(a.code,null,"pushState()"),", ",s.createElement(a.code,null,"replaceState()"),"도 놓치지 않게 되었다."),s.createElement(a.h2,{id:"3-전체-코드",style:{position:"relative"}},s.createElement(a.a,{href:"#3-%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C","aria-label":"3 전체 코드 permalink",className:"anchor before"},s.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"3. 전체 코드"),s.createElement(a.p,null,"(아래 코드는 이해를 돕기 위한 의사코드로, 실제로는 동작하지 않을 수도 있다)"),s.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token constant">INJECTED_CODE</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n(function() {\n  function wrap(fn) {\n    return function wrapper() {\n      var res = fn.apply(this, arguments);\n      window.ReactNativeWebView.postMessage(\'navigationStateChange\');\n      return res;\n    }\n  }\n\n  history.pushState = wrap(history.pushState);\n  history.replaceState = wrap(history.replaceState);\n  window.addEventListener(\'popstate\', function() {\n    window.ReactNativeWebView.postMessage(\'navigationStateChange\');\n  });\n})();\n\ntrue;\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">HomeScreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> ref <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>navState<span class="token punctuation">,</span> setNavState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">onPress</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>navState<span class="token punctuation">.</span>canGoBack<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 뒤로 갈 수 있는 상태라면 이전 웹페이지로 이동한다</span>\n        ref<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">goBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 뒤로 갈 수 없는 상태라면</span>\n        <span class="token comment">// 다른 원하는 행동을 하면 된다</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 안드로이드 백버튼이 눌렸을 때 이벤트 리스너를 등록한다.</span>\n    BackHandler<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"hardwareBackPress"</span><span class="token punctuation">,</span> onPress<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      BackHandler<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"hardwareBackPress"</span><span class="token punctuation">,</span> onPress<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>navState<span class="token punctuation">.</span>canGoBack<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>WebView\n      <span class="token comment">// ...</span>\n      ref<span class="token operator">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span>\n      onLoadStart<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ref<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">injectJavaScript</span><span class="token punctuation">(</span><span class="token constant">INJECTED_CODE</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n      onNavigationStateChange<span class="token operator">=</span><span class="token punctuation">{</span>setNavState<span class="token punctuation">}</span>\n      onMessage<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> nativeEvent <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>nativeEvent<span class="token punctuation">.</span>data <span class="token operator">===</span> <span class="token string">"navigationStateChange"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">setNavState</span><span class="token punctuation">(</span>nativeEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">}</span>\n    <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),s.createElement(a.h2,{id:"4-참고",style:{position:"relative"}},s.createElement(a.a,{href:"#4-%EC%B0%B8%EA%B3%A0","aria-label":"4 참고 permalink",className:"anchor before"},s.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4. 참고"),s.createElement(a.ul,null,"\n",s.createElement(a.li,null,s.createElement(a.a,{href:"https://github.com/react-native-webview/react-native-webview"},"React Native WebView")),"\n",s.createElement(a.li,null,s.createElement(a.a,{href:"https://github.com/react-native-webview/react-native-webview/issues/24#issuecomment-483956651"},"MIGRATED: iOS WebView doesn't support hash url change. The onNavigationStateChange listener will not be called when url hash changes. (#20447) #24")),"\n")),"\n",s.createElement(a.div,{className:"toc"},s.createElement(a.h3,{id:"목차",style:{position:"relative"}},s.createElement(a.a,{href:"#%EB%AA%A9%EC%B0%A8","aria-label":"목차 permalink",className:"anchor before"},s.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"목차"),s.createElement(a.ul,null,"\n",s.createElement(a.li,null,s.createElement(a.a,{href:"#1-onnavigationstatechange"},"1. ",s.createElement(a.code,null,"onNavigationStateChange"))),"\n",s.createElement(a.li,null,s.createElement(a.a,{href:"#2-html5-history-api-%EB%8C%80%EC%9D%91"},"2. HTML5 History API 대응"),"\n",s.createElement(a.ul,null,"\n",s.createElement(a.li,null,s.createElement(a.a,{href:"#21-webviewinjectjavascript"},"2.1. ",s.createElement(a.code,null,"webview.injectJavaScript()")),"\n",s.createElement(a.ul,null,"\n",s.createElement(a.li,null,s.createElement(a.a,{href:"#211-injectedjavascript-props-%EB%8A%94-%EC%95%88-%EB%90%98%EB%82%98"},"2.1.1. ",s.createElement(a.code,null,"injectedJavaScript")," props 는 안 되나?")),"\n",s.createElement(a.li,null,s.createElement(a.a,{href:"#212-%EC%82%BD%EC%9E%85%EB%90%9C-%EC%BD%94%EB%93%9C%EB%8A%94-%EC%96%B4%EB%96%A4-%EC%BD%94%EB%93%9C"},"2.1.2. 삽입된 코드는 어떤 코드?")),"\n"),"\n"),"\n",s.createElement(a.li,null,s.createElement(a.a,{href:"#22-onmessage"},"2.2. ",s.createElement(a.code,null,"onMessage"))),"\n"),"\n"),"\n",s.createElement(a.li,null,s.createElement(a.a,{href:"#3-%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C"},"3. 전체 코드")),"\n",s.createElement(a.li,null,s.createElement(a.a,{href:"#4-%EC%B0%B8%EA%B3%A0"},"4. 참고")),"\n")))}var p,c,l,i,r=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.ah)(),n.components);return a?s.createElement(a,n,s.createElement(o,n)):o(n)},u=e(1880),k=e(3723),d=e(1858),m=e(3904),h=e(891),g=e(5534),v=e(5777),E=e(7178),f=e(2889);function w(n){let{data:a,children:e}=n;const{frontmatter:t,sameSeriesPosts:o}=a.mdx,{title:p,slug:c,date:l,tags:i,series:r,heroImage:u,heroImageAlt:m}=t,h=u?(0,k.c)(u):null;return s.createElement(d.Z,null,s.createElement(b,null,s.createElement("h1",null,p),s.createElement(y,null,l),s.createElement(f.Z,{tags:i})),s.createElement(E.Z,{name:r,data:o,current:c}),!!h&&s.createElement(S,{image:h,alt:null!=m?m:""}),s.createElement(C,null,e),s.createElement(v.Z,null))}const b=h.ZP.div(p||(p=(0,u.Z)(["\n  margin: 60px 0 72px;\n  padding: 0 24px;\n\n  & > h1 {\n    font-size: 2.5rem;\n    word-break: keep-all;\n    margin: 0;\n  }\n"]))),S=(0,h.ZP)(k.G)(c||(c=(0,u.Z)(["\n  margin-bottom: 16px;\n"]))),y=h.ZP.div(l||(l=(0,u.Z)(["\n  margin: 16px 0;\n"]))),C=(0,h.ZP)(g.Z)(i||(i=(0,u.Z)(["\n  margin-bottom: 60px;\n"]))),x=n=>{var a,e;let{data:t}=n;const{frontmatter:{title:o,slug:p,tags:c,heroImage:l,previewContent:i},excerpt:r}=t.mdx,u=l?(0,k.c)(l):null;return s.createElement(m.Z,{title:o,description:null!=i?i:r,path:"posts/"+p,thumbnail:null==u||null===(a=u.images)||void 0===a||null===(e=a.fallback)||void 0===e?void 0:e.src,keywords:c,ogType:"article"})};function B(n){return s.createElement(w,n,s.createElement(r,n))}},5777:function(n,a,e){var t=e(7294);a.Z=function(){const n=(0,t.useRef)(null);return(0,t.useEffect)((()=>{var a;const e=document.createElement("script");Object.entries({src:"https://utteranc.es/client.js",repo:"ricale/blog","issue-term":"pathname",label:"utterances",theme:"github-dark",crossOrigin:"anonymous",async:"true"}).forEach((n=>{let[a,t]=n;e.setAttribute(a,t)})),null===(a=n.current)||void 0===a||a.appendChild(e)}),[]),t.createElement("div",{id:"comments",ref:n})}},5534:function(n,a,e){var t,s=e(1880);const o=e(891).ZP.div(t||(t=(0,s.Z)(["\n  display: flex;\n  flex-direction: column;\n  font-size: 16px;\n  line-height: 1.5;\n\n  > .md {\n    order: 1;\n  }\n  > .toc {\n    order: 0;\n    margin: 0 16px 16px;\n    padding: 16px 0 0 16px;\n    background-color: #1a1a1a;\n    > h3 {\n      margin: 0;\n      font-size: 1.125rem;\n    }\n    > ul {\n      position: relative;\n      margin: 0;\n      padding: 8px 0 16px 20px;\n\n      font-size: 1rem;\n      list-style: none;\n\n      a {\n        color: #dddddd;\n      }\n\n      ul {\n        list-style: none;\n        padding-left: 30px;\n      }\n    }\n  }\n\n  p {\n    margin-top: 0;\n    margin-bottom: 16px;\n  }\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    margin-top: 24px;\n    margin-bottom: 16px;\n    line-height: 1.25;\n    font-weight: 600;\n\n    > a.anchor path {\n      fill: white;\n    }\n  }\n\n  h1 {\n    padding-bottom: 0.3em;\n    border-bottom: 1px solid #21262d;\n    font-size: 2.125em;\n  }\n\n  h2 {\n    padding-bottom: 0.3em;\n    border-bottom: 1px solid #21262d;\n    font-size: 1.625em;\n  }\n\n  h3 {\n    font-size: 1.5em;\n  }\n\n  h4 {\n    font-size: 1.25em;\n  }\n\n  h5 {\n    font-size: 1em;\n  }\n\n  h6 {\n    font-size: 0.9375em;\n  }\n\n  ul,\n  ol,\n  .gatsby-resp-image-wrapper {\n    margin-bottom: 16px;\n  }\n\n  table {\n    width: max-content;\n    max-width: 100%;\n    margin-bottom: 16px;\n    border-collapse: collapse;\n    tr {\n      border-top: 1px solid #21262d;\n    }\n    td,\n    th {\n      padding: 6px 13px;\n      border: 1px solid #30363d;\n    }\n  }\n\n  hr {\n    height: 0.25em;\n    margin: 24px 0;\n    border: 0;\n\n    background-color: #30363d;\n  }\n\n  li > ul,\n  li > ol {\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n\n  blockquote {\n    position: relative;\n\n    margin-left: 0;\n    margin-right: 0;\n    margin-bottom: 16px;\n    padding: 16px 32px;\n    border-left: 1px solid ",";\n    border-left-width: 10px;\n\n    background-color: ",";\n\n    > :first-child {\n      margin-top: 0;\n    }\n    > :last-child {\n      margin-bottom: 0;\n    }\n    > ul,\n    > ol {\n      padding-left: 20px;\n    }\n  }\n\n  blockquote:before {\n    content: '\"';\n\n    position: absolute;\n    top: -10px;\n    left: 5px;\n\n    font-size: 3em;\n    color: ",";\n  }\n  blockquote:after {\n    content: '\"';\n\n    position: absolute;\n    bottom: -30px;\n    right: 5px;\n\n    font-size: 3em;\n    color: ",";\n  }\n\n  code {\n    padding: 0.2em 0.4em;\n    border-radius: 2px;\n\n    font-size: 0.85em;\n\n    background-color: ",";\n    color: ",';\n    white-space: break-spaces;\n  }\n\n  a > code {\n    color: skyblue;\n  }\n\n  pre[class*="language-"] {\n    margin-bottom: 16px;\n\n    /* overflow-x: auto; */\n  }\n\n  pre > code {\n    padding: unset;\n    border-radius: unset;\n    background-color: unset;\n    color: unset;\n  }\n\n  img {\n    border: 1px solid #333333;\n  }\n'])),(n=>n.theme.colors.blockquoteBorder),(n=>n.theme.colors.blockquote),(n=>n.theme.colors.blockquoteBorder),(n=>n.theme.colors.blockquoteBorder),(n=>n.theme.colors.code),(n=>n.theme.colors.onCode));a.Z=o},7178:function(n,a,e){var t,s,o,p,c,l=e(1880),i=e(7294),r=e(1883),u=e(891);const k=u.ZP.div(t||(t=(0,l.Z)(["\n  margin-bottom: 16px;\n  align-items: center;\n\n  background-color: #111111;\n"]))),d=u.ZP.div(s||(s=(0,l.Z)(["\n  display: flex;\n  justify-content: space-between;\n  padding: 16px;\n  cursor: pointer;\n\n  > h2 {\n    margin: 0;\n    font-size: 1rem;\n  }\n\n  > span {\n    user-select: none;\n    transform: rotate(","deg);\n  }\n"])),(n=>n.collapsed?0:180)),m=u.ZP.ol(o||(o=(0,l.Z)(["\n  margin: 0 16px;\n  padding-bottom: 16px;\n"]))),h=u.ZP.li(p||(p=(0,l.Z)(["\n  ","\n"])),(n=>n.active&&(0,u.iv)(c||(c=(0,l.Z)(["\n      & > a {\n        font-weight: bold;\n        font-style: italic;\n        text-decoration: underline;\n      }\n    "])))));a.Z=function(n){let{name:a,data:e,current:t}=n;const[s,o]=i.useState(!0);return e?i.createElement(k,null,i.createElement(d,{collapsed:s,onClick:()=>o((n=>!n))},i.createElement("h2",null,"시리즈 ",i.createElement(r.Link,{to:"/series/"+a+"/"},'"'+a+'"')),i.createElement("span",null,"▲")),!s&&i.createElement(m,null,e.map((n=>{let{frontmatter:{slug:a,title:e}}=n;return i.createElement(h,{active:a===t,key:a},i.createElement(r.Link,{to:"/posts/"+a},e))})))):null}},2889:function(n,a,e){e.d(a,{Z:function(){return k}});var t,s=e(1880),o=e(7294),p=e(891),c=e(1883);const l=(0,p.ZP)(c.Link)(t||(t=(0,s.Z)(["\n  display: inline-block;\n  padding: ","px ","px;\n  border-radius: 2px;\n\n  background-color: ",";\n  color: ",";\n  text-decoration: none;\n"])),(n=>n.theme.dimens.spacing),(n=>n.theme.dimens.gutter),(n=>n.theme.colors.tag),(n=>n.theme.colors.onTag));var i,r=function(n){let{value:a}=n;return o.createElement(l,{to:"/tags/"+a},a)};const u=p.ZP.ul(i||(i=(0,s.Z)(["\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: ","px;\n\n  margin: 0;\n  padding: 0;\n  list-style: none;\n"])),(n=>n.theme.dimens.gutter));var k=function(n){let{tags:a,showCount:e,...t}=n;const s="string"==typeof a[0]?a.map((n=>({fieldValue:n,totalCount:void 0}))):a;return o.createElement(u,t,s.map((n=>o.createElement("li",{key:n.fieldValue},o.createElement(r,{value:n.fieldValue}),e&&!!n.totalCount&&o.createElement("sup",null,""+n.totalCount)))))}},1151:function(n,a,e){e.d(a,{ah:function(){return o}});var t=e(7294);const s=t.createContext({});function o(n){const a=t.useContext(s);return t.useMemo((()=>"function"==typeof n?n(a):{...a,...n}),[a,n])}}}]);
//# sourceMappingURL=component---src-pages-posts-mdx-frontmatter-slug-tsx-content-file-path-users-kangseong-workspace-private-ricalelog-posts-2021-210821-react-native-webview-android-back-button-index-mdx-623691772760326d3837.js.map