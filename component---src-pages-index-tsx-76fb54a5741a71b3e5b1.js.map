{"version":3,"file":"component---src-pages-index-tsx-76fb54a5741a71b3e5b1.js","mappings":"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","sources":["webpack://ricalelog/./src/components/Layout.tsx","webpack://ricalelog/./src/components/Seo.tsx","webpack://ricalelog/./src/pages/index.tsx","webpack://ricalelog/./src/themes/themedStyledComponents.ts","webpack://ricalelog/./src/themes/normal.ts","webpack://ricalelog/./src/themes/GlobalStyle.ts","webpack://ricalelog/./src/themes/index.ts","webpack://ricalelog/./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js"],"sourcesContent":["import { graphql, Link, useStaticQuery } from \"gatsby\";\nimport * as React from \"react\";\nimport styled, { GlobalStyle, normalTheme, ThemeProvider } from \"../themes\";\n\ntype LayoutProps = {\n  children?: React.ReactNode;\n};\nconst Layout = ({ children }: LayoutProps) => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n  return (\n    <ThemeProvider theme={normalTheme}>\n      <GlobalStyle />\n      <Container>\n        <header>{data.site.siteMetadata.title}</header>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/posts\">posts</Link>\n            </li>\n            <li>\n              <Link to=\"/tags\">tags</Link>\n            </li>\n          </ul>\n        </nav>\n        <main>{children}</main>\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nconst Container = styled.div`\n  max-width: 800px;\n  padding: ${(p) => p.theme.dimens.margin}px;\n`;\nconst BlogHeader = styled.header``;\n\nexport default Layout;\n","import * as React from \"react\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\ntype SeoQueryData = {\n  site: {\n    siteMetadata: {\n      title: string;\n      author: string;\n      siteUrl: string;\n      description: string;\n    };\n    pathPrefix: string;\n  };\n};\ntype SeoProps = {\n  title?: string;\n  description?: string;\n  path?: string;\n  thumbnail?: string;\n  keywords?: string[];\n  ogType?: string;\n};\nconst Seo = ({\n  title,\n  description,\n  path,\n  thumbnail,\n  ogType,\n  keywords,\n}: SeoProps) => {\n  const data = useStaticQuery<SeoQueryData>(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          author\n          siteUrl\n          description\n        }\n        pathPrefix\n      }\n    }\n  `);\n\n  const {\n    siteMetadata: { title: siteTitle, author, siteUrl, description: siteDesc },\n    pathPrefix,\n  } = data.site;\n\n  const pageTitle = title ? `${title} | ${siteTitle}` : siteTitle;\n  const seoTitle = title ?? siteTitle;\n  const desc = description || siteDesc;\n  const pageUrl = `${siteUrl}${pathPrefix}${path ? `/${path}` : \"\"}`;\n  const imageUrl = thumbnail ? `${siteUrl}${thumbnail}` : null;\n  const keywordsString = keywords ? keywords.join(\", \") : null;\n\n  return (\n    <>\n      <title>{pageTitle}</title>\n      <meta name=\"description\" content={desc} />\n      <meta name=\"author\" content={author} />\n      {keywordsString && <meta name=\"keywords\" content={keywordsString} />}\n\n      {!!ogType && <meta property=\"og:type\" content={ogType} />}\n      <meta property=\"og:title\" content={seoTitle} />\n      <meta property=\"og:description\" content={desc} />\n      <meta property=\"og:url\" content={pageUrl} />\n      {!!imageUrl && <meta property=\"og:image\" content={imageUrl} />}\n\n      <meta property=\"twitter:card\" content=\"summary_large_image\" />\n      <meta property=\"twitter:title\" content={seoTitle} />\n      <meta property=\"twitter:description\" content={desc} />\n      <meta property=\"twitter:url\" content={pageUrl} />\n      {!!imageUrl && <meta property=\"twitter:image\" content={imageUrl} />}\n    </>\n  );\n};\n\nexport default Seo;\n","import { HeadFC } from \"gatsby\";\nimport * as React from \"react\";\nimport Layout from \"../components/Layout\";\nimport Seo from \"../components/Seo\";\n\nconst IndexPage = () => {\n  return <Layout></Layout>;\n};\n\nexport const Head: HeadFC = () => <Seo />;\n\nexport default IndexPage;\n","import * as styledComponents from \"styled-components\";\n\nimport { RicalelogTheme } from \"./normal\";\n\nexport const {\n  default: styled,\n  css,\n  keyframes,\n  ThemeProvider,\n  ThemeContext,\n  createGlobalStyle,\n} = styledComponents as unknown as styledComponents.ThemedStyledComponentsModule<RicalelogTheme>;\n","const base = 16;\n\nconst colors = {\n  background: \"black\",\n  onBackground: \"white\",\n\n  codeblock: \"#111111\",\n  onCodeblock: \"white\",\n\n  blockquoteBorder: \"#666666\",\n  blockquote: \"#111111\",\n  onBlockquote: \"white\",\n\n  code: \"#333333\",\n  onCode: \"#DDDDDD\",\n\n  tag: \"#111111\",\n  onTag: \"skyblue\",\n\n  tableBorder: \"white\",\n};\n\nconst normal = {\n  dimens: {\n    bigMargin: base * 2,\n    margin: base * 1,\n    gutter: base * 0.5,\n    spacing: base * 0.25,\n    thin: base * 0.125,\n  },\n  colors,\n};\n\nexport default normal;\nexport type RicalelogTheme = typeof normal;\n","import { createGlobalStyle } from \"./themedStyledComponents\";\n\nconst GlobalStyle = createGlobalStyle`\n  html, body, #root {\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    font-size: 18px;\n    line-height: 180%;\n\n    overflow-x: hidden;\n\n    background-color: ${(p) => p.theme.colors.background};\n    color: ${(p) => p.theme.colors.onBackground};\n  }\n\n  a {\n    color: skyblue;\n  }\n\n  input, button, select {\n    margin: 0;\n    padding: 0;\n    font-size: 16px;\n    appearance: none;\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n`;\n\nexport default GlobalStyle;\n","import {\n  styled,\n  css,\n  keyframes,\n  ThemeProvider,\n} from \"./themedStyledComponents\";\n\nexport default styled;\nexport { css, keyframes, ThemeProvider };\n\nexport { default as normalTheme } from \"./normal\";\nexport * from \"./normal\";\nexport { default as GlobalStyle } from \"./GlobalStyle\";\nexport { default as useTheme } from \"./useTheme\";\n","export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n  strings.raw = raw;\n  return strings;\n}"],"names":["Container","styled","p","theme","dimens","margin","_ref","children","data","useStaticQuery","React","ThemeProvider","normalTheme","GlobalStyle","site","siteMetadata","title","Link","to","description","path","thumbnail","ogType","keywords","siteTitle","author","siteUrl","siteDesc","pathPrefix","pageTitle","seoTitle","desc","pageUrl","imageUrl","keywordsString","join","name","content","property","Head","Seo","Layout","default","css","keyframes","ThemeContext","createGlobalStyle","styledComponents","bigMargin","base","gutter","spacing","thin","colors","background","onBackground","codeblock","onCodeblock","blockquoteBorder","blockquote","onBlockquote","code","onCode","tag","onTag","tableBorder","_taggedTemplateLiteralLoose","strings","raw","slice"],"sourceRoot":""}