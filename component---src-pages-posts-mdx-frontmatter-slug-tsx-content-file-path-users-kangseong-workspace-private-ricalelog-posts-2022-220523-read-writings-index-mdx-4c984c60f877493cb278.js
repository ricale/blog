"use strict";(self.webpackChunkricalelog=self.webpackChunkricalelog||[]).push([[6394],{1347:function(e,t,n){n.r(t),n.d(t,{Head:function(){return k},default:function(){return y}});var l=n(1151),a=n(7294);function c(e){const t=Object.assign({h2:"h2",h3:"h3",a:"a",p:"p",code:"code",ul:"ul",li:"li"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(t.h2,null,"JavaScript"),"\n",a.createElement(t.h3,null,a.createElement(t.a,{href:"https://kentcdodds.com/blog/stop-mocking-fetch"},"Stop mocking fetch")),"\n",a.createElement(t.p,null,"테스트를 작성할 때 fetch 를 mocking 하지 말고, 대신 MSW 라는 툴을 사용해 네트워크 요청 자체를 mocking 하라는 글. MSW 는 서비스 워커를 통해 모든 네트워크 요청을 가로채 원하는 가짜 응답을 내려줄 수 있는 툴이다. 비단 테스트 뿐만 아니라 개발 시 아직 구현되지 않은 API 에 대한 mocking 용도로도 사용 가능하다."),"\n",a.createElement(t.p,null,"MSW 에 관해서는 한국어로 작성된 글도 많이 있다. (예, ",a.createElement(t.a,{href:"https://blog.rhostem.com/posts/2021-03-20-mock-service-worker"},"Mock Service Worker로 만드는 모의 서버"),")"),"\n",a.createElement(t.h2,null,"React"),"\n",a.createElement(t.h3,null,a.createElement(t.a,{href:"https://kentcdodds.com/blog/useeffect-vs-uselayouteffect"},"useEffect vs useLayoutEffect")),"\n",a.createElement(t.p,null,"useEffect 와 useLayoutEffect 의 차이를 정리한 글. 다른 건 다 알고 있는 내용이었지만 ",a.createElement(t.a,{href:"https://kentcdodds.com/blog/useeffect-vs-uselayouteffect#one-special-case"},"One Special Case")," 는 언뜻 들어본 적만 있고 정확히는 몰랐는데, 잘 정리되어있다."),"\n",a.createElement(t.h3,null,a.createElement(t.a,{href:"https://typeofnan.dev/what-the-useevent-react-hook-is-and-isnt/"},"What the useEvent React hook is (and isn't)")),"\n",a.createElement(t.p,null,"새로 추가될 ",a.createElement(t.code,null,"useEvent")," hook 을 설명하는 글. ",a.createElement(t.code,null,"useCallback")," 과 유사하지만 별도의 디펜던시 리스트 없이 항상 같은 레퍼런스이면서 항상 최신 state, props 에 접근할 수 있다는 차이점이 있다."),"\n",a.createElement(t.p,null,"구현 원리를 알고 싶은데 ",a.createElement(t.a,{href:"https://github.com/reactjs/rfcs/pull/220"},"RFC 문서"),"에서도 찾기 어려워서 조금 아쉽다."),"\n",a.createElement(t.h3,null,a.createElement(t.a,{href:"https://www.developerway.com/posts/react-key-attribute"},"React key attribute: best practices for performant lists")),"\n",a.createElement(t.p,null,a.createElement(t.code,null,"key")," 어트리뷰트에 대해 설명한 글. 글 말미에도 나와있지만 요약하면 아래와 같다."),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"랜덤한 값은 절대 ",a.createElement(t.code,null,"key")," 로 쓰지 마라"),"\n",a.createElement(t.li,null,"유니크 아이디를 ",a.createElement(t.code,null,"key")," 로 쓰는 것은 순서 변경이 가능한 목록에서 좋다."),"\n",a.createElement(t.li,null,"배열의 인덱스 값을 ",a.createElement(t.code,null,"key")," 로 쓰는 것은","\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"순서 변경이 가능한 목록에서는 안 좋다"),"\n",a.createElement(t.li,null,"페이지네이션되는 목록에서는 유니크 아이디를 쓰는 것보다 좋다."),"\n",a.createElement(t.li,null,"자동완성 목록 같은 다이나믹 데이터만 처리하는 목록에서도 유니크 아이디를 쓰는 것보다 좋다."),"\n"),"\n"),"\n"),"\n",a.createElement(t.p,null,"이유와 자세한 설명은 해당 글 본문에서 확인하자."),"\n",a.createElement(t.h2,null,"Style / Design"),"\n",a.createElement(t.h3,null,a.createElement(t.a,{href:"https://meyerweb.com/eric/thoughts/2022/04/26/flexibly-centering-an-element-with-side-aligned-content/"},"Flexibly Centering an Element with Side-Aligned Content")),"\n",a.createElement(t.p,null,"엘리먼트 안은 ",a.createElement(t.code,null,"text-align: left;")," 이되, 그 엘리먼트는 부모의 가운데에 위치하도록 하게 하는 스타일 방법을 정리한 내용. 부모 엘리먼트의 스타일도 변경할 수 있다면 flex 스타일로 쉽게 해결되지만, 부모에 스타일을 줄 수 없을 경우에는 어떻게 할 것인지 알려준다."),"\n",a.createElement(t.p,null,"핵심만 말하자면 ",a.createElement(t.code,null,"max-inline-size: max-content;")," 를 사용하면 된다. 자세한 내용은 원글을 참고하자."),"\n",a.createElement(t.h3,null,a.createElement(t.a,{href:"https://javascript.plainenglish.io/design-tokens-in-a-react-component-design-system-the-right-way-f55d392fb540"},"Design Tokens in Your React Design System — The Right Way")),"\n",a.createElement(t.p,null,'"디자인 시스템을 구성할 때 디자인 토큰을 사용하면 composable 한 컴포넌트 및 앱을 구성할 수 있다"는 내용. 여기서 말하는 디자인 토큰이란 backgroundColor, primaryColor 등 디자인 시스템에서 일관되게 사용하는 값들을 말한다.'),"\n",a.createElement(t.p,null,"최근 회사에서 새로 시작한 프로젝트에서 이 디자인 토큰을 적극적으로 활용하고 있는데, 디자인 일관성 유지와 코드 유지보수 측면에서 만족하고 있다."),"\n",a.createElement(t.p,null,"이런 (토큰을 포함한) 디자인 시스템을 구성하고 사용하는 데에는 디자이너 뿐만 아니라 프로그래머, PM 의 협조도 필요하다. 시스템을 구축할 때 소요가 작지는 않지만, 일단 구축하면 들인 소요에 비해 장점이 훨씬 크다."),"\n",a.createElement(t.p,null,"이런 개념에 익숙하지 않은 사람들이라면 읽어볼만한 글이다."))}var r,o=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,l.ah)(),e.components);return t?a.createElement(t,e,a.createElement(c,e)):c(e)},m=n(1880),u=n(1883),s=n(3723),i=n(1858),h=n(3904),E=n(891),p=n(5534),d=n(5777);const f=e=>{let{data:t,children:n}=e;const{title:l,date:c,tags:r,heroImage:o,heroImageAlt:m}=t.mdx.frontmatter,h=o?(0,s.c)(o):null;return a.createElement(i.Z,null,a.createElement("h1",null,l),a.createElement(g,null,r.map((e=>a.createElement("li",{key:e},a.createElement(u.rU,{to:"/tags/"+e},e))))),a.createElement("div",null,c),!!h&&a.createElement(s.G,{image:h,alt:null!=m?m:""}),a.createElement(p.Z,null,n),a.createElement(d.Z,null))},g=E.ZP.ul(r||(r=(0,m.Z)(["\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: ","px;\n\n  margin: 0;\n  padding: 0;\n  list-style: none;\n\n  > li {\n    padding: ","px ","px\n      0px;\n    border-radius: 2px;\n\n    background-color: ",";\n    color: ",";\n\n    > a {\n      text-decoration: none;\n    }\n  }\n"])),(e=>e.theme.dimens.gutter),(e=>e.theme.dimens.thin),(e=>e.theme.dimens.gutter),(e=>e.theme.colors.tag),(e=>e.theme.colors.onTag)),k=e=>{var t,n;let{data:l}=e;const{frontmatter:{title:c,slug:r,tags:o,heroImage:m},excerpt:u}=l.mdx,i=m?(0,s.c)(m):null;return a.createElement(h.Z,{title:c,description:u,path:"posts/"+r,thumbnail:null==i||null===(t=i.images)||void 0===t||null===(n=t.fallback)||void 0===n?void 0:n.src,keywords:o,ogType:"article"})};function y(e){return a.createElement(f,e,a.createElement(o,e))}}}]);
//# sourceMappingURL=component---src-pages-posts-mdx-frontmatter-slug-tsx-content-file-path-users-kangseong-workspace-private-ricalelog-posts-2022-220523-read-writings-index-mdx-4c984c60f877493cb278.js.map