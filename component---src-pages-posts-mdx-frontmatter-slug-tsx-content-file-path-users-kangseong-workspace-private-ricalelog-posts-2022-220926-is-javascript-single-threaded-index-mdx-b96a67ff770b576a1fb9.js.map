{"version":3,"file":"component---src-pages-posts-mdx-frontmatter-slug-tsx-content-file-path-users-kangseong-workspace-private-ricalelog-posts-2022-220926-is-javascript-single-threaded-index-mdx-b96a67ff770b576a1fb9.js","mappings":"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","sources":["webpack://ricalelog/./posts/2022/220926-is-javascript-single-threaded/index.mdx","webpack://ricalelog/./src/pages/posts/{mdx.frontmatter__slug}.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    em: \"em\",\n    ol: \"ol\",\n    li: \"li\",\n    pre: \"pre\",\n    blockquote: \"blockquote\",\n    ul: \"ul\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript\"\n  }, \"자바스크립트는 싱글 스레드다\"), \". 하지만 우리는 \", React.createElement(_components.code, null, \"setTimeout()\"), \", \", React.createElement(_components.code, null, \"Promise\"), \" 등을 통해 멀티 스레드와 유사한 경험을 한다. 이것이 어떻게 가능한 것일까?\"), \"\\n\", React.createElement(_components.h2, null, \"1. 콜스택, 이벤트루프, 메시지큐\"), \"\\n\", React.createElement(_components.p, null, \"궁금증을 해결하기에 앞서 일단 자바스크립트의 가장 기본적인 실행 단위인 함수 실행 방식에 대해 알아보자.\"), \"\\n\", React.createElement(_components.h3, null, \"1.1. 콜스택\"), \"\\n\", React.createElement(_components.p, null, \"콜스택\", React.createElement(_components.em, null, \"CallStack\"), \"은 현재 실행 중인 함수들을 관리하는 스택이다. 간단히 설명하면 아래와 같다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"자바스크립트는 함수가 호출되면 콜스택에 해당 함수를 추가\", React.createElement(_components.em, null, \"push\"), \"한 뒤, 함수의 내용을 실행한다.\"), \"\\n\", React.createElement(_components.li, null, \"해당 함수를 실행하던 중 다른 함수를 호출하면 마찬가지로 그 함수도 스택에 추가\", React.createElement(_components.em, null, \"push\"), \"한다. 자바스크립트는 콜스택의 가장 위에 있는 함수를 실행한다.\"), \"\\n\", React.createElement(_components.li, null, \"함수의 실행이 끝나면 해당 함수를 콜스택으로부터 제거\", React.createElement(_components.em, null, \"pop\"), \"한다. 콜스택에 아직 함수가 남아있다면, 스택의 가장 위에 있는 함수를 계속 실행한다.\"), \"\\n\", React.createElement(_components.li, null, \"콜스택이 빌 때까지 2,3번을 반복한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"function c() {\\n  console.log(\\\"call c\\\");\\n}\\nfunction b() {\\n  console.log(\\\"call b\\\");\\n}\\nfunction a() {\\n  console.log(\\\"call a\\\");\\n  b();\\n  c();\\n}\\na();\\n\")), \"\\n\", React.createElement(_components.p, null, \"위 코드로 예를 들어 설명하면 아래와 같다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"a()\"), \" 가 실행되었다. 콜스택에 \", React.createElement(_components.code, null, \"a()\"), \" 가 추가된다.\\n콜스택: \", React.createElement(_components.code, null, \"[a()]\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"b()\"), \" 가 실행되었다. 콜스캑에 \", React.createElement(_components.code, null, \"b()\"), \" 도 추가된다.\\n콜스택: \", React.createElement(_components.code, null, \"[a(), b()]\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"b()\"), \" 의 실행이 끝난다. 콜스택에서 \", React.createElement(_components.code, null, \"b()\"), \" 를 제거한다.\\n콜스택: \", React.createElement(_components.code, null, \"[a()]\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"c()\"), \" 가 실행되었다. 콜스택에 \", React.createElement(_components.code, null, \"c()\"), \" 도 추가된다.\\n콜스택: \", React.createElement(_components.code, null, \"[a(), c()]\")), \"\\n\", React.createElement(_components.li, null, \"함수 \", React.createElement(_components.code, null, \"c()\"), \" 의 실행이 끝난다. 콜스택에서 \", React.createElement(_components.code, null, \"c()\"), \" 를 제거한다.\\n콜스택: \", React.createElement(_components.code, null, \"[a()]\")), \"\\n\", React.createElement(_components.li, null, \"함수 \", React.createElement(_components.code, null, \"a()\"), \" 의 실행이 끝난다. 콜스택에서 \", React.createElement(_components.code, null, \"a()\"), \" 를 제거한다.\\n콜스택: \", React.createElement(_components.code, null, \"[]\")), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"1.2. 메시지큐, 이벤트루프\"), \"\\n\", React.createElement(_components.p, null, \"코드에 의해 직접 실행된 함수들은 위처럼 실행된다. 하지만 자바스크립트는 코드 상에서 직접 호출하는 함수 이외에도 호출되는 함수들이 있다. 바로 \", React.createElement(_components.code, null, \"setTimeout\"), \" 이나 DOM 이벤트에 의해 실행되는 콜백 함수들이다. 이 콜백 함수들은 해당 이벤트가 발생할 때마다 메시지큐\", React.createElement(_components.em, null, \"MessageQueue\"), \"라는 큐에 추가된다.\"), \"\\n\", React.createElement(_components.p, null, \"한편 자바스크립트에는 이벤트루프\", React.createElement(_components.em, null, \"EventLoop\"), \"라는 것이 존재하는데, 이벤트루프는 콜스택과 메시지큐를 계속 확인한다. 콜스택이 비어있으면서 메시지큐에 함수가 있다면, 해당 함수를 메시지큐로부터 콜스택으로 옮겨넣는다.\"), \"\\n\", React.createElement(_components.h2, null, \"2. 자바스크립트는 싱글스레드라며?\"), \"\\n\", React.createElement(_components.p, null, \"그런데 여기서 의문점이 생긴다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"\\\"자바스크립트는 싱글 스레드라서 한 번에 한 가지 일밖에 처리를 못하는데, 어떻게 1. 콜스택에서 함수가 실행되고 있는 와중에 2. 메시지큐에 콜백 함수를 추가할 수 있는 거지? 이게 가능하려면 메시지큐에 콜백 함수를 추가하는 코드는 별도의 스레드에서 돌고 있어야 하는 거 아닌가? 그럼 자바스크립트는 멀티 스레드여야 하는데?\\\"\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"이 의문은 반은 맞고 반은 틀렸다.\"), \"\\n\", React.createElement(_components.p, null, \"자바스크립트는 싱글 스레드가 맞다. 하지만 \", React.createElement(_components.em, null, \"자바스크립트가 실행되는 런타임 환경은 싱글 스레드가 아니다.\"), \" 멀티 스레드이다. 여기서 말하는 *\\\"자바스크립트가 실행되는 런타임 환경\\\"*은 Node.js, 웹브라우저 등이 있다.\"), \"\\n\", React.createElement(_components.p, null, \"프론트엔드 엔지니어 관점에서 웹브라우저에만 집중하자면, 웹브라우저는 \\\"자바스크립트 실행 컨텍스트\\\"라는 스레드 이외에 브라우저의 스레드가 별도로 존재한다. 해당 스레드에서는 \", React.createElement(_components.a, {\n    href: \"https://developer.mozilla.org/en-US/docs/Web/API\"\n  }, \"Web API\"), \" 가 실행되는데, Web API 의 대표적인 기능은 아래와 같다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"DOM\"), \"\\n\", React.createElement(_components.li, null, \"ajax\"), \"\\n\", React.createElement(_components.li, null, \"setTimeout 등 타이머 처리\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"브라우저 스레드는 Web API 에 의해 발생하는 이벤트의 콜백 함수들을 메시지큐에 밀어넣는다.\"), \"\\n\", React.createElement(_components.p, null, \"(브라우저 환경은 이외에도 웹워커\", React.createElement(_components.em, null, \"WebWorker\"), \"라는 별도의 스레드가 존재하며, 런타임 환경에 따라서 더 많은 스레드가 존재할 수 있다.)\"), \"\\n\", React.createElement(_components.h2, null, \"3. \", React.createElement(_components.a, {\n    href: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\"\n  }, React.createElement(_components.code, null, \"Promise.all()\"))), \"\\n\", React.createElement(_components.p, null, \"좋다. 자바스크립트는 싱글 스레드지만 자바스크립트 런타임 환경은 멀티 스레드라는 것을 알았다. Web API 실행을 위한 스레드가 하나 더 존재하며, 따라서 \", React.createElement(_components.code, null, \"setTimeout\"), \" 이나 DOM 이벤트, Promise 의 콜백들이 문제 없이 실행된다는 것을 알았다.\"), \"\\n\", React.createElement(_components.p, null, \"그렇다면 여기서 한 가지 의문이 든다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"\\\"\", React.createElement(_components.code, null, \"Promise.all()\"), \"은? 이 함수는 여러 Promise 들을 동시에 실행시켜주는 거 아니었어? 그런데 브라우저 스레드가 싱글 스레드면 말이 안 되잖아? 멀티 스레드인 거 아냐?\\\"\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"아래 코드를 보자.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"function func1() {\\n  console.log(\\\"func1 called\\\");\\n  return new Promise((resolve) => {\\n    for (let i = 0; i < 50000; i++) {\\n      if (i % 10000 === 0) {\\n        console.log(\\\"func1\\\", i);\\n      }\\n    }\\n    resolve();\\n    console.log(\\\"func1 end\\\");\\n  });\\n}\\nfunction func2() {\\n  console.log(\\\"func2 called\\\");\\n  return new Promise((resolve) => {\\n    for (let i = 0; i < 50000; i++) {\\n      if (i % 10000 === 0) {\\n        console.log(\\\"func2\\\", i);\\n      }\\n    }\\n    resolve();\\n    console.log(\\\"func2 end\\\");\\n  });\\n}\\nPromise.all([func1(), func2()]);\\n\\n// 실행 결과\\n// func1 called\\n// func1 0\\n// func1 10000\\n// func1 20000\\n// func1 30000\\n// func1 40000\\n// func1 end\\n// func2 called\\n// func2 0\\n// func2 10000\\n// func2 20000\\n// func2 30000\\n// func2 40000\\n// func2 end\\n\")), \"\\n\", React.createElement(_components.p, null, \"멀티 스레드에서 실행되지 않는 것을 알 수 있다. \", React.createElement(_components.code, null, \"Promise.all\"), \" 도 기존 Promise 와 동일한 방법으로 실행된다. 인자로 받은 함수들은 동기적으로 차례로 실행되며, 실행이 완료되었을 때 콜백을 메시지큐에 넣는다.\"), \"\\n\", React.createElement(_components.h2, null, \"4. 결론\"), \"\\n\", React.createElement(_components.p, null, \"따라서 우리가 얻은 결론은 아주 간단하다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"자바스크립트는 싱글 스레드다. 하지만 자바스크립트의 런타임 환경은 멀티 스레드다.\")), \"\\n\", React.createElement(_components.h2, null, \"5. 더 알아봐야 할 것들..\"), \"\\n\", React.createElement(_components.p, null, \"명쾌하게 해결된 궁금증도 있지만 아직도 모호하거나 오히려 새로 생긴 궁금증들이 있다. 잘 기록해두었다가 나중에 다시 조사해보자.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"자바스크립트가 싱글 스레드라면, 그리고 메시지큐가 자바스크립트의 스레드에 포함된 녀석이라면, 어떻게 콜스택이 실행되고 있는 와중에 메시지큐는 메시지(함수)를 받을 수 있는 것일까?\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"(10월 10일 덧붙임): 자바스크립트는 스크립트가 실행되는 단일 스레드로만 이루어진 게 맞다. 이벤트루프와 메시지큐는 이 스레드에 속하지 않은, 별도의 스레드에서 실행되는 녀석들이다 (브라우저, nodejs 등이 지원). 따라서 자바스크립트가 싱글 스레드에서 실행되는 동안, 이벤트루프와 메시지큐는 개별적으로 실행될 수 있다. \", React.createElement(_components.a, {\n    href: \"https://stackoverflow.com/questions/73934092/can-javascript-message-queues-be-blocked\"\n  }, \"참고\")), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.slideshare.net/koreakihoon/javascript-single-thread\"\n  }, \"어떤 글\"), \"에서는 Promise 가 Web API 스레드에서 실행된다고 하고, \", React.createElement(_components.a, {\n    href: \"https://dev.to/moyedx3/9-message-queue-and-event-loop-5092\"\n  }, \"어떤 글\"), \"에서는 자바스크립트 스레드에서 실행된다고 한다. 뭐가 맞는 것인가?\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"자바스크립트 스레드일 가능성이 높아 보인다.\"), \"\\n\", React.createElement(_components.li, null, \"이건 마이크로태스크큐\", React.createElement(_components.em, null, \"MicrotaskQueue\"), \"와 같이 정리하면 될 것 같다.\"), \"\\n\", React.createElement(_components.li, null, \"(10월 10일 덧붙임): Promise 는 자바스크립트 스레드에서 실행되는 게 맞다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"ajax 콜은 여러 콜이 동시에 비동기적으로 실행된다는데, 이게 사실인가? 사실이라면 원리는 무엇인가?\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\\"겉보기에는 비동기적이지만 내부적으로는 동기적으로 실행된다.\\\"가 아니라 \", React.createElement(_components.a, {\n    href: \"https://stackoverflow.com/questions/22844441/is-promise-all-useful-given-that-javascript-is-executed-in-a-single-thread\"\n  }, \"실제로 비동기적으로 실행된다고 하는 글\"), \"이 있는데, 확인이 필요하다.\"), \"\\n\", React.createElement(_components.li, null, \"(10월 10일 덧붙임): ajax 콜은 브라우저에 의해 멀티 스레드에서 실행된다.\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"6. References\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.slideshare.net/koreakihoon/javascript-single-thread\"\n  }, \"javascript 는 single thread 일까?\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://ingg.dev/js-work/\"\n  }, \"[JS] Javascript 동작 원리와 비동기처리\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://intrepidgeeks.com/tutorial/event-loop-web-api-task-queue\"\n  }, \"Event Loop, Web API, Task Queue\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://velog.io/@thms200/Event-Loop-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84\"\n  }, \"Event Loop (이벤트 루프)\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://javascript.plainenglish.io/does-promise-all-execute-in-parallel-how-promise-all-works-in-javascript-fffc2e8d455d\"\n  }, \"Does Promise.all Execute in Parallel? How Promise.all Works in JavaScript\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://developer.mozilla.org/en-US/docs/Glossary/Call_stack\"\n  }, \"MDN Web docs - Call stack\")), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/kangseong/workspace/private/ricalelog/posts/2022/220926-is-javascript-single-threaded/index.mdx\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nvar _templateObject;\nimport * as React from \"react\";\nimport {Link} from \"gatsby\";\nimport {GatsbyImage, getImage} from \"gatsby-plugin-image\";\nimport Layout from \"../../components/Layout\";\nimport Seo from \"../../components/Seo\";\nimport styled from \"../../themes\";\nimport MdxContent from \"../../components/MdxContent\";\nconst PostDetailPage = _ref => {\n  let {data, children} = _ref;\n  const {title, date, tags, heroImage, heroImageAlt} = data.mdx.frontmatter;\n  const image = heroImage ? getImage(heroImage) : null;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, title), React.createElement(Tags, null, tags.map(tag => React.createElement(\"li\", {\n    key: tag\n  }, React.createElement(Link, {\n    to: \"/tags/\" + tag\n  }, tag)))), React.createElement(\"div\", null, date), !!image && React.createElement(GatsbyImage, {\n    image: image,\n    alt: heroImageAlt !== null && heroImageAlt !== void 0 ? heroImageAlt : \"\"\n  }), React.createElement(MdxContent, null, children));\n};\nconst Tags = styled.ul(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  display: flex;\\n  flex-direction: row;\\n  flex-wrap: wrap;\\n  gap: \", \"px;\\n\\n  margin: 0;\\n  padding: 0;\\n  list-style: none;\\n\\n  > li {\\n    padding: \", \"px \", \"px\\n      0px;\\n    border-radius: 2px;\\n\\n    background-color: \", \";\\n    color: \", \";\\n\\n    > a {\\n      text-decoration: none;\\n    }\\n  }\\n\"])), p => p.theme.dimens.gutter, p => p.theme.dimens.thin, p => p.theme.dimens.gutter, p => p.theme.colors.tag, p => p.theme.colors.onTag);\nconst query = \"3533977744\";\nexport const Head = _ref2 => {\n  var _image$images, _image$images$fallbac;\n  let {data} = _ref2;\n  const {frontmatter: {title, slug, tags, heroImage}, excerpt} = data.mdx;\n  const image = heroImage ? getImage(heroImage) : null;\n  return React.createElement(Seo, {\n    title: title,\n    description: excerpt,\n    path: \"posts/\" + slug,\n    thumbnail: image === null || image === void 0 ? void 0 : (_image$images = image.images) === null || _image$images === void 0 ? void 0 : (_image$images$fallbac = _image$images.fallback) === null || _image$images$fallbac === void 0 ? void 0 : _image$images$fallbac.src,\n    keywords: tags,\n    ogType: \"article\"\n  });\n};\nPostDetailPage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostDetailPage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","code","h2","h3","em","ol","li","pre","blockquote","ul","strong","_provideComponents","components","React","href","className","_templateObject","wrapper","MDXLayout","PostDetailPage","_ref","data","children","title","date","tags","heroImage","heroImageAlt","mdx","frontmatter","image","getImage","Layout","Tags","map","tag","key","Link","to","GatsbyImage","alt","MdxContent","styled","_taggedTemplateLiteralLoose","theme","dimens","gutter","thin","colors","onTag","Head","_ref2","_image$images","_image$images$fallbac","slug","excerpt","Seo","description","path","thumbnail","images","fallback","src","keywords","ogType","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}