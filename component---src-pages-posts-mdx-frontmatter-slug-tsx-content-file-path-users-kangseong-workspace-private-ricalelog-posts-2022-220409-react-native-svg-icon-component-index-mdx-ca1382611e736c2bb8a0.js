"use strict";(self.webpackChunkricalelog=self.webpackChunkricalelog||[]).push([[2071],{6900:function(e,n,t){t.r(n),t.d(n,{Head:function(){return v},default:function(){return f}});var l=t(1151),r=t(7294);function a(e){const n=Object.assign({p:"p",h1:"h1",h2:"h2",a:"a",pre:"pre",code:"code",h3:"h3",h4:"h4"},(0,l.ah)(),e.components);return r.createElement(r.Fragment,null,r.createElement(n.p,null,"아이콘 같은 간단한 이미지를 다룰 때는 PNG 형식보다는 SVG 가 더 좋다. 하지만 React Native 에서는 기본적으로 SVG 파일을 지원하지 않는다."),"\n",r.createElement(n.p,null,"그럼 React Native 에서 SVG 파일을 아이콘으로 사용할 수 있도록 설정 및 구현해보자."),"\n",r.createElement(n.h1,null,"1. 환경 구성 및 설정"),"\n",r.createElement(n.h2,null,"1.1. react-native-svg"),"\n",r.createElement(n.p,null,r.createElement(n.a,{href:"https://github.com/react-native-svg/react-native-svg"},"react-native-svg")," 는 React Native 프로젝트에서 SVG 및 관련 엘리먼트들을 웹과 유사한 형식으로 사용할 수 있게 해주는 라이브러리다. 이 라이브러리를 먼저 설치하자."),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-bash"},"$ yarn add react-native-svg\n$ cd ./ios && pod install\n")),"\n",r.createElement(n.p,null,"설치만 하면 된다. 특별한 설정은 필요 없다."),"\n",r.createElement(n.h2,null,"1.2. react-native-svg-transformer"),"\n",r.createElement(n.p,null,"react-native-svg 는 ",r.createElement(n.code,null,"<Svg />"),", ",r.createElement(n.code,null,"<G />"),", ",r.createElement(n.code,null,"<Path />")," 등 거의 모든 SVG 관련 컴포넌트를 제공하지만, SVG 파일 자체를 ",r.createElement(n.code,null,"import")," 할 수 있게 해주지는 않는다. SVG 파일들을 ",r.createElement(n.code,null,"import")," 해서 사용하려면 ",r.createElement(n.a,{href:"https://github.com/kristerkari/react-native-svg-transformer"},"react-native-svg-transformer")," 라이브러리도 필요하다. 이 라이브러리는 react-native-svg 라이브러리를 사용해 SVG 파일을 읽어들여 React 컴포넌트로 사용할 수 있게 해준다."),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-bash"},"$ yarn add --dev react-native-svg-transformer\n")),"\n",r.createElement(n.p,null,"설치 이후 추가적인 설정이 필요하다. (react-native-svg-transformer 의 ",r.createElement(n.a,{href:"https://github.com/kristerkari/react-native-svg-transformer/blob/master/README.md"},"README"),"에도 잘 나와있다.)"),"\n",r.createElement(n.h3,null,"1.2.1. ",r.createElement(n.code,null,"metro.config.js")),"\n",r.createElement(n.p,null,"프로젝트의 루트 디렉토리에 ",r.createElement(n.code,null,"metro.config.js")," 파일이 있다. 기본 설정되어있는 내용과 ",r.createElement(n.a,{href:"https://github.com/kristerkari/react-native-svg-transformer#for-react-native-v059-or-newer"},"라이브러리 README.md 의 ",r.createElement(n.code,null,"metro.config.js"))," 내용을 병합하자. 아래는 병합한 결과물 예시이다."),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-js"},'// metro.config.js\n\nconst { getDefaultConfig } = require("metro-config");\n\nmodule.exports = (async () => {\n  const {\n    resolver: { sourceExts, assetExts },\n  } = await getDefaultConfig();\n  return {\n    transformer: {\n      getTransformOptions: async () => ({\n        transform: {\n          experimentalImportSupport: false,\n          inlineRequires: true,\n        },\n      }),\n      babelTransformerPath: require.resolve("react-native-svg-transformer"),\n    },\n    resolver: {\n      assetExts: assetExts.filter((ext) => ext !== "svg"),\n      sourceExts: [...sourceExts, "svg"],\n    },\n  };\n})();\n')),"\n",r.createElement(n.h3,null,"1.2.2. ",r.createElement(n.code,null,"declaration.d.ts")),"\n",r.createElement(n.p,null,"타입스크립트를 사용한다면 프로젝트 루트 디렉토리에 ",r.createElement(n.code,null,"declaration.d.ts")," 파일을 새로 만들어서 아래 내용을 넣어주어야 한다."),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-ts"},'// declaration.d.ts\n\ndeclare module "*.svg" {\n  import React from "react";\n  import { SvgProps } from "react-native-svg";\n  const content: React.FC<SvgProps>;\n  export default content;\n}\n')),"\n",r.createElement(n.h3,null,"1.2.3. ",r.createElement(n.code,null,".svgrrc")),"\n",r.createElement(n.p,null,"이 파일은 꼭 작성할 필요는 없다. 하지만 작성하면 읽어들인 SVG 컴포넌트의 어트리뷰트를 동적으로 지정할 수 있게 된다. 프로젝트 루트 디렉토리에 ",r.createElement(n.code,null,".svgrrc")," 파일을 만들어 아래 내용을 넣자."),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-json"},'// .svgrrc\n{\n  "replaceAttrValues": {\n    "#000": "{props.fill}"\n  }\n}\n')),"\n",r.createElement(n.p,null,"이렇게 설정하면 읽어들인 svg 파일 내에서 ",r.createElement(n.code,null,'"#000"'),"로 값이 설정된 어트리뷰트는 ",r.createElement(n.code,null,"fill")," prop 의 값으로 치환된다."),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-xml"},'\x3c!-- Logo.svg --\x3e\n<svg width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">\n  <path d="M2.965 6.0925C4.045 8.215 ..." fill="#000"/>\n</svg>\n')),"\n",r.createElement(n.p,null,"위처럼 작성된 ",r.createElement(n.code,null,"Logo.svg")," 파일을 ",r.createElement(n.code,null,"import")," 해서 아래처럼 쓸 수 있다."),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-tsx"},'import Logo from "./Logo.svg";\n\n// ...\nconst SomeComp = () => (\n  // 이렇게 하면 Logo.svg 파일 내의 "#000" 어트리뷰트를 "#FFF" 로 치환되어 적용된다.\n  <Logo width={120} height={40} fill={"#FFF"} />\n);\n')),"\n",r.createElement(n.p,null,"이 기능은 react-native-svg-transformer 가 내부적으로 ",r.createElement(n.a,{href:"https://github.com/gregberge/svgr"},"SVGR"),"이라는 라이브러리를 사용해서 구현했다. 따라서 SVGR 에서 지원하는 다른 설정들도 사용할 수 있다. 좀 더 정보를 얻고 싶다면 ",r.createElement(n.a,{href:"https://react-svgr.com/docs/configuration-files/"},"해당 라이브러리의 문서"),"를 확인하자."),"\n",r.createElement(n.h4,null,"# ",r.createElement(n.code,null,".svgrrc")," 설정을 수정해도 적용되지 않는다?"),"\n",r.createElement(n.p,null,r.createElement(n.code,null,".svgrrc")," 설정을 수정하고 다시 빌드해도 수정한 사항이 적용되지 않을 때가 있다. 그럴 때는 metro 를 끄고 ",r.createElement(n.code,null,"yarn start --reset-cache")," 로 다시 실행시켜주자."),"\n",r.createElement(n.h1,null,"2. 공통 아이콘 컴포넌트 작성"),"\n",r.createElement(n.p,null,"이제 SVG 파일을 웹에서처럼 읽어들여 사용할 수 있다. 하지만 SVG 파일을 일일이 따로따로 ",r.createElement(n.code,null,"import")," 해줘야 하므로 사용하기 번거롭고, 아이콘들의 공통 props 혹은 속성을 관리하기도 힘들다."),"\n",r.createElement(n.p,null,"그러한 불편함을 해결하기 위해 별도의 컴포넌트를 하나 구현할 것이다. 해당 컴포넌트는 아이콘 이름만으로 아이콘을 사용할 수 있게 해줄 것이며 공통적으로 쓰일 props 들도 관리할 것이다."),"\n",r.createElement(n.h3,null,"2.1. SVG 파일들 re-export"),"\n",r.createElement(n.p,null,"일단 컴포넌트를 작성하기 전에, 모든 SVG 파일은 직접 ",r.createElement(n.code,null,"import")," 해서 쓰는 게 아니라 인덱스 파일을 따로 만들어 한 곳에서 관리하도록 하자."),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-ts"},'// src/res/index.ts\nexport { default as Calendar } from "./calendar.svg";\nexport { default as Clock } from "./clock.svg";\nexport { default as Sandwatch } from "./sandwatch.svg";\nexport { default as Watch } from "./watch.svg";\n')),"\n",r.createElement(n.p,null,"이제 다른 파일에서는 아래와 같은 형식으로 import 가 가능하다."),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-tsx"},'import { Calendar } from "../res";\n<Calendar />;\n// 혹은\nimport * as icons from "../res";\nconst Comp = icons["Calendar"];\n<Comp />;\n')),"\n",r.createElement(n.h3,null,"2.2. ",r.createElement(n.code,null,"<SvgIcon />")," 구현"),"\n",r.createElement(n.p,null,"하나의 파일에 묶이게 된 SVG 파일들을 읽어와 사용하는 컴포넌트 ",r.createElement(n.code,null,"<SvgIcon />")," 은 아래처럼 구현할 수 있다."),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-tsx"},'// src/components/SvgIcon.tsx\nimport React from "react";\nimport { SvgProps } from "react-native-svg";\n\nimport * as Icons from "../res";\n\ntype IconProps = SvgProps & {\n  // res 에서 re-export 되는 SVG 파일들의 이름을 name 으로 받을 수 있다.\n  name: keyof typeof Icons;\n  size?: number;\n};\nfunction Icon({\n  name,\n  fill = "black",\n  width: _width,\n  height: _height,\n  size,\n  ...props\n}: IconProps) {\n  const Comp = Icons[name];\n  // `width`, `height` 를 따로 지정할 수 있지만\n  // 아이콘은 보통 가로 세로 값이 같은 정사각형 형식이기 때문에\n  // 여기서는 `size` 를 사용해 너비와 높이를 같이 지정할 수 있게 해주었다.\n  const width = _width ?? size;\n  const height = _height ?? size;\n  const sizeProps = {\n    ...(width !== undefined ? { width } : {}),\n    ...(height !== undefined ? { height } : {}),\n  };\n\n  return (\n    <Comp\n      {...props}\n      // 1.2.3. `.svgrrc` 의 설정 덕분에 `fill` prop 을 이렇게 사용할 수 있다.\n      fill={fill}\n      {...sizeProps}\n    />\n  );\n}\n\nexport default Icon;\n')),"\n",r.createElement(n.h1,null,"3. 결과"),"\n",r.createElement(n.h2,null,"3.1. 사용 예"),"\n",r.createElement(n.p,null,"구현한 컴포넌트 ",r.createElement(n.code,null,"<SvgIcon />"),"을 아래처럼 사용할 수 있다."),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-tsx"},'// ...\nimport SvgIcon from "./components/SvgIcon";\n\nconst App = () => {\n  return (\n    <SafeAreaView style={{ flex: 1, padding: 24 }}>\n      {/* ... */}\n      <SvgIcon name="Calendar" />\n      <SvgIcon name="Clock" fill="orange" />\n      <SvgIcon size={48} name="Watch" fill="gold" />\n      {/* ... */}\n    </SafeAreaView>\n  );\n};\n')),"\n",r.createElement(n.h2,null,"3.2. 소스코드 전문"),"\n",r.createElement(n.p,null,"설정 및 구현이 적용된 실제 소스코드를 참고하고 싶다면 ",r.createElement(n.a,{href:"https://github.com/ricale/RnSvgIconExample"},"RnSvgIconExample")," 리파지토리를 참고하자. 이 문서를 작성하면서 다시 한 번 적용 및 구현해본 리파지토리이며, 실행 또한 잘 된다."))}var c,o=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?r.createElement(n,e,r.createElement(a,e)):a(e)},s=t(1880),m=t(1883),i=t(3723),u=t(1858),g=t(3904),p=t(891),d=t(5534);const E=e=>{let{data:n,children:t}=e;const{title:l,date:a,tags:c,heroImage:o,heroImageAlt:s}=n.mdx.frontmatter,g=o?(0,i.c)(o):null;return r.createElement(u.Z,null,r.createElement("h1",null,l),r.createElement(h,null,c.map((e=>r.createElement("li",{key:e},r.createElement(m.rU,{to:"/tags/"+e},e))))),r.createElement("div",null,a),!!g&&r.createElement(i.G,{image:g,alt:null!=s?s:""}),r.createElement(d.Z,null,t))},h=p.ZP.ul(c||(c=(0,s.Z)(["\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: ","px;\n\n  margin: 0;\n  padding: 0;\n  list-style: none;\n\n  > li {\n    padding: ","px ","px\n      0px;\n    border-radius: 2px;\n\n    background-color: ",";\n    color: ",";\n\n    > a {\n      text-decoration: none;\n    }\n  }\n"])),(e=>e.theme.dimens.gutter),(e=>e.theme.dimens.thin),(e=>e.theme.dimens.gutter),(e=>e.theme.colors.tag),(e=>e.theme.colors.onTag)),v=e=>{var n,t;let{data:l}=e;const{frontmatter:{title:a,slug:c,tags:o,heroImage:s},excerpt:m}=l.mdx,u=s?(0,i.c)(s):null;return r.createElement(g.Z,{title:a,description:m,path:"posts/"+c,thumbnail:null==u||null===(n=u.images)||void 0===n||null===(t=n.fallback)||void 0===t?void 0:t.src,keywords:o,ogType:"article"})};function f(e){return r.createElement(E,e,r.createElement(o,e))}}}]);
//# sourceMappingURL=component---src-pages-posts-mdx-frontmatter-slug-tsx-content-file-path-users-kangseong-workspace-private-ricalelog-posts-2022-220409-react-native-svg-icon-component-index-mdx-ca1382611e736c2bb8a0.js.map