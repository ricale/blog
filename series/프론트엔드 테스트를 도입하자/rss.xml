<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[techblog by ricale]]></title><description><![CDATA[기술 블로그 by ricale]]></description><link>http://github.com/dylang/node-rss</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 29 Jan 2024 11:10:57 GMT</lastBuildDate><author><![CDATA[ricale]]></author><item><title><![CDATA[프론트엔드 테스트 코드를 도입하자 - 1. 어떤 것을 해야 하나]]></title><description><![CDATA[회사에서 한두 달 전에 새로 시작한 프론트엔드 프로젝트에 테스트를 도입하기로 했다. 고백하자면, 테스트를 적용한 경험은 적다. 기껏해야 간단한 유틸 함수들에 대한 유닛 테스트가 전부다. 통합 테스트는 고사하고 뷰 테스트, 컴포넌트 테스트 등도 해 본 적…]]></description><link>https://ricale.kr/blog/posts/220509-frontend-test-code-1</link><guid isPermaLink="false">https://ricale.kr/blog/posts/220509-frontend-test-code-1</guid><dc:creator><![CDATA[ricale]]></dc:creator><pubDate>Sun, 08 May 2022 15:00:00 GMT</pubDate><content:encoded>회사에서 한두 달 전에 새로 시작한 프론트엔드 프로젝트에 테스트를 도입하기로 했다. 고백하자면, 테스트를 적용한 경험은 적다. 기껏해야 간단한 유틸 함수들에 대한 유닛 테스트가 전부다. 통합 테스트는 고사하고 뷰 테스트, 컴포넌트 테스트 등도 해 본 적…</content:encoded></item></channel></rss>