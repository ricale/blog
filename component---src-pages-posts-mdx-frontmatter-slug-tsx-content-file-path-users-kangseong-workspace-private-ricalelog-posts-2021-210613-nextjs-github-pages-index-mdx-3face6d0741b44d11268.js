"use strict";(self.webpackChunkricalelog=self.webpackChunkricalelog||[]).push([[6594],{459:function(e,n,a){a.r(n),a.d(n,{Head:function(){return _},default:function(){return B}});var t=a(1151),s=a(7294);function l(e){const n=Object.assign({p:"p",a:"a",h2:"h2",code:"code",div:"div",h3:"h3",ol:"ol",li:"li",ul:"ul"},(0,t.ah)(),e.components);return s.createElement(s.Fragment,null,s.createElement(n.p,null,"간단한 프로토타이핑 공유를 위해, Next.js로 구현한 웹앱을 GitHub Pages에 배포하기로 했다."),"\n",s.createElement(n.p,null,s.createElement(n.a,{href:"https://taeny.dev/javascript/nextjs-with-deployment-platform/#3-netlify-vs-vercel"},"nextJS 뭘로 배포할까? (Netlify, Vercel, Github page)")," 문서를 보면 GitHub Pages는 물론이고 Netlify, Vercel 을 사용해 배포하는 방법과, 플랫폼간의 장단점까지 비교해 놓았다. 세 플랫폼에 모두 관심이 있다면 해당 글을 읽기를 권한다."),"\n",s.createElement(n.p,null,"이 글에서는 해당 글의 내용을 토대로 GitHub Pages에 배포하는 방법만 간략히 정리한다."),"\n",s.createElement(n.h2,null,"1. 배포 방법"),"\n",s.createElement(n.p,null,s.createElement(n.a,{href:"https://taeny.dev/javascript/nextjs-with-deployment-platform/#5--github-page-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0"},"위 문서"),"에서는 아래의 명령어를 ",s.createElement(n.code,null,"package.json"),"에 등록해놓고 사용하라고 안내하고 있다."),"\n",s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token string-property property">"deploy"</span><span class="token operator">:</span> <span class="token string">"rm -rf node_modules/.cache &amp;&amp; next build &amp;&amp; next export &amp;&amp; touch out/.nojekyll &amp;&amp; git add out/ &amp;&amp; git commit -m \\"Deploy Next.js to gh-pages\\" &amp;&amp; git subtree push --prefix out origin gh-pages"</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></div>'}}),"\n",s.createElement(n.p,null,"명령어를 하나하나 살펴보면 아래와 같다."),"\n",s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> node_modules/.cache\nnext build\nnext <span class="token builtin class-name">export</span>\n<span class="token function">touch</span> out/.nojekyll\n<span class="token function">git</span> <span class="token function">add</span> out/\n<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Deploy Next.js to gh-pages"</span>\n<span class="token function">git</span> subtree push <span class="token parameter variable">--prefix</span> out origin gh-pages</code></pre></div>'}}),"\n",s.createElement(n.p,null,"(각 명령어에 관한 설명은 ",s.createElement(n.a,{href:"https://taeny.dev/javascript/nextjs-with-deployment-platform/#5--github-page-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0"},"원 문서"),"에 잘 되어있으므로 여기서는 생략하겠다.)"),"\n",s.createElement(n.p,null,"대부분의 경우 위 명령어를 그대로 써도 문제가 없겠지만, 개인적으로는 이슈가 몇 개 있었다."),"\n",s.createElement(n.h2,null,"2. 이슈"),"\n",s.createElement(n.h3,null,"2.1. 빌드 결과물을 git 스테이지에 추가"),"\n",s.createElement(n.p,null,"위에서는 ",s.createElement(n.code,null,"git add out/")," 명령어를 통해 빌드한 결과물을 git의 스테이지에 추가한다. 하지만 일반적인 Next.js 프로젝트에서 ",s.createElement(n.code,null,"out/")," 디렉토리는 ",s.createElement(n.code,null,".gitignore"),"에 등록되어있기 때문에, 해당 명령어로는 스테이지에 추가되지 않는다."),"\n",s.createElement(n.p,null,"해결 방법은 해당 디렉토리를 ",s.createElement(n.code,null,".gitignore"),"에서 제외시키거나 ",s.createElement(n.code,null,"-f")," 옵션을 주어서 ",s.createElement(n.code,null,".gitignore"),"와 관계 없이 강제로 추가시키는 것이다."),"\n",s.createElement(n.p,null,"여기서는 ",s.createElement(n.code,null,"-f")," 옵션을 사용한다. 왜냐면 빌드할 때만 ",s.createElement(n.code,null,"out/")," 디렉토리를 스테이지에 포함시키고, 빌드 후에는 삭제할 생각이기 때문이다."),"\n",s.createElement(n.h3,null,"2.2. 커밋 및 푸시"),"\n",s.createElement(n.p,null,"위 문서에서는 아래 명령어를 사용해 빌드 결과를 커밋하고 푸시한다."),"\n",s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Deploy Next.js to gh-pages"</span>\n<span class="token function">git</span> subtree push <span class="token parameter variable">--prefix</span> out origin gh-pages</code></pre></div>'}}),"\n",s.createElement(n.p,null,"이 경우 ",s.createElement(n.code,null,"out/")," 디렉토리의 내용물을 ",s.createElement(n.code,null,"main"),"(혹은 ",s.createElement(n.code,null,"master"),") 브랜치에 계속 유지해야 한다. ",s.createElement(n.code,null,"out/")," 디렉토리 내용을 git 에서 계속 유지할 것이라면 문제 없다. 하지만 내 경우 ",s.createElement(n.code,null,"out/")," 디렉토리의 내용을 ",s.createElement(n.code,null,"main")," 브랜치에 유지하고 싶지 않았다. (유지하지 않는 편이 히스토리 관리에 더 좋다고 생각했다.) 내가 원하는 프로세스는 아래와 같다."),"\n",s.createElement(n.ol,null,"\n",s.createElement(n.li,null,"git 스테이지에 임시로 ",s.createElement(n.code,null,"out/")," 디렉토리를 추가하고 커밋한다."),"\n",s.createElement(n.li,null,"해당 커밋을 가지고 ",s.createElement(n.code,null,"gh-pages")," 브랜치에 배포를 진행한다. (배포하면 ",s.createElement(n.code,null,"gh-pages")," 브랜치에 커밋이 새로 생성될 것이다.)"),"\n",s.createElement(n.li,null,"배포가 끝난 후 1번에서 추가했던 커밋을 삭제한다."),"\n"),"\n",s.createElement(n.p,null,"그럼 원하는 방향이 적용되게끔 명령어를 변경해보자."),"\n",s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell"><span class="token comment"># temp-for-deploy-gh-pages 브랜치를 생성한다.</span>\n<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> temp-for-deploy-gh-pages\n\n<span class="token comment"># 생성한 브랜치에 `out/` 디렉토리가 포함된 내용을 커밋한다.</span>\n<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Deploy Next.js to gh-pages"</span>\n\n<span class="token comment"># 해당 커밋을 사용해 `out/` 디렉토리만으로 로컬의 gh-pages 브랜치에 새로운 커밋을 만든다.</span>\n<span class="token function">git</span> subtree <span class="token function">split</span> <span class="token parameter variable">--prefix</span> out <span class="token parameter variable">-b</span> gh-pages\n\n<span class="token comment"># 로컬의 gh-pages를 강제로 gh-pages 에 푸시한다.</span>\n<span class="token function">git</span> push <span class="token parameter variable">-f</span> origin gh-pages:gh-pages\n\n<span class="token comment"># 로컬의 gh-pages 브랜치를 삭제한다.</span>\n<span class="token function">git</span> branch <span class="token parameter variable">-D</span> gh-pages\n\n<span class="token comment"># temp-for-deploy-gh-pages 브랜치를 삭제한다.</span>\n<span class="token function">git</span> checkout main\n<span class="token function">git</span> branch <span class="token parameter variable">-D</span> temp-for-deploy-gh-pages</code></pre></div>'}}),"\n",s.createElement(n.p,null,s.createElement(n.code,null,"gh-pages"),"를 강제로 푸시하는 이유는 이미 원격에 ",s.createElement(n.code,null,"gh-pages")," 브랜치가 있을 경우, 새로운 커밋이 원격에 있는 기존의 커밋과 이어지지 않는 커밋이기 때문이다. (",s.createElement(n.code,null,"gh-pages"),"에 추가되는 커밋의 부모 커밋이 ",s.createElement(n.code,null,"main")," 브랜치 쪽에 유지되면, 이어지는 커밋으로 판단된다.)"),"\n",s.createElement(n.h2,null,"3. 이슈 해결 결과"),"\n",s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> node_modules/.cache\nnext build\nnext <span class="token builtin class-name">export</span>\n<span class="token function">touch</span> out/.nojekyll\n<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-f</span> out/\n<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> temp-for-deploy-gh-pages\n<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Deploy Next.js to gh-pages"</span>\n<span class="token function">git</span> subtree <span class="token function">split</span> <span class="token parameter variable">--prefix</span> out <span class="token parameter variable">-b</span> gh-pages\n<span class="token function">git</span> push <span class="token parameter variable">-f</span> origin gh-pages:gh-pages\n<span class="token function">git</span> branch <span class="token parameter variable">-D</span> gh-pages\n<span class="token function">git</span> checkout main\n<span class="token function">git</span> branch <span class="token parameter variable">-D</span> temp-for-deploy-gh-pages</code></pre></div>'}}),"\n",s.createElement(n.p,null,"위 명령어들을 연달아 쓰면 Next.js 앱을 GitHub Pages에 배포할 수 있다. 매번 치기 귀찮을 것이므로 ",s.createElement(n.code,null,"package.json"),"에 등록해두고 사용하자."),"\n",s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token string-property property">"deploy-gh-pages"</span><span class="token operator">:</span> <span class="token string">"rm -rf node_modules/.cache &amp;&amp; next build &amp;&amp; next export &amp;&amp; touch out/.nojekyll &amp;&amp; git add -f out/ &amp;&amp; git checkout -b temp-for-deploy-gh-pages &amp;&amp; git commit -m \\"Deploy Next.js to gh-pages\\" &amp;&amp; git subtree split --prefix out -b gh-pages &amp;&amp; git push -f origin gh-pages:gh-pages &amp;&amp; git branch -D gh-pages &amp;&amp; git checkout main &amp;&amp; git branch -D temp-for-deploy-gh-pages"</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></div>'}}),"\n",s.createElement(n.h2,null,"4. 주의"),"\n",s.createElement(n.ul,null,"\n",s.createElement(n.li,null,'위 내용은 어디까지나 "프로토타이핑 공유를 위한 GitHub Pages 배포"를 목적으로 하고 있다. 다른 목적으로 사용할 경우 적절하지 않을 수 있다.'),"\n",s.createElement(n.li,null,"환경변수와 관련된 내용은 이 문서에서 정리하지 않았다. 해당 내용은 ",s.createElement(n.a,{href:"https://taeny.dev/javascript/nextjs-with-deployment-platform/#5--github-page-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0"},"원 문서"),"에 잘 설명되어 있다."),"\n"),"\n",s.createElement(n.h2,null,"References"),"\n",s.createElement(n.ul,null,"\n",s.createElement(n.li,null,s.createElement(n.a,{href:"https://taeny.dev/javascript/nextjs-with-deployment-platform/#3-netlify-vs-vercel"},"nextJS 뭘로 배포할까? (Netlify, Vercel, Github page)")),"\n",s.createElement(n.li,null,s.createElement(n.a,{href:"https://gist.github.com/tduarte/eac064b4778711b116bb827f8c9bef7b"},"tduarte/publish-ghpages.md")),"\n"))}var p,c,r,o,i=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?s.createElement(n,e,s.createElement(l,e)):l(e)},g=a(1880),m=a(1883),u=a(3723),h=a(1858),d=a(3904),k=a(891),E=a(5534),f=a(5777),b=a(7178);const v=e=>{let{data:n,children:a}=e;const{frontmatter:t,sameSeriesPosts:l}=n.mdx,{title:p,slug:c,date:r,tags:o,series:i,heroImage:g,heroImageAlt:d}=t,k=g?(0,u.c)(g):null;return s.createElement(h.Z,null,s.createElement(y,null,s.createElement("h1",null,p),s.createElement(j,null,r),s.createElement(D,null,o.map((e=>s.createElement("li",{key:e},s.createElement(m.rU,{to:"/tags/"+e},e)))))),s.createElement(b.Z,{name:i,data:l,current:c}),!!k&&s.createElement(x,{image:k,alt:null!=d?d:""}),s.createElement(E.Z,null,a),s.createElement(f.Z,null))},y=k.ZP.div(p||(p=(0,g.Z)(["\n  margin: 60px 0 72px;\n  padding: 0 24px;\n\n  & > h1 {\n    font-size: 2.5rem;\n    word-break: keep-all;\n    margin: 0;\n  }\n"]))),x=(0,k.ZP)(u.G)(c||(c=(0,g.Z)(["\n  margin-bottom: 16px;\n"]))),j=k.ZP.div(r||(r=(0,g.Z)(["\n  margin: 16px 0;\n"]))),D=k.ZP.ul(o||(o=(0,g.Z)(["\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: ","px;\n\n  margin: 0;\n  padding: 0;\n  list-style: none;\n\n  > li {\n    padding: ","px\n      ","px;\n    border-radius: 2px;\n\n    background-color: ",";\n    color: ",";\n\n    > a {\n      text-decoration: none;\n    }\n  }\n"])),(e=>e.theme.dimens.gutter),(e=>e.theme.dimens.spacing),(e=>e.theme.dimens.gutter),(e=>e.theme.colors.tag),(e=>e.theme.colors.onTag)),_=e=>{var n,a;let{data:t}=e;const{frontmatter:{title:l,slug:p,tags:c,heroImage:r,previewContent:o},excerpt:i}=t.mdx,g=r?(0,u.c)(r):null;return s.createElement(d.Z,{title:l,description:null!=o?o:i,path:"posts/"+p,thumbnail:null==g||null===(n=g.images)||void 0===n||null===(a=n.fallback)||void 0===a?void 0:a.src,keywords:c,ogType:"article"})};function B(e){return s.createElement(v,e,s.createElement(i,e))}}}]);
//# sourceMappingURL=component---src-pages-posts-mdx-frontmatter-slug-tsx-content-file-path-users-kangseong-workspace-private-ricalelog-posts-2021-210613-nextjs-github-pages-index-mdx-3face6d0741b44d11268.js.map