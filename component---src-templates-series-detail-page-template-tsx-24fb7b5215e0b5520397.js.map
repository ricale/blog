{"version":3,"file":"component---src-templates-series-detail-page-template-tsx-24fb7b5215e0b5520397.js","mappings":"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","sources":["webpack://ricalelog/./src/components/ListPageHeader.tsx","webpack://ricalelog/./src/components/SimplePostList.tsx","webpack://ricalelog/./src/templates/SeriesDetailPageTemplate.tsx"],"sourcesContent":["import * as React from \"react\";\nimport styled from \"../themes\";\n\ntype ListPageHeaderProps = {\n  title: string;\n  subtitle?: string;\n  note?: string | number;\n};\nfunction ListPageHeader({ title, subtitle, note }: ListPageHeaderProps) {\n  return (\n    <Container>\n      {!!subtitle && <Subtitle>{subtitle}</Subtitle>}\n      <TitleRow>\n        <h1>{title}</h1>\n        {!!note && <Note>{`(${note})`}</Note>}\n      </TitleRow>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  margin: 40px 0 45px;\n  padding-left: 40px;\n\n  @media (max-width: 500px) {\n    padding-left: 20px;\n  }\n`;\n\nconst Subtitle = styled.p``;\n\nconst TitleRow = styled.div`\n  display: flex;\n  align-items: flex-end;\n  gap: 8px;\n\n  & > h1 {\n    word-break: keep-all;\n  }\n\n  @media (max-width: 500px) {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n`;\n\nconst Note = styled.p`\n  margin-bottom: 8px;\n  font-size: 0.9375rem;\n`;\n\nexport default ListPageHeader;\n","import * as React from \"react\";\nimport { navigate } from \"gatsby\";\nimport styled from \"../themes\";\nimport { PostFrontmatter } from \"../types\";\n\ntype SimplePostListProps = {\n  data: {\n    node: {\n      frontmatter: Pick<PostFrontmatter, \"title\" | \"slug\" | \"date\"> & {\n        originalDate: string;\n      };\n    };\n  }[];\n  actions?: React.ReactNode;\n};\n\nfunction SimplePostList({ data: source, actions }: SimplePostListProps) {\n  const [orderByAsc, setOrderByAsc] = React.useState(false);\n  const data = [...source].sort(\n    (a, b) =>\n      a.node.frontmatter.originalDate.localeCompare(\n        b.node.frontmatter.originalDate\n      ) * (orderByAsc ? 1 : -1)\n  );\n\n  return (\n    <Container>\n      <Actions>\n        {actions && (\n          <>\n            <div>{actions}</div>\n            <span className=\"divider\">|</span>\n          </>\n        )}\n        <SortingAction>\n          <span>정렬:</span>\n          <a onClick={() => setOrderByAsc((st) => !st)}>\n            {`작성일 ${orderByAsc ? \"오름차순\" : \"내림차순\"}`}\n          </a>\n        </SortingAction>\n      </Actions>\n      <PostList>\n        {data.map(({ node: { frontmatter } }) => (\n          <li\n            key={frontmatter.slug}\n            onClick={() => navigate(`/posts/${frontmatter.slug}`)}\n          >\n            <span className=\"date\">{frontmatter.date}</span>\n            <span className=\"title\">{frontmatter.title}</span>\n          </li>\n        ))}\n      </PostList>\n    </Container>\n  );\n}\n\nconst Container = styled.div``;\n\nconst Actions = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 2px;\n\n  & > div:first-child {\n    display: flex;\n    align-items: center;\n  }\n  & > span.divider {\n    font-size: 0.75rem;\n  }\n`;\nconst SortingAction = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 4px;\n\n  > span {\n    font-size: 0.875rem;\n    color: ${(p) => p.theme.colors.onBackground};\n  }\n  > a {\n    border: 0;\n    text-decoration: underline;\n\n    font-size: 0.875rem;\n    color: ${(p) => p.theme.colors.onBackground};\n    background-color: transparent;\n    cursor: pointer;\n  }\n`;\n\nconst PostList = styled.ol`\n  margin-top: 8px;\n  padding-left: 0px;\n  list-style: none;\n  cursor: pointer;\n\n  li {\n    display: flex;\n    align-items: center;\n\n    padding: 2px;\n    margin-bottom: 4px;\n    :hover {\n      background-color: ${(p) => p.theme.colors.hoverSimplePostSeries};\n    }\n\n    > .date {\n      margin-right: 8px;\n      font-family: monospace;\n      font-size: 0.875rem;\n    }\n    > .title {\n      color: skyblue;\n    }\n  }\n\n  @media (max-width: 500px) {\n    li {\n      flex-direction: column;\n      align-items: flex-start;\n\n      margin-bottom: 12px;\n      > .date {\n        order: 2;\n        font-size: 0.75rem;\n      }\n      > .title {\n        order: 1;\n      }\n    }\n  }\n`;\n\nexport default SimplePostList;\n","import * as React from \"react\";\nimport { graphql, HeadProps, Link, PageProps } from \"gatsby\";\nimport { getImage } from \"gatsby-plugin-image\";\n\nimport Layout from \"../components/Layout\";\nimport ListPageHeader from \"../components/ListPageHeader\";\nimport SimplePostList from \"../components/SimplePostList\";\nimport { PostFrontmatter } from \"../types\";\nimport Seo from \"../components/Seo\";\nimport styled from \"../themes\";\n\ntype SeriesDetailPageTemplateData = {\n  allMdx: {\n    totalCount: number;\n    edges: {\n      node: {\n        frontmatter: Pick<\n          PostFrontmatter,\n          \"title\" | \"slug\" | \"date\" | \"heroImage\"\n        > & {\n          originalDate: string;\n        };\n      };\n    }[];\n  };\n  site: {\n    siteMetadata: {\n      siteUrl: string;\n    };\n  };\n};\ntype SeriesDetailPageTemplateContext = {\n  series: string;\n};\nconst SeriesDetailPageTemplate = ({\n  pageContext,\n  data,\n}: PageProps<\n  SeriesDetailPageTemplateData,\n  SeriesDetailPageTemplateContext\n>) => {\n  const { series } = pageContext;\n  const { totalCount, edges } = data.allMdx;\n  const { siteUrl } = data.site.siteMetadata;\n\n  return (\n    <Layout minContentHeight={500}>\n      <ListPageHeader title={series} subtitle=\"시리즈\" note={totalCount} />\n      <SimplePostList\n        data={edges}\n        actions={\n          <RssLink href={`${siteUrl}/series/${series}/rss.xml`}>RSS</RssLink>\n        }\n      />\n    </Layout>\n  );\n};\n\nconst RssLink = styled.a`\n  margin-bottom: 2px;\n  color: ${(p) => p.theme.colors.onBackground};\n  font-size: 0.875rem;\n  text-decoration: underline;\n`;\n\nexport const pageQuery = graphql`\n  query ($series: String) {\n    allMdx(\n      limit: 2000\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { series: { in: [$series] }, date: { ne: \"\" } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          frontmatter {\n            title\n            slug\n            date(formatString: \"YYYY.MM.DD.\")\n            originalDate: date\n            heroImage {\n              childImageSharp {\n                gatsbyImageData\n              }\n            }\n          }\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n  }\n`;\n\nexport const Head = ({\n  pageContext,\n  data,\n}: HeadProps<\n  SeriesDetailPageTemplateData,\n  SeriesDetailPageTemplateContext\n>) => {\n  const { series } = pageContext;\n  const { totalCount, edges } = data.allMdx;\n  const firstPost = [...edges].sort((a, b) =>\n    b.node.frontmatter.originalDate.localeCompare(\n      a.node.frontmatter.originalDate\n    )\n  )[0];\n  const image = firstPost.node.frontmatter.heroImage\n    ? getImage(firstPost.node.frontmatter.heroImage)\n    : null;\n\n  return (\n    <Seo\n      title={`시리즈 \"${series}\"`}\n      description={`${totalCount}개의 글이 있습니다.`}\n      path={`series/${series}`}\n      thumbnail={image?.images?.fallback?.src}\n    />\n  );\n};\n\nexport default SeriesDetailPageTemplate;\n"],"names":["Container","styled","Subtitle","TitleRow","Note","title","subtitle","note","React","Actions","SortingAction","p","theme","colors","onBackground","PostList","hoverSimplePostSeries","data","source","actions","orderByAsc","setOrderByAsc","_toConsumableArray","sort","a","b","node","frontmatter","originalDate","localeCompare","className","onClick","st","map","_ref2","key","slug","navigate","date","RssLink","Head","pageContext","series","totalCount","edges","allMdx","firstPost","image","heroImage","getImage","Seo","description","path","thumbnail","images","_image$images","fallback","_image$images$fallbac","src","_ref","siteUrl","site","siteMetadata","Layout","minContentHeight","ListPageHeader","SimplePostList","href"],"sourceRoot":""}