"use strict";(self.webpackChunkricalelog=self.webpackChunkricalelog||[]).push([[5574],{9364:function(n,e,a){a.r(e),a.d(e,{Head:function(){return j},default:function(){return W}});var s=a(1151),t=a(7294);function l(n){const e=Object.assign({p:"p",a:"a",code:"code",h2:"h2",h3:"h3",em:"em",ol:"ol",li:"li",div:"div",blockquote:"blockquote",ul:"ul",strong:"strong"},(0,s.ah)(),n.components);return t.createElement(t.Fragment,null,t.createElement(e.p,null,t.createElement(e.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript"},"자바스크립트는 싱글 스레드다"),". 하지만 우리는 ",t.createElement(e.code,null,"setTimeout()"),", ",t.createElement(e.code,null,"Promise")," 등을 통해 멀티 스레드와 유사한 경험을 한다. 이것이 어떻게 가능한 것일까?"),"\n",t.createElement(e.h2,null,"1. 콜스택, 이벤트루프, 메시지큐"),"\n",t.createElement(e.p,null,"궁금증을 해결하기에 앞서 일단 자바스크립트의 가장 기본적인 실행 단위인 함수 실행 방식에 대해 알아보자."),"\n",t.createElement(e.h3,null,"1.1. 콜스택"),"\n",t.createElement(e.p,null,"콜스택",t.createElement(e.em,null,"CallStack"),"은 현재 실행 중인 함수들을 관리하는 스택이다. 간단히 설명하면 아래와 같다."),"\n",t.createElement(e.ol,null,"\n",t.createElement(e.li,null,"자바스크립트는 함수가 호출되면 콜스택에 해당 함수를 추가",t.createElement(e.em,null,"push"),"한 뒤, 함수의 내용을 실행한다."),"\n",t.createElement(e.li,null,"해당 함수를 실행하던 중 다른 함수를 호출하면 마찬가지로 그 함수도 스택에 추가",t.createElement(e.em,null,"push"),"한다. 자바스크립트는 콜스택의 가장 위에 있는 함수를 실행한다."),"\n",t.createElement(e.li,null,"함수의 실행이 끝나면 해당 함수를 콜스택으로부터 제거",t.createElement(e.em,null,"pop"),"한다. 콜스택에 아직 함수가 남아있다면, 스택의 가장 위에 있는 함수를 계속 실행한다."),"\n",t.createElement(e.li,null,"콜스택이 빌 때까지 2,3번을 반복한다."),"\n"),"\n",t.createElement(e.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"call c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"call b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"call a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(e.p,null,"위 코드로 예를 들어 설명하면 아래와 같다."),"\n",t.createElement(e.ol,null,"\n",t.createElement(e.li,null,t.createElement(e.code,null,"a()")," 가 실행되었다. 콜스택에 ",t.createElement(e.code,null,"a()")," 가 추가된다.\n콜스택: ",t.createElement(e.code,null,"[a()]")),"\n",t.createElement(e.li,null,t.createElement(e.code,null,"b()")," 가 실행되었다. 콜스캑에 ",t.createElement(e.code,null,"b()")," 도 추가된다.\n콜스택: ",t.createElement(e.code,null,"[a(), b()]")),"\n",t.createElement(e.li,null,t.createElement(e.code,null,"b()")," 의 실행이 끝난다. 콜스택에서 ",t.createElement(e.code,null,"b()")," 를 제거한다.\n콜스택: ",t.createElement(e.code,null,"[a()]")),"\n",t.createElement(e.li,null,t.createElement(e.code,null,"c()")," 가 실행되었다. 콜스택에 ",t.createElement(e.code,null,"c()")," 도 추가된다.\n콜스택: ",t.createElement(e.code,null,"[a(), c()]")),"\n",t.createElement(e.li,null,"함수 ",t.createElement(e.code,null,"c()")," 의 실행이 끝난다. 콜스택에서 ",t.createElement(e.code,null,"c()")," 를 제거한다.\n콜스택: ",t.createElement(e.code,null,"[a()]")),"\n",t.createElement(e.li,null,"함수 ",t.createElement(e.code,null,"a()")," 의 실행이 끝난다. 콜스택에서 ",t.createElement(e.code,null,"a()")," 를 제거한다.\n콜스택: ",t.createElement(e.code,null,"[]")),"\n"),"\n",t.createElement(e.h3,null,"1.2. 메시지큐, 이벤트루프"),"\n",t.createElement(e.p,null,"코드에 의해 직접 실행된 함수들은 위처럼 실행된다. 하지만 자바스크립트는 코드 상에서 직접 호출하는 함수 이외에도 호출되는 함수들이 있다. 바로 ",t.createElement(e.code,null,"setTimeout")," 이나 DOM 이벤트에 의해 실행되는 콜백 함수들이다. 이 콜백 함수들은 해당 이벤트가 발생할 때마다 메시지큐",t.createElement(e.em,null,"MessageQueue"),"라는 큐에 추가된다."),"\n",t.createElement(e.p,null,"한편 자바스크립트에는 이벤트루프",t.createElement(e.em,null,"EventLoop"),"라는 것이 존재하는데, 이벤트루프는 콜스택과 메시지큐를 계속 확인한다. 콜스택이 비어있으면서 메시지큐에 함수가 있다면, 해당 함수를 메시지큐로부터 콜스택으로 옮겨넣는다."),"\n",t.createElement(e.h2,null,"2. 자바스크립트는 싱글스레드라며?"),"\n",t.createElement(e.p,null,"그런데 여기서 의문점이 생긴다."),"\n",t.createElement(e.blockquote,null,"\n",t.createElement(e.p,null,'"자바스크립트는 싱글 스레드라서 한 번에 한 가지 일밖에 처리를 못하는데, 어떻게 1. 콜스택에서 함수가 실행되고 있는 와중에 2. 메시지큐에 콜백 함수를 추가할 수 있는 거지? 이게 가능하려면 메시지큐에 콜백 함수를 추가하는 코드는 별도의 스레드에서 돌고 있어야 하는 거 아닌가? 그럼 자바스크립트는 멀티 스레드여야 하는데?"'),"\n"),"\n",t.createElement(e.p,null,"이 의문은 반은 맞고 반은 틀렸다."),"\n",t.createElement(e.p,null,"자바스크립트는 싱글 스레드가 맞다. 하지만 ",t.createElement(e.em,null,"자바스크립트가 실행되는 런타임 환경은 싱글 스레드가 아니다."),' 멀티 스레드이다. 여기서 말하는 *"자바스크립트가 실행되는 런타임 환경"*은 Node.js, 웹브라우저 등이 있다.'),"\n",t.createElement(e.p,null,'프론트엔드 엔지니어 관점에서 웹브라우저에만 집중하자면, 웹브라우저는 "자바스크립트 실행 컨텍스트"라는 스레드 이외에 브라우저의 스레드가 별도로 존재한다. 해당 스레드에서는 ',t.createElement(e.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API"},"Web API")," 가 실행되는데, Web API 의 대표적인 기능은 아래와 같다."),"\n",t.createElement(e.ul,null,"\n",t.createElement(e.li,null,"DOM"),"\n",t.createElement(e.li,null,"ajax"),"\n",t.createElement(e.li,null,"setTimeout 등 타이머 처리"),"\n"),"\n",t.createElement(e.p,null,"브라우저 스레드는 Web API 에 의해 발생하는 이벤트의 콜백 함수들을 메시지큐에 밀어넣는다."),"\n",t.createElement(e.p,null,"(브라우저 환경은 이외에도 웹워커",t.createElement(e.em,null,"WebWorker"),"라는 별도의 스레드가 존재하며, 런타임 환경에 따라서 더 많은 스레드가 존재할 수 있다.)"),"\n",t.createElement(e.h2,null,"3. ",t.createElement(e.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all"},t.createElement(e.code,null,"Promise.all()"))),"\n",t.createElement(e.p,null,"좋다. 자바스크립트는 싱글 스레드지만 자바스크립트 런타임 환경은 멀티 스레드라는 것을 알았다. Web API 실행을 위한 스레드가 하나 더 존재하며, 따라서 ",t.createElement(e.code,null,"setTimeout")," 이나 DOM 이벤트, Promise 의 콜백들이 문제 없이 실행된다는 것을 알았다."),"\n",t.createElement(e.p,null,"그렇다면 여기서 한 가지 의문이 든다."),"\n",t.createElement(e.blockquote,null,"\n",t.createElement(e.p,null,'"',t.createElement(e.code,null,"Promise.all()"),'은? 이 함수는 여러 Promise 들을 동시에 실행시켜주는 거 아니었어? 그런데 브라우저 스레드가 싱글 스레드면 말이 안 되잖아? 멀티 스레드인 거 아냐?"'),"\n"),"\n",t.createElement(e.p,null,"아래 코드를 보자."),"\n",t.createElement(e.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"func1 called"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">10000</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"func1"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"func1 end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"func2 called"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">10000</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"func2"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"func2 end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nPromise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 실행 결과</span>\n<span class="token comment">// func1 called</span>\n<span class="token comment">// func1 0</span>\n<span class="token comment">// func1 10000</span>\n<span class="token comment">// func1 20000</span>\n<span class="token comment">// func1 30000</span>\n<span class="token comment">// func1 40000</span>\n<span class="token comment">// func1 end</span>\n<span class="token comment">// func2 called</span>\n<span class="token comment">// func2 0</span>\n<span class="token comment">// func2 10000</span>\n<span class="token comment">// func2 20000</span>\n<span class="token comment">// func2 30000</span>\n<span class="token comment">// func2 40000</span>\n<span class="token comment">// func2 end</span></code></pre></div>'}}),"\n",t.createElement(e.p,null,"멀티 스레드에서 실행되지 않는 것을 알 수 있다. ",t.createElement(e.code,null,"Promise.all")," 도 기존 Promise 와 동일한 방법으로 실행된다. 인자로 받은 함수들은 동기적으로 차례로 실행되며, 실행이 완료되었을 때 콜백을 메시지큐에 넣는다."),"\n",t.createElement(e.h2,null,"4. 결론"),"\n",t.createElement(e.p,null,"따라서 우리가 얻은 결론은 아주 간단하다."),"\n",t.createElement(e.p,null,t.createElement(e.strong,null,"자바스크립트는 싱글 스레드다. 하지만 자바스크립트의 런타임 환경은 멀티 스레드다.")),"\n",t.createElement(e.h2,null,"5. 더 알아봐야 할 것들.."),"\n",t.createElement(e.p,null,"명쾌하게 해결된 궁금증도 있지만 아직도 모호하거나 오히려 새로 생긴 궁금증들이 있다. 잘 기록해두었다가 나중에 다시 조사해보자."),"\n",t.createElement(e.ul,null,"\n",t.createElement(e.li,null,"자바스크립트가 싱글 스레드라면, 그리고 메시지큐가 자바스크립트의 스레드에 포함된 녀석이라면, 어떻게 콜스택이 실행되고 있는 와중에 메시지큐는 메시지(함수)를 받을 수 있는 것일까?","\n",t.createElement(e.ul,null,"\n",t.createElement(e.li,null,"(10월 10일 덧붙임): 자바스크립트는 스크립트가 실행되는 단일 스레드로만 이루어진 게 맞다. 이벤트루프와 메시지큐는 이 스레드에 속하지 않은, 별도의 스레드에서 실행되는 녀석들이다 (브라우저, nodejs 등이 지원). 따라서 자바스크립트가 싱글 스레드에서 실행되는 동안, 이벤트루프와 메시지큐는 개별적으로 실행될 수 있다. ",t.createElement(e.a,{href:"https://stackoverflow.com/questions/73934092/can-javascript-message-queues-be-blocked"},"참고")),"\n"),"\n"),"\n",t.createElement(e.li,null,t.createElement(e.a,{href:"https://www.slideshare.net/koreakihoon/javascript-single-thread"},"어떤 글"),"에서는 Promise 가 Web API 스레드에서 실행된다고 하고, ",t.createElement(e.a,{href:"https://dev.to/moyedx3/9-message-queue-and-event-loop-5092"},"어떤 글"),"에서는 자바스크립트 스레드에서 실행된다고 한다. 뭐가 맞는 것인가?","\n",t.createElement(e.ul,null,"\n",t.createElement(e.li,null,"자바스크립트 스레드일 가능성이 높아 보인다."),"\n",t.createElement(e.li,null,"이건 마이크로태스크큐",t.createElement(e.em,null,"MicrotaskQueue"),"와 같이 정리하면 될 것 같다."),"\n",t.createElement(e.li,null,"(10월 10일 덧붙임): Promise 는 자바스크립트 스레드에서 실행되는 게 맞다."),"\n"),"\n"),"\n",t.createElement(e.li,null,"ajax 콜은 여러 콜이 동시에 비동기적으로 실행된다는데, 이게 사실인가? 사실이라면 원리는 무엇인가?","\n",t.createElement(e.ul,null,"\n",t.createElement(e.li,null,'"겉보기에는 비동기적이지만 내부적으로는 동기적으로 실행된다."가 아니라 ',t.createElement(e.a,{href:"https://stackoverflow.com/questions/22844441/is-promise-all-useful-given-that-javascript-is-executed-in-a-single-thread"},"실제로 비동기적으로 실행된다고 하는 글"),"이 있는데, 확인이 필요하다."),"\n",t.createElement(e.li,null,"(10월 10일 덧붙임): ajax 콜은 브라우저에 의해 멀티 스레드에서 실행된다."),"\n"),"\n"),"\n"),"\n",t.createElement(e.h2,null,"6. References"),"\n",t.createElement(e.ul,null,"\n",t.createElement(e.li,null,t.createElement(e.a,{href:"https://www.slideshare.net/koreakihoon/javascript-single-thread"},"javascript 는 single thread 일까?")),"\n",t.createElement(e.li,null,t.createElement(e.a,{href:"https://ingg.dev/js-work/"},"[JS] Javascript 동작 원리와 비동기처리")),"\n",t.createElement(e.li,null,t.createElement(e.a,{href:"https://intrepidgeeks.com/tutorial/event-loop-web-api-task-queue"},"Event Loop, Web API, Task Queue")),"\n",t.createElement(e.li,null,t.createElement(e.a,{href:"https://velog.io/@thms200/Event-Loop-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84"},"Event Loop (이벤트 루프)")),"\n",t.createElement(e.li,null,t.createElement(e.a,{href:"https://javascript.plainenglish.io/does-promise-all-execute-in-parallel-how-promise-all-works-in-javascript-fffc2e8d455d"},"Does Promise.all Execute in Parallel? How Promise.all Works in JavaScript")),"\n",t.createElement(e.li,null,t.createElement(e.a,{href:"https://developer.mozilla.org/en-US/docs/Glossary/Call_stack"},"MDN Web docs - Call stack")),"\n"))}var c,p,o,u,r=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?t.createElement(e,n,t.createElement(l,n)):l(n)},i=a(1880),m=a(1883),k=a(3723),E=a(1858),d=a(3904),f=a(891),g=a(5534),h=a(5777),v=a(7178);const b=n=>{let{data:e,children:a}=n;const{frontmatter:s,sameSeriesPosts:l}=e.mdx,{title:c,slug:p,date:o,tags:u,series:r,heroImage:i,heroImageAlt:d}=s,f=i?(0,k.c)(i):null;return t.createElement(E.Z,null,t.createElement(w,null,t.createElement("h1",null,c),t.createElement(y,null,o),t.createElement(x,null,u.map((n=>t.createElement("li",{key:n},t.createElement(m.rU,{to:"/tags/"+n},n)))))),t.createElement(v.Z,{name:r,data:l,current:p}),!!f&&t.createElement(P,{image:f,alt:null!=d?d:""}),t.createElement(g.Z,null,a),t.createElement(h.Z,null))},w=f.ZP.div(c||(c=(0,i.Z)(["\n  margin: 60px 0 72px;\n  padding: 0 24px;\n\n  & > h1 {\n    font-size: 2.5rem;\n    word-break: keep-all;\n    margin: 0;\n  }\n"]))),P=(0,f.ZP)(k.G)(p||(p=(0,i.Z)(["\n  margin-bottom: 16px;\n"]))),y=f.ZP.div(o||(o=(0,i.Z)(["\n  margin: 16px 0;\n"]))),x=f.ZP.ul(u||(u=(0,i.Z)(["\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: ","px;\n\n  margin: 0;\n  padding: 0;\n  list-style: none;\n\n  > li {\n    padding: ","px\n      ","px;\n    border-radius: 2px;\n\n    background-color: ",";\n    color: ",";\n\n    > a {\n      text-decoration: none;\n    }\n  }\n"])),(n=>n.theme.dimens.gutter),(n=>n.theme.dimens.spacing),(n=>n.theme.dimens.gutter),(n=>n.theme.colors.tag),(n=>n.theme.colors.onTag)),j=n=>{var e,a;let{data:s}=n;const{frontmatter:{title:l,slug:c,tags:p,heroImage:o,previewContent:u},excerpt:r}=s.mdx,i=o?(0,k.c)(o):null;return t.createElement(d.Z,{title:l,description:null!=u?u:r,path:"posts/"+c,thumbnail:null==i||null===(e=i.images)||void 0===e||null===(a=e.fallback)||void 0===a?void 0:a.src,keywords:p,ogType:"article"})};function W(n){return t.createElement(b,n,t.createElement(r,n))}}}]);
//# sourceMappingURL=component---src-pages-posts-mdx-frontmatter-slug-tsx-content-file-path-users-kangseong-workspace-private-ricalelog-posts-2022-220926-is-javascript-single-threaded-index-mdx-5e4404901f178832e838.js.map