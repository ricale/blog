"use strict";(self.webpackChunkricalelog=self.webpackChunkricalelog||[]).push([[5760],{6105:function(n,a,s){s.r(a),s.d(a,{Head:function(){return T},default:function(){return L}});var t=s(1151),p=s(7294);function e(n){const a=Object.assign({h1:"h1",p:"p",a:"a",ol:"ol",li:"li",ul:"ul",code:"code",h2:"h2",div:"div"},(0,t.ah)(),n.components);return p.createElement(p.Fragment,null,p.createElement(a.h1,null,"0. 발단"),"\n",p.createElement(a.p,null,"쓰던 블로그 서비스가 안드로이드 모바일에서 광고를 삽입하는 것을 발견했다. (광고는 다시 없어졌다. 아마 운영자의 테스트였던 것 같다.) 개인적으로 개인 개발 블로그에 광고가 들어가는 걸 원치 않으므로 서비스를 바꿔야 겠다는 생각이 들었다. 그리고 그러던 와중에 GitHub Pages 에 정적 페이지 생성 프레임워크로 블로그를 운영하는 것도 괜찮겠다 싶었다."),"\n",p.createElement(a.p,null,"Jekyll 과 Gatsby 두 서비스 중 고민하다가 Gatsby 를 선택했다. 자 그러면 천천히 하나씩 적용해보자."),"\n",p.createElement(a.h1,null,"1. 프로젝트 기본 구성"),"\n",p.createElement(a.p,null,p.createElement(a.a,{href:"https://www.gatsbyjs.com/docs/tutorial/"},"공식 튜토리얼 문서"),"가 잘 정리되어 있다. 튜토리얼에서는 아래 일곱가지 내용을 설명한다."),"\n",p.createElement(a.ol,{start:"0"},"\n",p.createElement(a.li,null,p.createElement(a.a,{href:"https://www.gatsbyjs.com/docs/tutorial/part-0/"},"개발 환경 구성하기")),"\n",p.createElement(a.li,null,p.createElement(a.a,{href:"https://www.gatsbyjs.com/docs/tutorial/part-1/"},"로컬에서 프로젝트 생성 및 실행하고, Gatsby 클라우드에 배포하기")),"\n",p.createElement(a.li,null,p.createElement(a.a,{href:"https://www.gatsbyjs.com/docs/tutorial/part-2/"},"React 로 페이지 구현하기")),"\n",p.createElement(a.li,null,p.createElement(a.a,{href:"https://www.gatsbyjs.com/docs/tutorial/part-3/"},"플러그인 적용하기"),"\n",p.createElement(a.ul,null,"\n",p.createElement(a.li,null,"gatsby-plugin-image 플러그인으로 정적 이미지를 사이트에 추가하기"),"\n"),"\n"),"\n",p.createElement(a.li,null,p.createElement(a.a,{href:"https://www.gatsbyjs.com/docs/tutorial/part-4/"},"GraphQL 사용하기"),"\n",p.createElement(a.ul,null,"\n",p.createElement(a.li,null,"사이트의 메타 데이터 다루기"),"\n",p.createElement(a.li,null,"gatsby-source-filesystem 플러그인을 적용해 GraphQL 로 MDX 파일 목록 가져오기"),"\n"),"\n"),"\n",p.createElement(a.li,null,p.createElement(a.a,{href:"https://www.gatsbyjs.com/docs/tutorial/part-5/"},"MDX 사용하기"),"\n",p.createElement(a.ul,null,"\n",p.createElement(a.li,null,"MDX 로 블로그 컨텐츠 작성하기"),"\n",p.createElement(a.li,null,"gatsby-plugin-mdx 플러그인을 적용해 GraphQL 로 MDX 파일 내용 가져오기"),"\n"),"\n"),"\n",p.createElement(a.li,null,p.createElement(a.a,{href:"https://www.gatsbyjs.com/docs/tutorial/part-6/"},"동적으로 페이지 생성하기"),"\n",p.createElement(a.ul,null,"\n",p.createElement(a.li,null,"MDX 의 frontmatter 와 ",p.createElement(a.code,null,"{mdx.frontmatter__slug}.tsx")," 형식의 파일명을 사용해 페이지 동적으로 생성하기"),"\n",p.createElement(a.li,null,"생성된 페이지에 알맞는 MDX 데이터를 GraphQL 로 가져와 사용하기"),"\n"),"\n"),"\n",p.createElement(a.li,null,p.createElement(a.a,{href:"https://www.gatsbyjs.com/docs/tutorial/part-7/"},"데이터에 따라 동적으로 이미지 추가하기"),"\n",p.createElement(a.ul,null,"\n",p.createElement(a.li,null,"gatsby-transformer-sharp 플러그인을 적용해 MDX 의 frontmatter 에 따라 알맞는 이미지를 가져와 사용하기"),"\n"),"\n"),"\n"),"\n",p.createElement(a.p,null,"본문이 훌륭하기 때문에 굳이 여기에 다시 정리하지는 않겠다. 위 과정을 모두 거치면 기본적인 글 작성이 가능한 블로그 사이트가 완성된다."),"\n",p.createElement(a.h1,null,"2. 태그 구현"),"\n",p.createElement(a.p,null,"태그 구현 또한 ",p.createElement(a.a,{href:"https://www.gatsbyjs.com/docs/adding-tags-and-categories-to-blog-posts/"},"공식 문서"),"가 잘 정리되어 있다. 하지만 약간 옛날 버전인 듯 위 튜토리얼 문서와 과 맞지 않는 부분이 있어서 해당 부분을 정정할 겸 정리해보겠다."),"\n",p.createElement(a.h2,null,"2.1. MDX 에 태그 추가"),"\n",p.createElement(a.p,null,"MDX 파일의 frontmatter 영역에 tags 를 추가하자"),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="mdx"><pre class="language-mdx"><code class="language-mdx">---\ntitle: &quot;Create React App 으로 GitHub Pages 적용하기&quot;\ndate: &quot;2021-05-03&quot;\nslug: &quot;210503-create-react-app-github-pages&quot;\ntags: [&quot;React&quot;, &quot;create react app&quot;, &quot;github pages&quot;] # 이렇게 추가하자\n---</code></pre></div>'}}),"\n",p.createElement(a.p,null,p.createElement(a.a,{href:"https://eneaxharja.com/add-tags-to-mdx-blog"},"https://eneaxharja.com/add-tags-to-mdx-blog")),"\n",p.createElement(a.h2,null,"2.2. 태그 페이지 템플릿 추가"),"\n",p.createElement(a.p,null,"태그 페이지에 쓰일 템플릿을 만들어보자."),"\n",p.createElement(a.p,null,"여기서 ",p.createElement(a.code,null,"{mdx.frontmatter__slug}.tsx}")," 형식의 파일을 만들지 않고 템플릿을 만드는 이유는 페이지가 MDX 파일의 정적 데이터(frontmatter 의 slug 필드)에 의해 만들어지는 것이 아니라, 동적인 데이터 (frontmatter 의 tags 정보를 수집) 에 의해 만들어져야 하기 때문이다."),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">// src/templates/TagDetailPageTemplate.tsx</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> graphql<span class="token punctuation">,</span> Link<span class="token punctuation">,</span> PageProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"gatsby"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">"../components/Layout"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">TagDetailPageTemplateData</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  allMdx<span class="token operator">:</span> <span class="token punctuation">{</span>\n    totalCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    edges<span class="token operator">:</span> <span class="token punctuation">{</span>\n      node<span class="token operator">:</span> <span class="token punctuation">{</span>\n        frontmatter<span class="token operator">:</span> <span class="token punctuation">{</span>\n          slug<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n          title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">TagDetailPageTemplateContext</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  tag<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">TagDetailPageTemplate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  pageContext<span class="token punctuation">,</span>\n  data<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token operator">:</span> PageProps<span class="token operator">&lt;</span>TagDetailPageTemplateData<span class="token punctuation">,</span> TagDetailPageTemplateContext<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> tag <span class="token punctuation">}</span> <span class="token operator">=</span> pageContext<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> totalCount<span class="token punctuation">,</span> edges <span class="token punctuation">}</span> <span class="token operator">=</span> data<span class="token punctuation">.</span>allMdx<span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Layout</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">태그 "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">글 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>totalCount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">개</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token punctuation">{</span>edges<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> node<span class="token operator">:</span> <span class="token punctuation">{</span> frontmatter <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>frontmatter<span class="token punctuation">.</span>slug<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>frontmatter<span class="token punctuation">.</span>slug<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>frontmatter<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Layout</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> pageQuery <span class="token operator">=</span> graphql<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  query ($tag: String) {\n    allMdx(\n      limit: 2000\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          frontmatter {\n            slug\n            title\n          }\n        }\n      }\n    }\n  }\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> TagDetailPageTemplate<span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.h2,null,"2.3. ",p.createElement(a.code,null,"gatsby-node.ts")," 작성"),"\n",p.createElement(a.p,null,"위에서 만든 템플릿으로 페이지를 만들기 위해서는 ",p.createElement(a.code,null,"gatsby-node.ts")," 를 작성해야 한다. 이미 해당 파일을 만들었다면 ",p.createElement(a.code,null,"createPage()")," 함수 안에 아래 내용을 적당히 끼워넣으면 된다."),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// gatsby-node.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> GatsbyNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"gatsby"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">"path"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">TagGroupsQueryData</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  tagsGroup<span class="token operator">:</span> <span class="token punctuation">{</span>\n    group<span class="token operator">:</span> <span class="token punctuation">{</span>\n      fieldValue<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> createPages<span class="token operator">:</span> GatsbyNode<span class="token punctuation">[</span><span class="token string">"createPages"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  actions<span class="token punctuation">,</span>\n  graphql<span class="token punctuation">,</span>\n  reporter<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token generic-function"><span class="token function">graphql</span><span class="token generic class-name"><span class="token operator">&lt;</span>TagGroupsQueryData<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    {\n      tagsGroup: allMdx(limit: 2000) {\n        group(field: { frontmatter: { tags: SELECT } }) {\n          fieldValue\n        }\n      }\n    }\n  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>errors <span class="token operator">||</span> <span class="token operator">!</span>result<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    reporter<span class="token punctuation">.</span><span class="token function">panicOnBuild</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Error while running GraphQL query.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> tagsTemplatePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>\n    <span class="token string">"src/templates/TagDetailPageTemplate.tsx"</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>tagsGroup<span class="token punctuation">.</span>group<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    actions<span class="token punctuation">.</span><span class="token function">createPage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      path<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/tags/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tag<span class="token punctuation">.</span>fieldValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      component<span class="token operator">:</span> tagsTemplatePath<span class="token punctuation">,</span>\n      context<span class="token operator">:</span> <span class="token punctuation">{</span> tag<span class="token operator">:</span> tag<span class="token punctuation">.</span>fieldValue <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.h2,null,"2.4. 태그 목록 페이지 추가"),"\n",p.createElement(a.p,null,"태그 목록 페이지를 추가하자."),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">// src/pages/tags/index.tsx</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> graphql<span class="token punctuation">,</span> Link<span class="token punctuation">,</span> PageProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"gatsby"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">"../../components/Layout"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Seo <span class="token keyword">from</span> <span class="token string">"../../components/Seo"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">TagsPageData</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  allMdx<span class="token operator">:</span> <span class="token punctuation">{</span>\n    group<span class="token operator">:</span> <span class="token punctuation">{</span>\n      totalCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n      fieldValue<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">TagsPage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token operator">:</span> PageProps<span class="token operator">&lt;</span>TagsPageData<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> tags <span class="token operator">=</span> data<span class="token punctuation">.</span>allMdx<span class="token punctuation">.</span>group<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> b<span class="token punctuation">.</span>totalCount <span class="token operator">-</span> a<span class="token punctuation">.</span>totalCount<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Layout</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">tags</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token punctuation">{</span>tags<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>tag<span class="token punctuation">.</span>fieldValue<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/tags/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tag<span class="token punctuation">.</span>fieldValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tag<span class="token punctuation">.</span>fieldValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token string">" "</span><span class="token punctuation">}</span><span class="token plain-text">\n            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tag<span class="token punctuation">.</span>totalCount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span><span class="token plain-text">\n          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Layout</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> query <span class="token operator">=</span> graphql<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  query {\n    allMdx(limit: 2000) {\n      group(field: { frontmatter: { tags: SELECT } }) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Head</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Seo</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>태그 목록<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> TagsPage<span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,p.createElement(a.code,null,"graphql")," 쿼리에서 바로 totalCount 로 정렬하고 싶었지만 (GraphQL 을 잘 몰라서) 방법을 찾지 못했다. 대신 ",p.createElement(a.code,null,"TagsPage")," 컴포넌트 첫번째 줄에서 ",p.createElement(a.code,null,".sort()")," 를 사용해 정렬하고 있다."),"\n",p.createElement(a.h1,null,"3. 다음"),"\n",p.createElement(a.p,null,"다음 글에서는 글 내용 안에 이미지를 삽입하는 방법을 정리한다."))}var o,c,l,u,i=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.ah)(),n.components);return a?p.createElement(a,n,p.createElement(e,n)):e(n)},k=s(1880),r=s(1883),g=s(3723),m=s(1858),d=s(3904),y=s(891),h=s(5534),w=s(5777),E=s(7178);const f=n=>{let{data:a,children:s}=n;const{frontmatter:t,sameSeriesPosts:e}=a.mdx,{title:o,slug:c,date:l,tags:u,series:i,heroImage:k,heroImageAlt:d}=t,y=k?(0,g.c)(k):null;return p.createElement(m.Z,null,p.createElement(x,null,p.createElement("h1",null,o),p.createElement(P,null,l),p.createElement(v,null,u.map((n=>p.createElement("li",{key:n},p.createElement(r.rU,{to:"/tags/"+n},n)))))),p.createElement(E.Z,{name:i,data:e,current:c}),!!y&&p.createElement(b,{image:y,alt:null!=d?d:""}),p.createElement(h.Z,null,s),p.createElement(w.Z,null))},x=y.ZP.div(o||(o=(0,k.Z)(["\n  margin: 60px 0 72px;\n  padding: 0 24px;\n\n  & > h1 {\n    font-size: 2.5rem;\n    word-break: keep-all;\n    margin: 0;\n  }\n"]))),b=(0,y.ZP)(g.G)(c||(c=(0,k.Z)(["\n  margin-bottom: 16px;\n"]))),P=y.ZP.div(l||(l=(0,k.Z)(["\n  margin: 16px 0;\n"]))),v=y.ZP.ul(u||(u=(0,k.Z)(["\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: ","px;\n\n  margin: 0;\n  padding: 0;\n  list-style: none;\n\n  > li {\n    padding: ","px\n      ","px;\n    border-radius: 2px;\n\n    background-color: ",";\n    color: ",";\n\n    > a {\n      text-decoration: none;\n    }\n  }\n"])),(n=>n.theme.dimens.gutter),(n=>n.theme.dimens.spacing),(n=>n.theme.dimens.gutter),(n=>n.theme.colors.tag),(n=>n.theme.colors.onTag)),T=n=>{var a,s;let{data:t}=n;const{frontmatter:{title:e,slug:o,tags:c,heroImage:l,previewContent:u},excerpt:i}=t.mdx,k=l?(0,g.c)(l):null;return p.createElement(d.Z,{title:e,description:null!=u?u:i,path:"posts/"+o,thumbnail:null==k||null===(a=k.images)||void 0===a||null===(s=a.fallback)||void 0===s?void 0:s.src,keywords:c,ogType:"article"})};function L(n){return p.createElement(f,n,p.createElement(i,n))}}}]);
//# sourceMappingURL=component---src-pages-posts-mdx-frontmatter-slug-tsx-content-file-path-users-kangseong-workspace-private-ricalelog-posts-2023-230111-gatsby-1-index-mdx-0b421ebe94e3caaa967d.js.map