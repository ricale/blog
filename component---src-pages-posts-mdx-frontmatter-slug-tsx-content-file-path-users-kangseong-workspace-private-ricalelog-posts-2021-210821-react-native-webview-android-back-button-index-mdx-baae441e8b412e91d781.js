"use strict";(self.webpackChunkricalelog=self.webpackChunkricalelog||[]).push([[4316],{4807:function(n,a,s){s.r(a),s.d(a,{Head:function(){return N},default:function(){return H}});var t=s(1151),e=s(7294);function p(n){const a=Object.assign({div:"div",p:"p",h2:"h2",a:"a",code:"code",button:"button",h3:"h3",h4:"h4",ul:"ul",li:"li"},(0,t.ah)(),n.components);return e.createElement(e.Fragment,null,e.createElement(a.div,{className:"md"},e.createElement(a.p,null,"React Native 를 웹뷰 컨테이너로 사용해 웹앱을 구현하고 있다."),e.createElement(a.p,null,"웹뷰를 사용한 하이브리드앱 구현 시 주의해야 할 점 중 하나는 안드로이드 기기의 백버튼(뒤로가기 버튼)에 대한 처리다. 사람들은 이전 웹페이지로 돌아가길 기대하며 백버튼을 누르지만, React Native 는 웹뷰 내에서의 이전 페이지로 이동하는 것이 아니라 React Native 상의 이전 화면으로 돌아가기 때문이다."),e.createElement(a.p,null,"만약 웹뷰 화면이 해당 앱의 첫 화면이라면, 백버튼을 눌렀을 때 이전 웹페이지로 가는 것이 아니라 앱이 종료되는 것을 경험할 수 있다. 당연하게도 그것은 개발자가 의도한 사항도, 사용자가 의도한 사항도 아니다."),e.createElement(a.p,null,"그러면 웹뷰가 있는 화면에서 백버튼을 눌렀을 때 React Native 의 이전 화면이 아닌 웹뷰의 이전 웹페이지가로 가도록 코드를 수정해보자."),e.createElement(a.h2,{id:"1-onnavigationstatechange",style:{position:"relative"}},e.createElement(a.a,{href:"#1-onnavigationstatechange","aria-label":"1 onnavigationstatechange permalink",className:"anchor before"},e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"1. ",e.createElement(a.code,null,"onNavigationStateChange")),e.createElement(a.p,null,"React Native WebView 를 사용하고 있다면 ",e.createElement(a.a,{href:"https://github.com/react-native-webview/react-native-webview/blob/master/docs/Reference.md#onnavigationstatechange"},e.createElement(a.code,null,"onNavigationStateChange")," 콜백"),"과 ",e.createElement(a.a,{href:"https://reactnative.dev/docs/backhandler"},e.createElement(a.code,null,"BackHandler")," API"),"를 사용해 이전 웹페이지로 이동하도록 백버튼의 기능을 조정할 수 있다."),e.createElement(a.div,{className:"codeblock-container"},e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">HomeScreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> ref <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>navState<span class="token punctuation">,</span> setNavState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">onPress</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>navState<span class="token punctuation">.</span>canGoBack<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 뒤로 갈 수 있는 상태라면 이전 웹페이지로 이동한다</span>\n        ref<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">goBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 기본 뒤로가기 동작을 수행하지 않을 거라면 true 를 리턴한다.</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 뒤로 갈 수 없는 상태라면</span>\n        <span class="token comment">// 다른 원하는 행동을 하면 된다</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"do something"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 기본 뒤로가기 동작을 수행하지 않을 거라면 true 가 아닌 값을 리턴한다.</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 안드로이드 백버튼이 눌렸을 때 이벤트 리스너를 등록한다.</span>\n    BackHandler<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"hardwareBackPress"</span><span class="token punctuation">,</span> onPress<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      BackHandler<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"hardwareBackPress"</span><span class="token punctuation">,</span> onPress<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>navState<span class="token punctuation">.</span>canGoBack<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>WebView\n      <span class="token comment">// ...</span>\n      ref<span class="token operator">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span>\n      <span class="token comment">// 웹뷰의</span>\n      onNavigationStateChange<span class="token operator">=</span><span class="token punctuation">{</span>setNavState<span class="token punctuation">}</span>\n    <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),e.createElement(a.button,{className:"codeblock-copy-button"},"COPY")),e.createElement(a.p,null,e.createElement(a.code,null,"onNavigationStateChange")," 콜백의 첫 번째 인자(",e.createElement(a.code,null,"navState"),")는 웹뷰의 현재 상태가 담긴 객체인데, 해당 객체의 ",e.createElement(a.code,null,"canGoBack")," 값은 현재 웹뷰에서 뒤로가기가 가능한 상태인지를 알려준다 (예를 들어 첫페이지에서는 뒤로 갈 수 없을 것이다. 그런 경우에는 ",e.createElement(a.code,null,"false")," 값을 가진다)."),e.createElement(a.p,null,"뒤로 갈 수 있다면 ",e.createElement(a.code,null,"ref.current.goBack()"),"메서드를 사용해 이전 페이지로 돌아가고, 그렇지 않다면 필요한 다른 작업을 하면 되겠다."),e.createElement(a.h2,{id:"2-html5-history-api-대응",style:{position:"relative"}},e.createElement(a.a,{href:"#2-html5-history-api-%EB%8C%80%EC%9D%91","aria-label":"2 html5 history api 대응 permalink",className:"anchor before"},e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"2. HTML5 History API 대응"),e.createElement(a.p,null,"하지만 ",e.createElement(a.code,null,"onNavigationStateChange")," 콜백에 문제가 있으니, 바로 ",e.createElement(a.code,null,"pushState()"),", ",e.createElement(a.code,null,"replaceState()")," 등 ",e.createElement(a.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/History_API"},"HTML5 History API"),"로 추가된 기능으로 페이지 이동을 하면 동작하지 않는다는 것이다. 이는 ",e.createElement(a.code,null,"canGoBack")," 값이 최신화되지 않는다는 뜻이고, 위에서 작성한 코드가 정상적으로 동작할 수 없다는 뜻이다."),e.createElement(a.p,null,"물론 여기서 주저앉을 수는 없다. 이제 우리는 ",e.createElement(a.a,{href:"https://github.com/react-native-webview/react-native-webview/blob/master/docs/Reference.md#onmessage"},e.createElement(a.code,null,"onMessage")," 콜백"),"과 ",e.createElement(a.a,{href:"https://github.com/react-native-webview/react-native-webview/blob/master/docs/Reference.md#injectjavascriptstr"},e.createElement(a.code,null,"webview.injectJavaScript()")," 메서드"),"를 통해 ",e.createElement(a.code,null,"pushState()"),", ",e.createElement(a.code,null,"replaceState()")," 동작 시 웹뷰의 상태를 받아오도록 할 것이다."),e.createElement(a.h3,{id:"21-webviewinjectjavascript",style:{position:"relative"}},e.createElement(a.a,{href:"#21-webviewinjectjavascript","aria-label":"21 webviewinjectjavascript permalink",className:"anchor before"},e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"2.1. ",e.createElement(a.code,null,"webview.injectJavaScript()")),e.createElement(a.p,null,e.createElement(a.code,null,"webview.injectJavaScript()")," 메서드는 웹뷰에 자바스크립트 코드를 삽입할 수 있도록 해주는 메서드이다. 해당 메서드를 통해 ",e.createElement(a.code,null,"pushState()"),"와 ",e.createElement(a.code,null,"replaceState()")," 메서드를 래핑해줄 것이다."),e.createElement(a.div,{className:"codeblock-container"},e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token constant">INJECTED_CODE</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n(function() {\n  function wrap(fn) {\n    return function wrapper() {\n      var res = fn.apply(this, arguments);\n      window.ReactNativeWebView.postMessage(\'navigationStateChange\');\n      return res;\n    }\n  }\n\n  history.pushState = wrap(history.pushState);\n  history.replaceState = wrap(history.replaceState);\n  window.addEventListener(\'popstate\', function() {\n    window.ReactNativeWebView.postMessage(\'navigationStateChange\');\n  });\n})();\n\ntrue;\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">HomeScreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>WebView\n      <span class="token comment">// ...</span>\n      ref<span class="token operator">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span>\n      onLoadStart<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ref<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">injectJavaScript</span><span class="token punctuation">(</span><span class="token constant">INJECTED_CODE</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n      onNavigationStateChange<span class="token operator">=</span><span class="token punctuation">{</span>setNavState<span class="token punctuation">}</span>\n    <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),e.createElement(a.button,{className:"codeblock-copy-button"},"COPY")),e.createElement(a.h4,{id:"211-injectedjavascript-props-는-안-되나",style:{position:"relative"}},e.createElement(a.a,{href:"#211-injectedjavascript-props-%EB%8A%94-%EC%95%88-%EB%90%98%EB%82%98","aria-label":"211 injectedjavascript props 는 안 되나 permalink",className:"anchor before"},e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"2.1.1. ",e.createElement(a.code,null,"injectedJavaScript")," props 는 안 되나?"),e.createElement(a.p,null,"React Native WebView 에는 ",e.createElement(a.code,null,"webview.injectJavaScript()"),"메서드와 비슷한 기능을 하는 ",e.createElement(a.a,{href:"https://github.com/react-native-webview/react-native-webview/blob/master/docs/Reference.md#injectedjavascript"},e.createElement(a.code,null,"injectedJavaScript")," prop"),"도 존재한다. 하지만 결정적인 차이점이 존재하는데, ",e.createElement(a.code,null,"webview.injectJavaScript()"),"는 우리가 원하는 때에만 골라서 코드를 삽입할 수 있지만, ",e.createElement(a.code,null,"injectedJavaScript"),"는 ",e.createElement(a.code,null,"onLoad")," 이벤트가 발생할 때마다 코드를 삽입된다는 것이다."),e.createElement(a.p,null,e.createElement(a.code,null,"onLoadStart")," 이벤트는 실제 페이지 이동이 일어날 때만 발생하는데 반해 ",e.createElement(a.code,null,"onLoad")," 이벤트는 History API 등으로 로딩이 발생할 때도 발생한다. 때문에 같은 코드가 중복적으로 삽입될 수 있고, 우리는 그러한 현상을 피하기 위해 ",e.createElement(a.code,null,"onLoadStart"),"와 ",e.createElement(a.code,null,"injectJavaScript()")," 메서드를 조합해서 코드를 삽입한다."),e.createElement(a.p,null,"(단, ",e.createElement(a.code,null,"injectedJavaScriptBeforeContentLoaded")," prop 을 사용하면 위 코드와 거의 동일한 효과를 낼 수 있다.)"),e.createElement(a.h4,{id:"212-삽입된-코드는-어떤-코드",style:{position:"relative"}},e.createElement(a.a,{href:"#212-%EC%82%BD%EC%9E%85%EB%90%9C-%EC%BD%94%EB%93%9C%EB%8A%94-%EC%96%B4%EB%96%A4-%EC%BD%94%EB%93%9C","aria-label":"212 삽입된 코드는 어떤 코드 permalink",className:"anchor before"},e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"2.1.2. 삽입된 코드는 어떤 코드?"),e.createElement(a.p,null,"위 코드에는 삽입된 코드가 통문자열로 되어있기 때문에 알아보기 힘들다. 하이라이트된 코드로 다시 살펴보자."),e.createElement(a.div,{className:"codeblock-container"},e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token function">wrap</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      window<span class="token punctuation">.</span>ReactNativeWebView<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"navigationStateChange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  history<span class="token punctuation">.</span>pushState <span class="token operator">=</span> <span class="token function">wrap</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span>pushState<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  history<span class="token punctuation">.</span>replaceState <span class="token operator">=</span> <span class="token function">wrap</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span>replaceState<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"popstate"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span>ReactNativeWebView<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"navigationStateChange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token boolean">true</span><span class="token punctuation">;</span></code></pre></div>'}}),e.createElement(a.button,{className:"codeblock-copy-button"},"COPY")),e.createElement(a.p,null,e.createElement(a.code,null,"pushState()"),"와 ",e.createElement(a.code,null,"replaceState()"),"를 래핑하고 ",e.createElement(a.code,null,"popState")," 이벤트에 리스너를 붙이는 코드라는 것을 알 수 있다. 모든 코드들은 공통적으로 ",e.createElement(a.a,{href:"https://github.com/react-native-webview/react-native-webview/blob/master/docs/Reference.md#postmessagestr"},e.createElement(a.code,null,"ReactNativeWebView.postMessage()")," 메서드"),"를 호출하는 것을 볼 수 있다. 이 메서드가 호출될 때마다 웹뷰는 웹페이지의 상태를 ",e.createElement(a.code,null,"onMessage")," 콜백으로 받아볼 수 있다."),e.createElement(a.h3,{id:"22-onmessage",style:{position:"relative"}},e.createElement(a.a,{href:"#22-onmessage","aria-label":"22 onmessage permalink",className:"anchor before"},e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"2.2. ",e.createElement(a.code,null,"onMessage")),e.createElement(a.p,null,"그럼 ",e.createElement(a.code,null,"onMessage")," 콜백도 넣어보자."),e.createElement(a.div,{className:"codeblock-container"},e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">HomeScreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>WebView\n      <span class="token comment">// ...</span>\n      ref<span class="token operator">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span>\n      onLoadStart<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ref<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">injectJavaScript</span><span class="token punctuation">(</span><span class="token constant">INJECTED_CODE</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n      onNavigationStateChange<span class="token operator">=</span><span class="token punctuation">{</span>setNavState<span class="token punctuation">}</span>\n      onMessage<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> nativeEvent <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>nativeEvent<span class="token punctuation">.</span>data <span class="token operator">===</span> <span class="token string">"navigationStateChange"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">setNavState</span><span class="token punctuation">(</span>nativeEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">}</span>\n    <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),e.createElement(a.button,{className:"codeblock-copy-button"},"COPY")),e.createElement(a.p,null,"됐다. 이제 ",e.createElement(a.code,null,"pushState()"),", ",e.createElement(a.code,null,"replaceState()"),"도 놓치지 않게 되었다."),e.createElement(a.h2,{id:"3-전체-코드",style:{position:"relative"}},e.createElement(a.a,{href:"#3-%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C","aria-label":"3 전체 코드 permalink",className:"anchor before"},e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"3. 전체 코드"),e.createElement(a.p,null,"(아래 코드는 이해를 돕기 위한 의사코드로, 실제로는 동작하지 않을 수도 있다)"),e.createElement(a.div,{className:"codeblock-container"},e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token constant">INJECTED_CODE</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n(function() {\n  function wrap(fn) {\n    return function wrapper() {\n      var res = fn.apply(this, arguments);\n      window.ReactNativeWebView.postMessage(\'navigationStateChange\');\n      return res;\n    }\n  }\n\n  history.pushState = wrap(history.pushState);\n  history.replaceState = wrap(history.replaceState);\n  window.addEventListener(\'popstate\', function() {\n    window.ReactNativeWebView.postMessage(\'navigationStateChange\');\n  });\n})();\n\ntrue;\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">HomeScreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> ref <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>navState<span class="token punctuation">,</span> setNavState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">onPress</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>navState<span class="token punctuation">.</span>canGoBack<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 뒤로 갈 수 있는 상태라면 이전 웹페이지로 이동한다</span>\n        ref<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">goBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 뒤로 갈 수 없는 상태라면</span>\n        <span class="token comment">// 다른 원하는 행동을 하면 된다</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 안드로이드 백버튼이 눌렸을 때 이벤트 리스너를 등록한다.</span>\n    BackHandler<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"hardwareBackPress"</span><span class="token punctuation">,</span> onPress<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      BackHandler<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"hardwareBackPress"</span><span class="token punctuation">,</span> onPress<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>navState<span class="token punctuation">.</span>canGoBack<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>WebView\n      <span class="token comment">// ...</span>\n      ref<span class="token operator">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span>\n      onLoadStart<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ref<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">injectJavaScript</span><span class="token punctuation">(</span><span class="token constant">INJECTED_CODE</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n      onNavigationStateChange<span class="token operator">=</span><span class="token punctuation">{</span>setNavState<span class="token punctuation">}</span>\n      onMessage<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> nativeEvent <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>nativeEvent<span class="token punctuation">.</span>data <span class="token operator">===</span> <span class="token string">"navigationStateChange"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">setNavState</span><span class="token punctuation">(</span>nativeEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">}</span>\n    <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),e.createElement(a.button,{className:"codeblock-copy-button"},"COPY")),e.createElement(a.h2,{id:"4-참고",style:{position:"relative"}},e.createElement(a.a,{href:"#4-%EC%B0%B8%EA%B3%A0","aria-label":"4 참고 permalink",className:"anchor before"},e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4. 참고"),e.createElement(a.ul,null,"\n",e.createElement(a.li,null,e.createElement(a.a,{href:"https://github.com/react-native-webview/react-native-webview"},"React Native WebView")),"\n",e.createElement(a.li,null,e.createElement(a.a,{href:"https://github.com/react-native-webview/react-native-webview/issues/24#issuecomment-483956651"},"MIGRATED: iOS WebView doesn't support hash url change. The onNavigationStateChange listener will not be called when url hash changes. (#20447) #24")),"\n")),"\n",e.createElement(a.div,{className:"toc"},e.createElement(a.p,null,"목차"),e.createElement(a.ul,null,"\n",e.createElement(a.li,null,e.createElement(a.a,{href:"#1-onnavigationstatechange"},"1. ",e.createElement(a.code,null,"onNavigationStateChange"))),"\n",e.createElement(a.li,null,e.createElement(a.a,{href:"#2-html5-history-api-%EB%8C%80%EC%9D%91"},"2. HTML5 History API 대응"),"\n",e.createElement(a.ul,null,"\n",e.createElement(a.li,null,e.createElement(a.a,{href:"#21-webviewinjectjavascript"},"2.1. ",e.createElement(a.code,null,"webview.injectJavaScript()")),"\n",e.createElement(a.ul,null,"\n",e.createElement(a.li,null,e.createElement(a.a,{href:"#211-injectedjavascript-props-%EB%8A%94-%EC%95%88-%EB%90%98%EB%82%98"},"2.1.1. ",e.createElement(a.code,null,"injectedJavaScript")," props 는 안 되나?")),"\n",e.createElement(a.li,null,e.createElement(a.a,{href:"#212-%EC%82%BD%EC%9E%85%EB%90%9C-%EC%BD%94%EB%93%9C%EB%8A%94-%EC%96%B4%EB%96%A4-%EC%BD%94%EB%93%9C"},"2.1.2. 삽입된 코드는 어떤 코드?")),"\n"),"\n"),"\n",e.createElement(a.li,null,e.createElement(a.a,{href:"#22-onmessage"},"2.2. ",e.createElement(a.code,null,"onMessage"))),"\n"),"\n"),"\n",e.createElement(a.li,null,e.createElement(a.a,{href:"#3-%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C"},"3. 전체 코드")),"\n",e.createElement(a.li,null,e.createElement(a.a,{href:"#4-%EC%B0%B8%EA%B3%A0"},"4. 참고")),"\n")))}var o,c,l,u=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.ah)(),n.components);return a?e.createElement(a,n,e.createElement(p,n)):p(n)},i=s(1880),r=s(1883),k=s(3723),m=s(6758),d=s(3904),h=s(891),v=s(6120),E=s(5777),g=s(7178),f=s(2889),w=s(5924),S=s(7466);function b(n){let{data:a,children:s}=n;const t=e.useRef(),{frontmatter:p,sameSeriesPosts:o}=a.mdx,{title:c,slug:l,date:u,tags:i,series:k,heroImage:d,heroImageAlt:h}=p;return e.useEffect((()=>{var n;const a=null===(n=t.current)||void 0===n?void 0:n.querySelectorAll(".md h1, .md h2, .md h3, .md h4, .md h5, .md h6"),s=new IntersectionObserver((()=>(0,w.Z)(t,a)),{rootMargin:"0px 0px -90% 0px",threshold:[0,1]});return null==a||a.forEach((n=>s.observe(n))),()=>s.disconnect()}),[]),e.createElement(m.Z,null,e.createElement(y,null,e.createElement("h1",null,e.createElement(r.Link,{to:"/posts/"+l},c)),e.createElement(C,null,u),e.createElement(f.Z,{tags:i})),e.createElement(g.Z,{name:k,data:o,current:l}),e.createElement(S.Z,{data:d,alt:h}),e.createElement(B,{ref:t},s),e.createElement(E.Z,null))}const y=h.ZP.div(o||(o=(0,i.Z)(["\n  margin: 60px 0 72px;\n  padding: 0 24px;\n\n  & > h1 {\n    font-size: 2.5rem;\n    word-break: keep-all;\n    margin: 0;\n\n    > a {\n      color: ",";\n    }\n  }\n"])),(n=>n.theme.colors.onBackground)),C=h.ZP.div(c||(c=(0,i.Z)(["\n  margin: 16px 0;\n"]))),B=(0,h.ZP)(v.Z)(l||(l=(0,i.Z)(["\n  margin-bottom: 60px;\n"]))),N=n=>{var a,s;let{data:t}=n;const{frontmatter:{title:p,slug:o,tags:c,heroImage:l,previewContent:u},excerpt:i}=t.mdx,r=l?(0,k.c)(l):null;return e.createElement(d.Z,{title:p,description:null!=u?u:i,path:"posts/"+o,thumbnail:null==r||null===(a=r.images)||void 0===a||null===(s=a.fallback)||void 0===s?void 0:s.src,keywords:c,ogType:"article"})};function H(n){return e.createElement(b,n,e.createElement(u,n))}}}]);
//# sourceMappingURL=component---src-pages-posts-mdx-frontmatter-slug-tsx-content-file-path-users-kangseong-workspace-private-ricalelog-posts-2021-210821-react-native-webview-android-back-button-index-mdx-baae441e8b412e91d781.js.map