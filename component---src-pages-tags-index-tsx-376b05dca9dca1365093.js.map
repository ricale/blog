{"version":3,"file":"component---src-pages-tags-index-tsx-376b05dca9dca1365093.js","mappings":"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","sources":["webpack://ricalelog/./src/components/Layout.tsx","webpack://ricalelog/./src/components/ListPageHeader.tsx","webpack://ricalelog/./src/components/Seo.tsx","webpack://ricalelog/./src/components/Tag.tsx","webpack://ricalelog/./src/pages/tags/index.tsx","webpack://ricalelog/./src/themes/themedStyledComponents.ts","webpack://ricalelog/./src/themes/normal.ts","webpack://ricalelog/./src/themes/GlobalStyle.ts","webpack://ricalelog/./src/themes/index.ts","webpack://ricalelog/./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js"],"sourcesContent":["import * as React from \"react\";\nimport { graphql, Link, useStaticQuery } from \"gatsby\";\n\nimport styled, { GlobalStyle, normalTheme, ThemeProvider } from \"../themes\";\n\ntype LayoutQueryData = {\n  site: {\n    siteMetadata: {\n      title: string;\n      author: string;\n    };\n  };\n};\ntype LayoutProps = {\n  children?: React.ReactNode;\n};\nconst Layout = ({ children }: LayoutProps) => {\n  const data = useStaticQuery<LayoutQueryData>(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n  return (\n    <ThemeProvider theme={normalTheme}>\n      <GlobalStyle />\n      <Container>\n        <Header>\n          <header>{data.site.siteMetadata.title}</header>\n          <address>by ricale</address>\n          <nav>\n            <ul>\n              <li>\n                <Link to=\"/posts\">글</Link>\n              </li>\n              <li>\n                <Link to=\"/tags\">태그</Link>\n              </li>\n              <li>\n                <Link to=\"/series\">시리즈</Link>\n              </li>\n            </ul>\n          </nav>\n        </Header>\n        <main>{children}</main>\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nconst Container = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n\n  > main {\n    padding-left: ${(p) => p.theme.dimens.margin}px;\n    padding-right: ${(p) => p.theme.dimens.margin}px;\n    padding-bottom: ${(p) => p.theme.dimens.margin}px;\n  }\n`;\nconst Header = styled.div`\n  display: flex;\n  flex-direction: row;\n\n  margin: 8px 16px;\n\n  & > header {\n    font-weight: 900;\n  }\n\n  & > address {\n    margin-left: 8px;\n  }\n\n  & > nav > ul {\n    display: flex;\n    flex-direction: row;\n    gap: 8px;\n\n    margin: 0;\n    margin-left: 16px;\n    padding: 0;\n    list-style: none;\n  }\n`;\n\nexport default Layout;\n","import * as React from \"react\";\nimport styled from \"../themes\";\n\ntype ListPageHeaderProps = {\n  title: string;\n  note?: string;\n};\nfunction ListPageHeader({ title, note }: ListPageHeaderProps) {\n  return (\n    <Container>\n      <h1>{title}</h1>\n      {!!note && <Note>{`(${note})`}</Note>}\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: flex-end;\n  gap: 8px;\n\n  margin: 40px;\n`;\nconst Note = styled.p`\n  margin-bottom: 8px;\n  font-size: 0.875rem;\n`;\n\nexport default ListPageHeader;\n","import * as React from \"react\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\ntype SeoQueryData = {\n  site: {\n    siteMetadata: {\n      title: string;\n      author: string;\n      siteUrl: string;\n      description: string;\n    };\n    pathPrefix: string;\n  };\n};\ntype SeoProps = {\n  title?: string;\n  description?: string;\n  path?: string;\n  thumbnail?: string;\n  keywords?: string[];\n  ogType?: string;\n};\nconst Seo = ({\n  title,\n  description,\n  path,\n  thumbnail,\n  ogType,\n  keywords,\n}: SeoProps) => {\n  const data = useStaticQuery<SeoQueryData>(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          author\n          siteUrl\n          description\n        }\n        pathPrefix\n      }\n    }\n  `);\n\n  const {\n    siteMetadata: { title: siteTitle, author, siteUrl, description: siteDesc },\n    pathPrefix,\n  } = data.site;\n\n  const pageTitle = title ? `${title} | ${siteTitle}` : siteTitle;\n  const seoTitle = title ?? siteTitle;\n  const desc = description || siteDesc;\n  const pageUrl = `${siteUrl}${pathPrefix}${path ? `/${path}` : \"\"}`;\n  const imageUrl = thumbnail ? `${siteUrl}${thumbnail}` : null;\n  const keywordsString = keywords ? keywords.join(\", \") : null;\n\n  return (\n    <>\n      <title>{pageTitle}</title>\n      <meta name=\"description\" content={desc} />\n      <meta name=\"author\" content={author} />\n      {keywordsString && <meta name=\"keywords\" content={keywordsString} />}\n\n      {!!ogType && <meta property=\"og:type\" content={ogType} />}\n      <meta property=\"og:title\" content={seoTitle} />\n      <meta property=\"og:description\" content={desc} />\n      <meta property=\"og:url\" content={pageUrl} />\n      {!!imageUrl && <meta property=\"og:image\" content={imageUrl} />}\n\n      <meta property=\"twitter:card\" content=\"summary_large_image\" />\n      <meta property=\"twitter:title\" content={seoTitle} />\n      <meta property=\"twitter:description\" content={desc} />\n      <meta property=\"twitter:url\" content={pageUrl} />\n      {!!imageUrl && <meta property=\"twitter:image\" content={imageUrl} />}\n    </>\n  );\n};\n\nexport default Seo;\n","import * as React from \"react\";\nimport { Link } from \"gatsby\";\nimport styled from \"../themes\";\n\ntype TagProps = {\n  value: string;\n};\nfunction Tag({ value }: TagProps) {\n  return <TagComp to={`/tags/${value}`}>{value}</TagComp>;\n}\n\nconst TagComp = styled(Link)`\n  display: inline-block;\n  padding: ${(p) => p.theme.dimens.spacing}px ${(p) => p.theme.dimens.gutter}px;\n  border-radius: 2px;\n\n  background-color: ${(p) => p.theme.colors.tag};\n  color: ${(p) => p.theme.colors.onTag};\n  text-decoration: none;\n`;\n\nexport default Tag;\n","import * as React from \"react\";\nimport { graphql, Link, PageProps } from \"gatsby\";\n\nimport Layout from \"../../components/Layout\";\nimport Seo from \"../../components/Seo\";\nimport ListPageHeader from \"../../components/ListPageHeader\";\nimport Tag from \"../../components/Tag\";\nimport styled from \"../../themes\";\n\ntype TagsPageData = {\n  allMdx: {\n    group: {\n      fieldValue: string;\n      totalCount: number;\n    }[];\n  };\n};\nconst TagsPage = ({ data }: PageProps<TagsPageData>) => {\n  const tags = data.allMdx.group.sort((a, b) => b.totalCount - a.totalCount);\n  return (\n    <Layout>\n      <ListPageHeader title=\"태그\" />\n      <TagList>\n        {tags.map((tag) => (\n          <li key={tag.fieldValue}>\n            <Tag value={tag.fieldValue} />{\" \"}\n            <small>{`(${tag.totalCount})`}</small>\n          </li>\n        ))}\n      </TagList>\n    </Layout>\n  );\n};\n\nconst TagList = styled.ul`\n  padding-left: 15px;\n  & > li {\n    margin-bottom: 4px;\n  }\n`;\n\nexport const query = graphql`\n  query {\n    allMdx(limit: 2000) {\n      group(field: { frontmatter: { tags: SELECT } }) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`;\n\nexport const Head = () => <Seo title=\"태그 목록\" />;\n\nexport default TagsPage;\n","import * as styledComponents from \"styled-components\";\n\nimport { RicalelogTheme } from \"./normal\";\n\nexport const {\n  default: styled,\n  css,\n  keyframes,\n  ThemeProvider,\n  ThemeContext,\n  createGlobalStyle,\n} = styledComponents as unknown as styledComponents.ThemedStyledComponentsModule<RicalelogTheme>;\n","const base = 16;\n\nconst colors = {\n  background: \"black\",\n  onBackground: \"white\",\n\n  codeblock: \"#111111\",\n  onCodeblock: \"white\",\n\n  blockquoteBorder: \"#666666\",\n  blockquote: \"#111111\",\n  onBlockquote: \"white\",\n\n  code: \"#333333\",\n  onCode: \"#DDDDDD\",\n\n  tag: \"#222222\",\n  onTag: \"skyblue\",\n\n  tableBorder: \"white\",\n};\n\nconst normal = {\n  dimens: {\n    bigMargin: base * 2,\n    margin: base * 1,\n    gutter: base * 0.5,\n    spacing: base * 0.25,\n    thin: base * 0.125,\n  },\n  colors,\n};\n\nexport default normal;\nexport type RicalelogTheme = typeof normal;\n","import { createGlobalStyle } from \"./themedStyledComponents\";\n\nconst GlobalStyle = createGlobalStyle`\n  html, body, #root {\n    width: 100%;\n    margin: 0;\n    padding: 0;\n\n    font-family: -apple-system,\n      BlinkMacSystemFont,\n      \"Segoe UI\",\n      \"Noto Sans\",\n      Helvetica,\n      Arial,\n      sans-serif,\n      \"Apple Color Emoji\",\n      \"Segoe UI Emoji\";\n\n    overflow-x: hidden;\n\n    background-color: ${(p) => p.theme.colors.background};\n    color: ${(p) => p.theme.colors.onBackground};\n  }\n\n  h1, h2, h3, h4, h5, h6, p {\n    margin: 0;\n  }\n\n  a {\n    color: skyblue;\n    text-decoration: none;\n  }\n  a:hover {\n    text-decoration: underline;\n  }\n\n  input, button, select {\n    margin: 0;\n    padding: 0;\n    font-size: 16px;\n    appearance: none;\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n`;\n\nexport default GlobalStyle;\n","import {\n  styled,\n  css,\n  keyframes,\n  ThemeProvider,\n} from \"./themedStyledComponents\";\n\nexport default styled;\nexport { css, keyframes, ThemeProvider };\n\nexport { default as normalTheme } from \"./normal\";\nexport * from \"./normal\";\nexport { default as GlobalStyle } from \"./GlobalStyle\";\nexport { default as useTheme } from \"./useTheme\";\n","export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n  strings.raw = raw;\n  return strings;\n}"],"names":["Container","styled","p","theme","dimens","margin","Header","_ref","children","data","useStaticQuery","React","ThemeProvider","normalTheme","GlobalStyle","site","siteMetadata","title","Link","to","Note","note","description","path","thumbnail","ogType","keywords","siteTitle","author","siteUrl","siteDesc","pathPrefix","pageTitle","seoTitle","desc","pageUrl","imageUrl","keywordsString","join","name","content","property","TagComp","spacing","gutter","colors","tag","onTag","value","TagList","Head","Seo","tags","allMdx","group","sort","a","b","totalCount","Layout","ListPageHeader","map","key","fieldValue","Tag","default","css","keyframes","ThemeContext","createGlobalStyle","styledComponents","bigMargin","base","thin","background","onBackground","codeblock","onCodeblock","blockquoteBorder","blockquote","onBlockquote","code","onCode","tableBorder","_taggedTemplateLiteralLoose","strings","raw","slice"],"sourceRoot":""}