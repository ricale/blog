"use strict";(self.webpackChunkricalelog=self.webpackChunkricalelog||[]).push([[2296],{4987:function(n,s,a){a.r(s),a.d(s,{Head:function(){return S},default:function(){return H}});var t=a(1151),p=a(7294);function e(n){const s=Object.assign({div:"div",h3:"h3",a:"a",ul:"ul",li:"li",h1:"h1",p:"p",code:"code",button:"button"},(0,t.ah)(),n.components);return p.createElement(p.Fragment,null,p.createElement(s.div,{className:"md"},p.createElement(s.h3,{id:"시리즈-알고리즘-문제풀기-개요",style:{position:"relative"}},p.createElement(s.a,{href:"#%EC%8B%9C%EB%A6%AC%EC%A6%88-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%AC%B8%EC%A0%9C%ED%92%80%EA%B8%B0-%EA%B0%9C%EC%9A%94","aria-label":"시리즈 알고리즘 문제풀기 개요 permalink",className:"anchor before"},p.createElement(s.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),'시리즈 "알고리즘 문제풀기" 개요'),p.createElement(s.ul,null,"\n",p.createElement(s.li,null,"1~2주 (최소) 1개 문제 풀기를 목표로 한다."),"\n",p.createElement(s.li,null,"JavaScript 로 푼다."),"\n"),p.createElement(s.h1,{id:"문제",style:{position:"relative"}},p.createElement(s.a,{href:"#%EB%AC%B8%EC%A0%9C","aria-label":"문제 permalink",className:"anchor before"},p.createElement(s.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"문제"),p.createElement(s.p,null,p.createElement(s.a,{href:"https://leetcode.com/problems/multiply-strings/"},"LeetCode - 43. Multiply Strings")),p.createElement(s.p,null,"문자열로 표현된 두 개의 숫자를 ",p.createElement(s.code,null,"num1"),", ",p.createElement(s.code,null,"num2")," 를 곱해서 결과를 반환하자."),p.createElement(s.p,null,"숫자는 최소 1자리에서 최대 200자리까지 가능하다. ",p.createElement(s.code,null,"BigInt")," 같은 내장 라이브러리는 쓰면 안 된다."),p.createElement(s.h1,{id:"접근",style:{position:"relative"}},p.createElement(s.a,{href:"#%EC%A0%91%EA%B7%BC","aria-label":"접근 permalink",className:"anchor before"},p.createElement(s.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"접근"),p.createElement(s.p,null,"실제로 곱셈을 할 때와 동일하게 생각해보았다. 보통 세 자리 수 두 개를 곱한다고 하면 아래처럼 계산한다."),p.createElement(s.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">  123\nx 456\n-----\n  738\n 615\n492\n-----\n56088</code></pre></div>'}}),p.createElement(s.p,null,"한 숫자에 자랏수마다 다른 한 숫자를 곱한 뒤 곱한 결과를 합하는 것이다. 이걸 코드로 그대로 구현하면 되겠다 싶었다."),p.createElement(s.h1,{id:"풀이-1",style:{position:"relative"}},p.createElement(s.a,{href:"#%ED%92%80%EC%9D%B4-1","aria-label":"풀이 1 permalink",className:"anchor before"},p.createElement(s.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"풀이 1"),p.createElement(s.div,{className:"codeblock-container"},p.createElement(s.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber 0" class="language-js line-numbers"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">multiply</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 둘 중 하나라도 "0" 이라면 바로 결과를 반환한다.</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>num1 <span class="token operator">===</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>num2 <span class="token operator">===</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 곱셈을 편하게 하기 위해 두 숫자를 배열로 만든뒤 뒤집는다.</span>\n  <span class="token comment">// 뒤집는 건 사실 필수가 아니지만, 인덱스를 좀 더 편하게 생각하려고 뒤집었다.</span>\n  <span class="token keyword">const</span> a1 <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> a2 <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"0"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// (`num1` * `num2` 의 j 번째 숫자) 의 결과를 얻는다.</span>\n    <span class="token comment">// `getMultiplyWithOneDigit` 함수의 코드는 26 라인에 나온다.</span>\n    <span class="token keyword">const</span> subResult <span class="token operator">=</span> <span class="token function">getMultiplyWithOneDigit</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 결과값에 `subResult` 값을 합산한다.</span>\n    <span class="token comment">// `addTo` 함수의 코드는 59 라인에 나온다.</span>\n    <span class="token function">addTo</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> subResult<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 결과를 반환한다.</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// a1 과 n 을 곱한다. (digit 는 n 이 a2 의 몇 번째 자릿수였는지 알려주는 값.)</span>\n<span class="token keyword">var</span> <span class="token function-variable function">getMultiplyWithOneDigit</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a1<span class="token punctuation">,</span> n<span class="token punctuation">,</span> digit</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 곱하려는 값이 "0" 이면 "0" 을 바로 반환한다.</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">"0"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// `n` 의 자릿수만큼 "0"으로 채운다.</span>\n  <span class="token comment">// 예를 들어 `a1` 이 "123" 이고 `n` 이 "456" 중에 "4" 였다고 하면</span>\n  <span class="token comment">// 두 수의 곱의 결과는 "492" 지만, `n` 이 백의 자리 숫자였으므로</span>\n  <span class="token comment">// 결과에 합산하기 편하게 "49200" 으로 만들어준 것.</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>digit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// `a1` 의 자릿수 별로 `n` 을 곱한다.</span>\n  <span class="token comment">// 곱한 결과가 10 이상이면 (결과 % 10) 만 저장하고</span>\n  <span class="token comment">// (결과 / 10) 은 다음 자릿수로 넘긴다.</span>\n  <span class="token keyword">let</span> more <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> multiplied <span class="token operator">=</span> <span class="token operator">+</span>a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token operator">+</span>n <span class="token operator">+</span> more<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> subResult <span class="token operator">=</span> multiplied <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>\n    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>subResult<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    more <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>multiplied <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 다 곱했는데도 `more` 에 값이 있다는 것은 최종 자릿수의 곱셈 결과가</span>\n  <span class="token comment">// 10 이상이었다는 뜻이다. 그렇다면 해당 값도 밀어넣어주자.</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>more <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>more<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// `result` 와 `adding` 을 더한다.</span>\n<span class="token keyword">var</span> <span class="token function-variable function">addTo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> adding</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 더하려는 값 `adding` 이 "0" 이면 더해봤자 결과가 같으므로 바로 종료한다.</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>adding<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> adding<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> more <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// `result` 와 `adding" 을 자릿수별로 차례차례 더해서</span>\n  <span class="token comment">// 다시 `result` 에 넣는다.</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> result<span class="token punctuation">.</span>length <span class="token operator">||</span> i <span class="token operator">&lt;</span> adding<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> added <span class="token operator">=</span> <span class="token operator">+</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token operator">+</span><span class="token punctuation">(</span>adding<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token operator">+</span> more<span class="token punctuation">;</span>\n\n    <span class="token comment">// (더한 결과 % 10) 만 현재 자릿수 값에 반영하고</span>\n    <span class="token comment">// (더한 결과 / 10) 은 다음 자릿수에 넘긴다.</span>\n    result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>added <span class="token operator">%</span> <span class="token number">10</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n    more <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>added <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 덧셈을 다 끝냈는데 `more` 에 값이 남았다면 해당 값은 맨 앞자리에 붙여준다.</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>more <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>more<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// `result` 에 결과를 바로 반영했으므로 값을 따로 반환할 필요는 없다.</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>'}}),p.createElement(s.button,{className:"codeblock-copy-button"},"COPY")),p.createElement(s.h1,{id:"개선점",style:{position:"relative"}},p.createElement(s.a,{href:"#%EA%B0%9C%EC%84%A0%EC%A0%90","aria-label":"개선점 permalink",className:"anchor before"},p.createElement(s.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"개선점"),p.createElement(s.p,null,"위 코드도 문제 없이 동작한다. 하지만 개선점이 존재한다."),p.createElement(s.p,null,"첫째로 숫자를 뒤집을 필요가 없다. 이건 순전히 생각하기 편하려고 뒤집었던 것이었고, 뒤집지 않아도 곱하는 데 문제가 없다."),p.createElement(s.p,null,"둘째로 현재는 숫자를 자릿수 별로 곱한 뒤에, 곱한 값을 결과에 합산하고 있는데 이렇게 할 필요가 없다. 곱하면서 바로바로 결과에 합산해도 되기 때문이다. 이러면 코드가 더 단순해지고 불필요한 반복문도 제거할 수 있다."),p.createElement(s.p,null,"그럼 이제 개선해보자."),p.createElement(s.h1,{id:"풀이-2",style:{position:"relative"}},p.createElement(s.a,{href:"#%ED%92%80%EC%9D%B4-2","aria-label":"풀이 2 permalink",className:"anchor before"},p.createElement(s.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"풀이 2"),p.createElement(s.div,{className:"codeblock-container"},p.createElement(s.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber 0" class="language-js line-numbers"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">multiply</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>num1 <span class="token operator">===</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>num2 <span class="token operator">===</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// - num1 * num2 의 결과값의 길이는</span>\n  <span class="token comment">//   최소 num1.length + num2.length - 1</span>\n  <span class="token comment">//   최대 num1.length + num2.length</span>\n  <span class="token comment">// - 최대 길이만큼 결과 배열을 미리 만들어서 0으로 채워두었다.</span>\n  <span class="token keyword">const</span> resArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span>length <span class="token operator">+</span> num2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> num1<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> num2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// i 번째 숫자와 j 번째 숫자를 곱한 값은 결과값의 i + j + 1 번째에 반영된다.</span>\n      <span class="token keyword">const</span> curr <span class="token operator">=</span> i <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\n      <span class="token comment">// 두 숫자를 곱한 뒤 현재 결과 자릿수의 값과 합산한다.</span>\n      <span class="token keyword">const</span> multiplied <span class="token operator">=</span> resArr<span class="token punctuation">[</span>curr<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token operator">+</span>num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token operator">+</span>num2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token comment">// 값이 10 이상이면 10을 나눈 나머지만 해당 자릿수에 반영한다.</span>\n      resArr<span class="token punctuation">[</span>curr<span class="token punctuation">]</span> <span class="token operator">=</span> multiplied <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>\n      <span class="token comment">// 값을 10으로 나눈 값을 바로 윗자릿수에 합산한다.</span>\n      resArr<span class="token punctuation">[</span>curr <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>multiplied <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 결과 배열을 문자열로 만든다.</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> resArr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// - 만약 첫 자릿수의 값이 0이라면 쓸모 없는 값이므로 해당 값을 잘라낸다.</span>\n  <span class="token comment">// - 왜 첫 자릿수의 값이 0인 경우가 생기냐면</span>\n  <span class="token comment">//   최대 자릿수 num1.length + num2.length 만큼 미리 0을 채워놨기 때문이다.</span>\n  <span class="token comment">//   결과가 최소 자릿수 num1.length + num2.length - 1 일 경우 첫 번째 자릿수는 0으로 남게 된다.</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"0"</span> <span class="token operator">?</span> result<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>'}}),p.createElement(s.button,{className:"codeblock-copy-button"},"COPY")),p.createElement(s.h1,{id:"후기",style:{position:"relative"}},p.createElement(s.a,{href:"#%ED%9B%84%EA%B8%B0","aria-label":"후기 permalink",className:"anchor before"},p.createElement(s.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"후기"),p.createElement(s.p,null,"어렵다기보다는 헷갈리는 문제였다. 하지만 침착하게만 하면 어떻게든 풀 수 있는 문제이기도 한 것 같다.")),"\n",p.createElement(s.div,{className:"toc"},p.createElement(s.p,null,"목차"),p.createElement(s.ul,null,"\n",p.createElement(s.li,null,"\n",p.createElement(s.ul,null,"\n",p.createElement(s.li,null,"\n",p.createElement(s.ul,null,"\n",p.createElement(s.li,null,p.createElement(s.a,{href:"#%EC%8B%9C%EB%A6%AC%EC%A6%88-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%AC%B8%EC%A0%9C%ED%92%80%EA%B8%B0-%EA%B0%9C%EC%9A%94"},'시리즈 "알고리즘 문제풀기" 개요')),"\n"),"\n"),"\n"),"\n"),"\n",p.createElement(s.li,null,p.createElement(s.a,{href:"#%EB%AC%B8%EC%A0%9C"},"문제")),"\n",p.createElement(s.li,null,p.createElement(s.a,{href:"#%EC%A0%91%EA%B7%BC"},"접근")),"\n",p.createElement(s.li,null,p.createElement(s.a,{href:"#%ED%92%80%EC%9D%B4-1"},"풀이 1")),"\n",p.createElement(s.li,null,p.createElement(s.a,{href:"#%EA%B0%9C%EC%84%A0%EC%A0%90"},"개선점")),"\n",p.createElement(s.li,null,p.createElement(s.a,{href:"#%ED%92%80%EC%9D%B4-2"},"풀이 2")),"\n",p.createElement(s.li,null,p.createElement(s.a,{href:"#%ED%9B%84%EA%B8%B0"},"후기")),"\n")))}var o,c,l,u=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.ah)(),n.components);return s?p.createElement(s,n,p.createElement(e,n)):e(n)},r=a(1880),i=a(1883),k=a(3723),m=a(9178),d=a(3904),h=a(891),g=a(3234),E=a(6117),f=a(5777),v=a(7178),y=a(5924),b=a(4742);function w(n){let{data:s,children:a}=n;const t=p.useRef(),{frontmatter:e,sameSeriesPosts:o}=s.mdx,{title:c,slug:l,date:u,series:r}=e;return p.useEffect((()=>{var n;const s=null===(n=t.current)||void 0===n?void 0:n.querySelectorAll(".md h1, .md h2, .md h3, .md h4, .md h5, .md h6"),a=new IntersectionObserver((()=>(0,y.Z)(t,s)),{rootMargin:"0px 0px -90% 0px",threshold:[0,1]});return null==s||s.forEach((n=>a.observe(n))),()=>a.disconnect()}),[]),p.createElement(m.Z,null,p.createElement(C,null,p.createElement("h1",null,p.createElement(i.Link,{to:"/posts/"+l},c)),p.createElement(A,null,u)),p.createElement(v.Z,{name:r,data:o,current:l}),p.createElement(B,{ref:t},a),p.createElement(E.Z,{data:o,current:l}),p.createElement(b.Z,null),p.createElement(f.Z,null))}const C=h.ZP.div(o||(o=(0,r.Z)(["\n  margin: 72px 0 84px;\n  padding: 0 32px;\n\n  & > h1 {\n    font-size: 2.5rem;\n    word-break: keep-all;\n    margin: 0;\n\n    > a {\n      color: ",";\n    }\n  }\n"])),(n=>n.theme.colors.onBackground)),A=h.ZP.div(c||(c=(0,r.Z)(["\n  margin-left: 2px;\n"]))),B=(0,h.ZP)(g.Z)(l||(l=(0,r.Z)(["\n  margin-bottom: 120px;\n"]))),S=n=>{var s,a;let{data:t}=n;const{frontmatter:{title:e,slug:o,tags:c,heroImage:l,previewContent:u},excerpt:r}=t.mdx,i=l?(0,k.c)(l):null;return p.createElement(d.Z,{title:e,description:null!=u?u:r,path:"posts/"+o,thumbnail:null==i||null===(s=i.images)||void 0===s||null===(a=s.fallback)||void 0===a?void 0:a.src,keywords:c,ogType:"article"})};function H(n){return p.createElement(w,n,p.createElement(u,n))}}}]);
//# sourceMappingURL=component---src-pages-posts-mdx-frontmatter-slug-tsx-content-file-path-users-kangseong-workspace-private-blog-posts-2023-230420-algorithm-2-multiply-strings-index-mdx-d4511c82fd48d1787d32.js.map