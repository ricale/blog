"use strict";(self.webpackChunkricalelog=self.webpackChunkricalelog||[]).push([[5760],{6105:function(e,t,n){n.r(t),n.d(t,{Head:function(){return f},default:function(){return y}});var a=n(1151),l=n(7294);function r(e){const t=Object.assign({h1:"h1",p:"p",a:"a",ol:"ol",li:"li",ul:"ul",code:"code",h2:"h2",pre:"pre"},(0,a.ah)(),e.components);return l.createElement(l.Fragment,null,l.createElement(t.h1,null,"0. 발단"),"\n",l.createElement(t.p,null,"쓰던 블로그 서비스가 안드로이드 모바일에서 광고를 삽입하는 것을 발견했다. (광고는 다시 없어졌다. 아마 운영자의 테스트였던 것 같다.) 개인적으로 개인 개발 블로그에 광고가 들어가는 걸 원치 않으므로 서비스를 바꿔야 겠다는 생각이 들었다. 그리고 그러던 와중에 GitHub Pages 에 정적 페이지 생성 프레임워크로 블로그를 운영하는 것도 괜찮겠다 싶었다."),"\n",l.createElement(t.p,null,"Jekyll 과 Gatsby 두 서비스 중 고민하다가 Gatsby 를 선택했다. 자 그러면 천천히 하나씩 적용해보자."),"\n",l.createElement(t.h1,null,"1. 프로젝트 기본 구성"),"\n",l.createElement(t.p,null,l.createElement(t.a,{href:"https://www.gatsbyjs.com/docs/tutorial/"},"공식 튜토리얼 문서"),"가 잘 정리되어 있다. 튜토리얼에서는 아래 일곱가지 내용을 설명한다."),"\n",l.createElement(t.ol,{start:"0"},"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"https://www.gatsbyjs.com/docs/tutorial/part-0/"},"개발 환경 구성하기")),"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"https://www.gatsbyjs.com/docs/tutorial/part-1/"},"로컬에서 프로젝트 생성 및 실행하고, Gatsby 클라우드에 배포하기")),"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"https://www.gatsbyjs.com/docs/tutorial/part-2/"},"React 로 페이지 구현하기")),"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"https://www.gatsbyjs.com/docs/tutorial/part-3/"},"플러그인 적용하기"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"gatsby-plugin-image 플러그인으로 정적 이미지를 사이트에 추가하기"),"\n"),"\n"),"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"https://www.gatsbyjs.com/docs/tutorial/part-4/"},"GraphQL 사용하기"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"사이트의 메타 데이터 다루기"),"\n",l.createElement(t.li,null,"gatsby-source-filesystem 플러그인을 적용해 GraphQL 로 MDX 파일 목록 가져오기"),"\n"),"\n"),"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"https://www.gatsbyjs.com/docs/tutorial/part-5/"},"MDX 사용하기"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"MDX 로 블로그 컨텐츠 작성하기"),"\n",l.createElement(t.li,null,"gatsby-plugin-mdx 플러그인을 적용해 GraphQL 로 MDX 파일 내용 가져오기"),"\n"),"\n"),"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"https://www.gatsbyjs.com/docs/tutorial/part-6/"},"동적으로 페이지 생성하기"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"MDX 의 frontmatter 와 ",l.createElement(t.code,null,"{mdx.frontmatter__slug}.tsx")," 형식의 파일명을 사용해 페이지 동적으로 생성하기"),"\n",l.createElement(t.li,null,"생성된 페이지에 알맞는 MDX 데이터를 GraphQL 로 가져와 사용하기"),"\n"),"\n"),"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"https://www.gatsbyjs.com/docs/tutorial/part-7/"},"데이터에 따라 동적으로 이미지 추가하기"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"gatsby-transformer-sharp 플러그인을 적용해 MDX 의 frontmatter 에 따라 알맞는 이미지를 가져와 사용하기"),"\n"),"\n"),"\n"),"\n",l.createElement(t.p,null,"본문이 훌륭하기 때문에 굳이 여기에 다시 정리하지는 않겠다. 위 과정을 모두 거치면 기본적인 글 작성이 가능한 블로그 사이트가 완성된다."),"\n",l.createElement(t.h1,null,"2. 태그 구현"),"\n",l.createElement(t.p,null,"태그 구현 또한 ",l.createElement(t.a,{href:"https://www.gatsbyjs.com/docs/adding-tags-and-categories-to-blog-posts/"},"공식 문서"),"가 잘 정리되어 있다. 하지만 약간 옛날 버전인 듯 위 튜토리얼 문서와 과 맞지 않는 부분이 있어서 해당 부분을 정정할 겸 정리해보겠다."),"\n",l.createElement(t.h2,null,"2.1. MDX 에 태그 추가"),"\n",l.createElement(t.p,null,"MDX 파일의 frontmatter 영역에 tags 를 추가하자"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-mdx"},'---\ntitle: "Create React App 으로 GitHub Pages 적용하기"\ndate: "2021-05-03"\nslug: "210503-create-react-app-github-pages"\ntags: ["React", "create react app", "github pages"] # 이렇게 추가하자\n---\n')),"\n",l.createElement(t.p,null,l.createElement(t.a,{href:"https://eneaxharja.com/add-tags-to-mdx-blog"},"https://eneaxharja.com/add-tags-to-mdx-blog")),"\n",l.createElement(t.h2,null,"2.2. 태그 페이지 템플릿 추가"),"\n",l.createElement(t.p,null,"태그 페이지에 쓰일 템플릿을 만들어보자."),"\n",l.createElement(t.p,null,"여기서 ",l.createElement(t.code,null,"{mdx.frontmatter__slug}.tsx}")," 형식의 파일을 만들지 않고 템플릿을 만드는 이유는 페이지가 MDX 파일의 정적 데이터(frontmatter 의 slug 필드)에 의해 만들어지는 것이 아니라, 동적인 데이터 (frontmatter 의 tags 정보를 수집) 에 의해 만들어져야 하기 때문이다."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-tsx"},'// src/templates/TagDetailPageTemplate.tsx\nimport * as React from "react";\nimport { graphql, Link, PageProps } from "gatsby";\nimport Layout from "../components/Layout";\n\ntype TagDetailPageTemplateData = {\n  allMdx: {\n    totalCount: number;\n    edges: {\n      node: {\n        frontmatter: {\n          slug: string;\n          title: string;\n        };\n      };\n    }[];\n  };\n};\ntype TagDetailPageTemplateContext = {\n  tag: string;\n};\nconst TagDetailPageTemplate = ({\n  pageContext,\n  data,\n}: PageProps<TagDetailPageTemplateData, TagDetailPageTemplateContext>) => {\n  const { tag } = pageContext;\n  const { totalCount, edges } = data.allMdx;\n\n  return (\n    <Layout>\n      <h1>{`태그 "${tag}"`}</h1>\n      <p>{`글 ${totalCount}개`}</p>\n\n      <ul>\n        {edges.map(({ node: { frontmatter } }) => (\n          <li key={frontmatter.slug}>\n            <Link to={`/posts/${frontmatter.slug}`}>{frontmatter.title}</Link>\n          </li>\n        ))}\n      </ul>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query ($tag: String) {\n    allMdx(\n      limit: 2000\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          frontmatter {\n            slug\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default TagDetailPageTemplate;\n')),"\n",l.createElement(t.h2,null,"2.3. ",l.createElement(t.code,null,"gatsby-node.ts")," 작성"),"\n",l.createElement(t.p,null,"위에서 만든 템플릿으로 페이지를 만들기 위해서는 ",l.createElement(t.code,null,"gatsby-node.ts")," 를 작성해야 한다. 이미 해당 파일을 만들었다면 ",l.createElement(t.code,null,"createPage()")," 함수 안에 아래 내용을 적당히 끼워넣으면 된다."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-ts"},'// gatsby-node.ts\nimport { GatsbyNode } from "gatsby";\nimport path from "path";\n\ntype TagGroupsQueryData = {\n  tagsGroup: {\n    group: {\n      fieldValue: string;\n    }[];\n  };\n};\n\nexport const createPages: GatsbyNode["createPages"] = async ({\n  actions,\n  graphql,\n  reporter,\n}) => {\n  const result = await graphql<TagGroupsQueryData>(`\n    {\n      tagsGroup: allMdx(limit: 2000) {\n        group(field: { frontmatter: { tags: SELECT } }) {\n          fieldValue\n        }\n      }\n    }\n  `);\n\n  if (result.errors || !result.data) {\n    reporter.panicOnBuild(`Error while running GraphQL query.`);\n    return;\n  }\n\n  const tagsTemplatePath = path.resolve(\n    "src/templates/TagDetailPageTemplate.tsx"\n  );\n\n  result.data.tagsGroup.group.forEach((tag) => {\n    actions.createPage({\n      path: `/tags/${tag.fieldValue}/`,\n      component: tagsTemplatePath,\n      context: { tag: tag.fieldValue },\n    });\n  });\n};\n')),"\n",l.createElement(t.h2,null,"2.4. 태그 목록 페이지 추가"),"\n",l.createElement(t.p,null,"태그 목록 페이지를 추가하자."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-tsx"},'// src/pages/tags/index.tsx\nimport * as React from "react";\nimport { graphql, Link, PageProps } from "gatsby";\nimport Layout from "../../components/Layout";\nimport Seo from "../../components/Seo";\n\ntype TagsPageData = {\n  allMdx: {\n    group: {\n      totalCount: number;\n      fieldValue: string;\n    }[];\n  };\n};\nconst TagsPage = ({ data }: PageProps<TagsPageData>) => {\n  const tags = data.allMdx.group.sort((a, b) => b.totalCount - a.totalCount);\n  return (\n    <Layout>\n      <h1>tags</h1>\n      <ul>\n        {tags.map((tag) => (\n          <li key={tag.fieldValue}>\n            <Link to={`/tags/${tag.fieldValue}/`}>{`${tag.fieldValue}`}</Link>{" "}\n            <small>{`${tag.totalCount}`}</small>\n          </li>\n        ))}\n      </ul>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query {\n    allMdx(limit: 2000) {\n      group(field: { frontmatter: { tags: SELECT } }) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`;\n\nexport const Head = () => <Seo title="태그 목록" />;\n\nexport default TagsPage;\n')),"\n",l.createElement(t.p,null,l.createElement(t.code,null,"graphql")," 쿼리에서 바로 totalCount 로 정렬하고 싶었지만 (GraphQL 을 잘 몰라서) 방법을 찾지 못했다. 대신 ",l.createElement(t.code,null,"TagsPage")," 컴포넌트 첫번째 줄에서 ",l.createElement(t.code,null,".sort()")," 를 사용해 정렬하고 있다."),"\n",l.createElement(t.h1,null,"3. 다음"),"\n",l.createElement(t.p,null,"다음 글에서는 글 내용 안에 이미지를 삽입하는 방법을 정리한다."))}var o,s=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,a.ah)(),e.components);return t?l.createElement(t,e,l.createElement(r,e)):r(e)},c=n(1880),m=n(1883),u=n(3723),g=n(1858),p=n(3904),i=n(891),d=n(5534);const E=e=>{let{data:t,children:n}=e;const{title:a,date:r,tags:o,heroImage:s,heroImageAlt:c}=t.mdx.frontmatter,p=s?(0,u.c)(s):null;return l.createElement(g.Z,null,l.createElement("h1",null,a),l.createElement(h,null,o.map((e=>l.createElement("li",{key:e},l.createElement(m.rU,{to:"/tags/"+e},e))))),l.createElement("div",null,r),!!p&&l.createElement(u.G,{image:p,alt:null!=c?c:""}),l.createElement(d.Z,null,n))},h=i.ZP.ul(o||(o=(0,c.Z)(["\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: ","px;\n\n  margin: 0;\n  padding: 0;\n  list-style: none;\n\n  > li {\n    padding: ","px ","px\n      0px;\n    border-radius: 2px;\n\n    background-color: ",";\n    color: ",";\n\n    > a {\n      text-decoration: none;\n    }\n  }\n"])),(e=>e.theme.dimens.gutter),(e=>e.theme.dimens.thin),(e=>e.theme.dimens.gutter),(e=>e.theme.colors.tag),(e=>e.theme.colors.onTag)),f=e=>{var t,n;let{data:a}=e;const{frontmatter:{title:r,slug:o,tags:s,heroImage:c},excerpt:m}=a.mdx,g=c?(0,u.c)(c):null;return l.createElement(p.Z,{title:r,description:m,path:"posts/"+o,thumbnail:null==g||null===(t=g.images)||void 0===t||null===(n=t.fallback)||void 0===n?void 0:n.src,keywords:s,ogType:"article"})};function y(e){return l.createElement(E,e,l.createElement(s,e))}}}]);
//# sourceMappingURL=component---src-pages-posts-mdx-frontmatter-slug-tsx-content-file-path-users-kangseong-workspace-private-ricalelog-posts-2023-230111-gatsby-1-index-mdx-ef4ca3bf3ab2ae431f3f.js.map