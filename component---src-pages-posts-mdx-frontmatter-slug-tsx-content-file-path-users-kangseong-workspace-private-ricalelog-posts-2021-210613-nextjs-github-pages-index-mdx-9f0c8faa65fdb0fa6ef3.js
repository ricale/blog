"use strict";(self.webpackChunkricalelog=self.webpackChunkricalelog||[]).push([[6594],{459:function(e,a,n){n.r(a),n.d(a,{Head:function(){return A},default:function(){return H}});var t=n(1151),l=n(7294);function s(e){const a=Object.assign({div:"div",p:"p",a:"a",h2:"h2",code:"code",button:"button",h3:"h3",ol:"ol",li:"li",ul:"ul"},(0,t.ah)(),e.components);return l.createElement(l.Fragment,null,l.createElement(a.div,{className:"md"},l.createElement(a.p,null,"간단한 프로토타이핑 공유를 위해, Next.js로 구현한 웹앱을 GitHub Pages에 배포하기로 했다."),l.createElement(a.p,null,l.createElement(a.a,{href:"https://taeny.dev/javascript/nextjs-with-deployment-platform/#3-netlify-vs-vercel"},"nextJS 뭘로 배포할까? (Netlify, Vercel, Github page)")," 문서를 보면 GitHub Pages는 물론이고 Netlify, Vercel 을 사용해 배포하는 방법과, 플랫폼간의 장단점까지 비교해 놓았다. 세 플랫폼에 모두 관심이 있다면 해당 글을 읽기를 권한다."),l.createElement(a.p,null,"이 글에서는 해당 글의 내용을 토대로 GitHub Pages에 배포하는 방법만 간략히 정리한다."),l.createElement(a.h2,{id:"1-배포-방법",style:{position:"relative"}},l.createElement(a.a,{href:"#1-%EB%B0%B0%ED%8F%AC-%EB%B0%A9%EB%B2%95","aria-label":"1 배포 방법 permalink",className:"anchor before"},l.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"1. 배포 방법"),l.createElement(a.p,null,l.createElement(a.a,{href:"https://taeny.dev/javascript/nextjs-with-deployment-platform/#5--github-page-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0"},"위 문서"),"에서는 아래의 명령어를 ",l.createElement(a.code,null,"package.json"),"에 등록해놓고 사용하라고 안내하고 있다."),l.createElement(a.div,{className:"codeblock-container"},l.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token string-property property">"deploy"</span><span class="token operator">:</span> <span class="token string">"rm -rf node_modules/.cache &amp;&amp; next build &amp;&amp; next export &amp;&amp; touch out/.nojekyll &amp;&amp; git add out/ &amp;&amp; git commit -m \\"Deploy Next.js to gh-pages\\" &amp;&amp; git subtree push --prefix out origin gh-pages"</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></div>'}}),l.createElement(a.button,{className:"codeblock-copy-button"},"COPY")),l.createElement(a.p,null,"명령어를 하나하나 살펴보면 아래와 같다."),l.createElement(a.div,{className:"codeblock-container"},l.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> node_modules/.cache\nnext build\nnext <span class="token builtin class-name">export</span>\n<span class="token function">touch</span> out/.nojekyll\n<span class="token function">git</span> <span class="token function">add</span> out/\n<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Deploy Next.js to gh-pages"</span>\n<span class="token function">git</span> subtree push <span class="token parameter variable">--prefix</span> out origin gh-pages</code></pre></div>'}}),l.createElement(a.button,{className:"codeblock-copy-button"},"COPY")),l.createElement(a.p,null,"(각 명령어에 관한 설명은 ",l.createElement(a.a,{href:"https://taeny.dev/javascript/nextjs-with-deployment-platform/#5--github-page-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0"},"원 문서"),"에 잘 되어있으므로 여기서는 생략하겠다.)"),l.createElement(a.p,null,"대부분의 경우 위 명령어를 그대로 써도 문제가 없겠지만, 개인적으로는 이슈가 몇 개 있었다."),l.createElement(a.h2,{id:"2-이슈",style:{position:"relative"}},l.createElement(a.a,{href:"#2-%EC%9D%B4%EC%8A%88","aria-label":"2 이슈 permalink",className:"anchor before"},l.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"2. 이슈"),l.createElement(a.h3,{id:"21-빌드-결과물을-git-스테이지에-추가",style:{position:"relative"}},l.createElement(a.a,{href:"#21-%EB%B9%8C%EB%93%9C-%EA%B2%B0%EA%B3%BC%EB%AC%BC%EC%9D%84-git-%EC%8A%A4%ED%85%8C%EC%9D%B4%EC%A7%80%EC%97%90-%EC%B6%94%EA%B0%80","aria-label":"21 빌드 결과물을 git 스테이지에 추가 permalink",className:"anchor before"},l.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"2.1. 빌드 결과물을 git 스테이지에 추가"),l.createElement(a.p,null,"위에서는 ",l.createElement(a.code,null,"git add out/")," 명령어를 통해 빌드한 결과물을 git의 스테이지에 추가한다. 하지만 일반적인 Next.js 프로젝트에서 ",l.createElement(a.code,null,"out/")," 디렉토리는 ",l.createElement(a.code,null,".gitignore"),"에 등록되어있기 때문에, 해당 명령어로는 스테이지에 추가되지 않는다."),l.createElement(a.p,null,"해결 방법은 해당 디렉토리를 ",l.createElement(a.code,null,".gitignore"),"에서 제외시키거나 ",l.createElement(a.code,null,"-f")," 옵션을 주어서 ",l.createElement(a.code,null,".gitignore"),"와 관계 없이 강제로 추가시키는 것이다."),l.createElement(a.p,null,"여기서는 ",l.createElement(a.code,null,"-f")," 옵션을 사용한다. 왜냐면 빌드할 때만 ",l.createElement(a.code,null,"out/")," 디렉토리를 스테이지에 포함시키고, 빌드 후에는 삭제할 생각이기 때문이다."),l.createElement(a.h3,{id:"22-커밋-및-푸시",style:{position:"relative"}},l.createElement(a.a,{href:"#22-%EC%BB%A4%EB%B0%8B-%EB%B0%8F-%ED%91%B8%EC%8B%9C","aria-label":"22 커밋 및 푸시 permalink",className:"anchor before"},l.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"2.2. 커밋 및 푸시"),l.createElement(a.p,null,"위 문서에서는 아래 명령어를 사용해 빌드 결과를 커밋하고 푸시한다."),l.createElement(a.div,{className:"codeblock-container"},l.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Deploy Next.js to gh-pages"</span>\n<span class="token function">git</span> subtree push <span class="token parameter variable">--prefix</span> out origin gh-pages</code></pre></div>'}}),l.createElement(a.button,{className:"codeblock-copy-button"},"COPY")),l.createElement(a.p,null,"이 경우 ",l.createElement(a.code,null,"out/")," 디렉토리의 내용물을 ",l.createElement(a.code,null,"main"),"(혹은 ",l.createElement(a.code,null,"master"),") 브랜치에 계속 유지해야 한다. ",l.createElement(a.code,null,"out/")," 디렉토리 내용을 git 에서 계속 유지할 것이라면 문제 없다. 하지만 내 경우 ",l.createElement(a.code,null,"out/")," 디렉토리의 내용을 ",l.createElement(a.code,null,"main")," 브랜치에 유지하고 싶지 않았다. (유지하지 않는 편이 히스토리 관리에 더 좋다고 생각했다.) 내가 원하는 프로세스는 아래와 같다."),l.createElement(a.ol,null,"\n",l.createElement(a.li,null,"git 스테이지에 임시로 ",l.createElement(a.code,null,"out/")," 디렉토리를 추가하고 커밋한다."),"\n",l.createElement(a.li,null,"해당 커밋을 가지고 ",l.createElement(a.code,null,"gh-pages")," 브랜치에 배포를 진행한다. (배포하면 ",l.createElement(a.code,null,"gh-pages")," 브랜치에 커밋이 새로 생성될 것이다.)"),"\n",l.createElement(a.li,null,"배포가 끝난 후 1번에서 추가했던 커밋을 삭제한다."),"\n"),l.createElement(a.p,null,"그럼 원하는 방향이 적용되게끔 명령어를 변경해보자."),l.createElement(a.div,{className:"codeblock-container"},l.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell"><span class="token comment"># temp-for-deploy-gh-pages 브랜치를 생성한다.</span>\n<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> temp-for-deploy-gh-pages\n\n<span class="token comment"># 생성한 브랜치에 `out/` 디렉토리가 포함된 내용을 커밋한다.</span>\n<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Deploy Next.js to gh-pages"</span>\n\n<span class="token comment"># 해당 커밋을 사용해 `out/` 디렉토리만으로 로컬의 gh-pages 브랜치에 새로운 커밋을 만든다.</span>\n<span class="token function">git</span> subtree <span class="token function">split</span> <span class="token parameter variable">--prefix</span> out <span class="token parameter variable">-b</span> gh-pages\n\n<span class="token comment"># 로컬의 gh-pages를 강제로 gh-pages 에 푸시한다.</span>\n<span class="token function">git</span> push <span class="token parameter variable">-f</span> origin gh-pages:gh-pages\n\n<span class="token comment"># 로컬의 gh-pages 브랜치를 삭제한다.</span>\n<span class="token function">git</span> branch <span class="token parameter variable">-D</span> gh-pages\n\n<span class="token comment"># temp-for-deploy-gh-pages 브랜치를 삭제한다.</span>\n<span class="token function">git</span> checkout main\n<span class="token function">git</span> branch <span class="token parameter variable">-D</span> temp-for-deploy-gh-pages</code></pre></div>'}}),l.createElement(a.button,{className:"codeblock-copy-button"},"COPY")),l.createElement(a.p,null,l.createElement(a.code,null,"gh-pages"),"를 강제로 푸시하는 이유는 이미 원격에 ",l.createElement(a.code,null,"gh-pages")," 브랜치가 있을 경우, 새로운 커밋이 원격에 있는 기존의 커밋과 이어지지 않는 커밋이기 때문이다. (",l.createElement(a.code,null,"gh-pages"),"에 추가되는 커밋의 부모 커밋이 ",l.createElement(a.code,null,"main")," 브랜치 쪽에 유지되면, 이어지는 커밋으로 판단된다.)"),l.createElement(a.h2,{id:"3-이슈-해결-결과",style:{position:"relative"}},l.createElement(a.a,{href:"#3-%EC%9D%B4%EC%8A%88-%ED%95%B4%EA%B2%B0-%EA%B2%B0%EA%B3%BC","aria-label":"3 이슈 해결 결과 permalink",className:"anchor before"},l.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"3. 이슈 해결 결과"),l.createElement(a.div,{className:"codeblock-container"},l.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> node_modules/.cache\nnext build\nnext <span class="token builtin class-name">export</span>\n<span class="token function">touch</span> out/.nojekyll\n<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-f</span> out/\n<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> temp-for-deploy-gh-pages\n<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Deploy Next.js to gh-pages"</span>\n<span class="token function">git</span> subtree <span class="token function">split</span> <span class="token parameter variable">--prefix</span> out <span class="token parameter variable">-b</span> gh-pages\n<span class="token function">git</span> push <span class="token parameter variable">-f</span> origin gh-pages:gh-pages\n<span class="token function">git</span> branch <span class="token parameter variable">-D</span> gh-pages\n<span class="token function">git</span> checkout main\n<span class="token function">git</span> branch <span class="token parameter variable">-D</span> temp-for-deploy-gh-pages</code></pre></div>'}}),l.createElement(a.button,{className:"codeblock-copy-button"},"COPY")),l.createElement(a.p,null,"위 명령어들을 연달아 쓰면 Next.js 앱을 GitHub Pages에 배포할 수 있다. 매번 치기 귀찮을 것이므로 ",l.createElement(a.code,null,"package.json"),"에 등록해두고 사용하자."),l.createElement(a.div,{className:"codeblock-container"},l.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token string-property property">"deploy-gh-pages"</span><span class="token operator">:</span> <span class="token string">"rm -rf node_modules/.cache &amp;&amp; next build &amp;&amp; next export &amp;&amp; touch out/.nojekyll &amp;&amp; git add -f out/ &amp;&amp; git checkout -b temp-for-deploy-gh-pages &amp;&amp; git commit -m \\"Deploy Next.js to gh-pages\\" &amp;&amp; git subtree split --prefix out -b gh-pages &amp;&amp; git push -f origin gh-pages:gh-pages &amp;&amp; git branch -D gh-pages &amp;&amp; git checkout main &amp;&amp; git branch -D temp-for-deploy-gh-pages"</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></div>'}}),l.createElement(a.button,{className:"codeblock-copy-button"},"COPY")),l.createElement(a.h2,{id:"4-주의",style:{position:"relative"}},l.createElement(a.a,{href:"#4-%EC%A3%BC%EC%9D%98","aria-label":"4 주의 permalink",className:"anchor before"},l.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4. 주의"),l.createElement(a.ul,null,"\n",l.createElement(a.li,null,'위 내용은 어디까지나 "프로토타이핑 공유를 위한 GitHub Pages 배포"를 목적으로 하고 있다. 다른 목적으로 사용할 경우 적절하지 않을 수 있다.'),"\n",l.createElement(a.li,null,"환경변수와 관련된 내용은 이 문서에서 정리하지 않았다. 해당 내용은 ",l.createElement(a.a,{href:"https://taeny.dev/javascript/nextjs-with-deployment-platform/#5--github-page-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0"},"원 문서"),"에 잘 설명되어 있다."),"\n"),l.createElement(a.h2,{id:"references",style:{position:"relative"}},l.createElement(a.a,{href:"#references","aria-label":"references permalink",className:"anchor before"},l.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"References"),l.createElement(a.ul,null,"\n",l.createElement(a.li,null,l.createElement(a.a,{href:"https://taeny.dev/javascript/nextjs-with-deployment-platform/#3-netlify-vs-vercel"},"nextJS 뭘로 배포할까? (Netlify, Vercel, Github page)")),"\n",l.createElement(a.li,null,l.createElement(a.a,{href:"https://gist.github.com/tduarte/eac064b4778711b116bb827f8c9bef7b"},"tduarte/publish-ghpages.md")),"\n")),"\n",l.createElement(a.div,{className:"toc"},l.createElement(a.p,null,"목차"),l.createElement(a.ul,null,"\n",l.createElement(a.li,null,l.createElement(a.a,{href:"#1-%EB%B0%B0%ED%8F%AC-%EB%B0%A9%EB%B2%95"},"1. 배포 방법")),"\n",l.createElement(a.li,null,l.createElement(a.a,{href:"#2-%EC%9D%B4%EC%8A%88"},"2. 이슈"),"\n",l.createElement(a.ul,null,"\n",l.createElement(a.li,null,l.createElement(a.a,{href:"#21-%EB%B9%8C%EB%93%9C-%EA%B2%B0%EA%B3%BC%EB%AC%BC%EC%9D%84-git-%EC%8A%A4%ED%85%8C%EC%9D%B4%EC%A7%80%EC%97%90-%EC%B6%94%EA%B0%80"},"2.1. 빌드 결과물을 git 스테이지에 추가")),"\n",l.createElement(a.li,null,l.createElement(a.a,{href:"#22-%EC%BB%A4%EB%B0%8B-%EB%B0%8F-%ED%91%B8%EC%8B%9C"},"2.2. 커밋 및 푸시")),"\n"),"\n"),"\n",l.createElement(a.li,null,l.createElement(a.a,{href:"#3-%EC%9D%B4%EC%8A%88-%ED%95%B4%EA%B2%B0-%EA%B2%B0%EA%B3%BC"},"3. 이슈 해결 결과")),"\n",l.createElement(a.li,null,l.createElement(a.a,{href:"#4-%EC%A3%BC%EC%9D%98"},"4. 주의")),"\n",l.createElement(a.li,null,l.createElement(a.a,{href:"#references"},"References")),"\n")))}var c,r,o,p=function(e){void 0===e&&(e={});const{wrapper:a}=Object.assign({},(0,t.ah)(),e.components);return a?l.createElement(a,e,l.createElement(s,e)):s(e)},i=n(1880),m=n(1883),u=n(3723),g=n(6758),h=n(3904),d=n(891),E=n(3234),v=n(5777),f=n(7178),b=n(2889),k=n(5924),B=n(7466);function y(e){let{data:a,children:n}=e;const t=l.useRef(),{frontmatter:s,sameSeriesPosts:c}=a.mdx,{title:r,slug:o,date:p,tags:i,series:u,heroImage:h,heroImageAlt:d}=s;return l.useEffect((()=>{var e;const a=null===(e=t.current)||void 0===e?void 0:e.querySelectorAll(".md h1, .md h2, .md h3, .md h4, .md h5, .md h6"),n=new IntersectionObserver((()=>(0,k.Z)(t,a)),{rootMargin:"0px 0px -90% 0px",threshold:[0,1]});return null==a||a.forEach((e=>n.observe(e))),()=>n.disconnect()}),[]),l.createElement(g.Z,null,l.createElement(C,null,l.createElement("h1",null,l.createElement(m.Link,{to:"/posts/"+o},r)),l.createElement(x,null,p),l.createElement(b.Z,{tags:i})),l.createElement(f.Z,{name:u,data:c,current:o}),l.createElement(B.Z,{data:h,alt:d}),l.createElement(S,{ref:t},n),l.createElement(v.Z,null))}const C=d.ZP.div(c||(c=(0,i.Z)(["\n  margin: 60px 0 72px;\n  padding: 0 24px;\n\n  & > h1 {\n    font-size: 2.5rem;\n    word-break: keep-all;\n    margin: 0;\n\n    > a {\n      color: ",";\n    }\n  }\n"])),(e=>e.theme.colors.onBackground)),x=d.ZP.div(r||(r=(0,i.Z)(["\n  margin: 16px 0;\n"]))),S=(0,d.ZP)(E.Z)(o||(o=(0,i.Z)(["\n  margin-bottom: 60px;\n"]))),A=e=>{var a,n;let{data:t}=e;const{frontmatter:{title:s,slug:c,tags:r,heroImage:o,previewContent:p},excerpt:i}=t.mdx,m=o?(0,u.c)(o):null;return l.createElement(h.Z,{title:s,description:null!=p?p:i,path:"posts/"+c,thumbnail:null==m||null===(a=m.images)||void 0===a||null===(n=a.fallback)||void 0===n?void 0:n.src,keywords:r,ogType:"article"})};function H(e){return l.createElement(y,e,l.createElement(p,e))}}}]);
//# sourceMappingURL=component---src-pages-posts-mdx-frontmatter-slug-tsx-content-file-path-users-kangseong-workspace-private-ricalelog-posts-2021-210613-nextjs-github-pages-index-mdx-9f0c8faa65fdb0fa6ef3.js.map