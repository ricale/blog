{"version":3,"file":"component---src-pages-posts-mdx-frontmatter-slug-tsx-content-file-path-users-kangseong-workspace-private-blog-posts-2023-230405-algorithm-1-reverse-html-index-mdx-12b44f547e7ea5bec3aa.js","mappings":"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","sources":["webpack://ricalelog/./posts/2023/230405-algorithm-1-reverse-html/index.mdx","webpack://ricalelog/./src/pages/posts/{mdx.frontmatter__slug}.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    div: \"div\",\n    h3: \"h3\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    h1: \"h1\",\n    p: \"p\",\n    button: \"button\",\n    code: \"code\",\n    em: \"em\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.div, {\n    className: \"md\"\n  }, React.createElement(_components.h3, {\n    id: \"시리즈-알고리즘-문제풀기-개요\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%8B%9C%EB%A6%AC%EC%A6%88-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%AC%B8%EC%A0%9C%ED%92%80%EA%B8%B0-%EA%B0%9C%EC%9A%94\",\n    \"aria-label\": \"시리즈 알고리즘 문제풀기 개요 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"시리즈 \\\"알고리즘 문제풀기\\\" 개요\"), React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"1~2주 (최소) 1개 문제 풀기를 목표로 한다.\"), \"\\n\", React.createElement(_components.li, null, \"JavaScript 로 푼다.\"), \"\\n\"), React.createElement(_components.h1, {\n    id: \"문제\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EB%AC%B8%EC%A0%9C\",\n    \"aria-label\": \"문제 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"문제\"), React.createElement(_components.p, null, \"HTML 문자열이 아래와 같이 있을 때\"), React.createElement(_components.div, {\n    className: \"codeblock-container\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"html\\\"><pre class=\\\"language-html\\\"><code class=\\\"language-html\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>b</span><span class=\\\"token punctuation\\\">></span></span>h<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>font</span> <span class=\\\"token attr-name\\\">color</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>red<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>el<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>font</span><span class=\\\"token punctuation\\\">></span></span>lo<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>b</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>i</span><span class=\\\"token punctuation\\\">></span></span>w<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>i</span><span class=\\\"token punctuation\\\">></span></span>orld\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">></span></span></code></pre></div>\"\n    }\n  }), React.createElement(_components.button, {\n    className: \"codeblock-copy-button\"\n  }, \"COPY\")), React.createElement(_components.p, null, \"아래처럼 HTML 태그들의 적용 범위는 그대로 두면 문자열을 뒤집자.\"), React.createElement(_components.div, {\n    className: \"codeblock-container\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"html\\\"><pre class=\\\"language-html\\\"><code class=\\\"language-html\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">></span></span>\\n  dlro<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>i</span><span class=\\\"token punctuation\\\">></span></span>w<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>i</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>b</span><span class=\\\"token punctuation\\\">></span></span>ol<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>font</span> <span class=\\\"token attr-name\\\">color</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>red<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>le<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>font</span><span class=\\\"token punctuation\\\">></span></span>h<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>b</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">></span></span></code></pre></div>\"\n    }\n  }), React.createElement(_components.button, {\n    className: \"codeblock-copy-button\"\n  }, \"COPY\")), React.createElement(_components.p, null, \"반드시 전문은 특정 태그로 감싸여 있다고 (위 예제에서는 \", React.createElement(_components.code, null, \"p\"), \" 태그로 전문이 감싸여 있다) 가정한다.\"), React.createElement(_components.h1, {\n    id: \"접근\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%A0%91%EA%B7%BC\",\n    \"aria-label\": \"접근 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"접근\"), React.createElement(_components.p, null, \"처음에는 태그들을 임의의 토큰들로 치환한 다음에 문자열을 싹 뒤집고 다시 토큰들을 태그로 치환하는 방법을 생각했다. 하지만 그렇게 하기에는 \", React.createElement(_components.em, null, \"토큰은 뒤집어지지 않도록\"), \" 또 별도의 처리를 해줘야 했기에, 그냥 태그인 상태로 작업하는 것과 별다를 것이 없다는 결론을 내렸다. 게다가 토큰으로 변경하는 것으로는 태그가 많이 중첩될 경우 처리가 까다로웠다.\"), React.createElement(_components.p, null, \"그 다음으로 생각한 건 문자열을 태그 혹은 태그가 아닌 문자열로 모두 쪼갠 뒤, 해당 문자열을 차례로 스택에 넣다가 닫는 태그를 넣을 차례가 되었을 때 바로 직전 여는 태그까지 스택에서 pop 한 뒤 뒤집는 처리를 해서 집어넣으면 어떨까 하는 것이었다.\"), React.createElement(_components.p, null, \"예를 들면 문제에 나온 문자열을 아래처럼 쪼갠 뒤,\"), React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">&lt;p>\\n&lt;b>\\nh\\n&lt;font color=\\\"red\\\">\\nel\\n&lt;/font>\\nlo\\n&lt;/b>\\n&lt;i>\\nw\\n&lt;/i>\\norld\\n&lt;/p></code></pre></div>\"\n    }\n  }), React.createElement(_components.p, null, \"위부터 하나씩 스택에 넣다가 닫는 태그를 발견한 순간\"), React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">stack=[\\n  &lt;p>\\n  &lt;b>\\n  h\\n  &lt;font color=\\\"red\\\">\\n  el                    &lt;- 차례대로 스택에 밀어넣다가\\n]\\n\\n&lt;/font>   &lt;- 닫는 태그 발견\\nlo\\n&lt;/b>\\n// ...</code></pre></div>\"\n    }\n  }), React.createElement(_components.p, null, \"여는 태그까지 pop 해서 꺼낸 뒤 합쳐서 다시 스택에 넣는 것는다.\"), React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">stack=[\\n  &lt;p>\\n  &lt;b>\\n  he\\n  &lt;font color=\\\"red\\\">le&lt;/font>  &lt;- 여는 태그까지 스택에서 모두 pop 해와서 합친 뒤 다시 스택에 넣는다.\\n                                  내용물은 뒤집어서 넣는 것이 핵심\\n]\\no\\n&lt;/b>\\n&lt;i>\\nw\\n&lt;/i>\\norld\\n&lt;/p></code></pre></div>\"\n    }\n  }), React.createElement(_components.p, null, \"이 과정을 반복하면 되겠다 싶었다. 아직 디테일이 부족하지만 그건 풀면서 해결하자는 생각에 바로 코드 작성을 진행했다.\"), React.createElement(_components.h1, {\n    id: \"풀이\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%ED%92%80%EC%9D%B4\",\n    \"aria-label\": \"풀이 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"풀이\"), React.createElement(_components.p, null, \"결국 위 풀이 과정에서 생각한 것과 거의 동일한 방법으로 풀었다. 딱 하나 다른 것은 문자열을 바로 스택에 넣는 게 아니라 객체로 만들어 넣는 것이다. 이러면 들어간게 태그인지 문자열인지 이미 한 번 합쳐진 결과물인지 구분이 가능하고, 유연하게 합쳐나갈 수 있다.\"), React.createElement(_components.div, {\n    className: \"codeblock-container\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\"><pre style=\\\"counter-reset: linenumber 0\\\" class=\\\"language-javascript line-numbers\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">solution</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">html</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> stack <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>html<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 여는 태그인지 닫는 태그인지 관계 없이, 가장 앞의 태그 문자열을 찾는다.</span>\\n    <span class=\\\"token keyword\\\">const</span> tag <span class=\\\"token operator\\\">=</span> html<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">&lt;[^>]+></span><span class=\\\"token regex-delimiter\\\">/</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">?.</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// 태그 문자열이 없으면 반복문을 나간다.</span>\\n    <span class=\\\"token comment\\\">// 정상적인 입력이라면 이 조건에 해당될 일은 없다. 무조건 4 라인의 조건에 의해서만 while 문을 빠져나간다.</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>tag<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// 6 라인에서 찾은 tag 문자열이 html 에서 어디에 위치하는 지 찾는다.</span>\\n    <span class=\\\"token keyword\\\">const</span> tagIndex <span class=\\\"token operator\\\">=</span> html<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span>tag<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// 만약 위치가 0보다 크다면 태그 앞에 태그가 아닌 문자열이 존재한다는 뜻이다.</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>tagIndex <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 태그가 아닌 문자열을 스택에 넣는다.</span>\\n      <span class=\\\"token comment\\\">// 문자열의 경우에는 스택에 넣을 때 미리 뒤집어서 넣는다.</span>\\n      stack<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token literal-property property\\\">type</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"string\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token literal-property property\\\">content</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token function\\\">reverseString</span><span class=\\\"token punctuation\\\">(</span>html<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> tagIndex<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token comment\\\">// 스택에 넣은 문자열은 html 에서 제거한다.</span>\\n      html <span class=\\\"token operator\\\">=</span> html<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">(</span>tagIndex<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// tag 가 여는 태그인지 닫는 태그인지 확인한다.</span>\\n    <span class=\\\"token keyword\\\">const</span> tagType <span class=\\\"token operator\\\">=</span> tag<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">&lt;\\\\/</span><span class=\\\"token regex-delimiter\\\">/</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">\\\"close\\\"</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"open\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>tagType <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">\\\"open\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 여는 태그였다면 스택에 넣는다.</span>\\n      stack<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token literal-property property\\\">type</span><span class=\\\"token operator\\\">:</span> tagType<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token literal-property property\\\">content</span><span class=\\\"token operator\\\">:</span> tag <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 닫는 태그였다면 직전 여는 태그부터 이 태그까지 사이에 있는 컨텐츠들을 뒤집는다.</span>\\n      <span class=\\\"token comment\\\">// `reverseContent` 함수에 대한 자세한 설명은 43 라인을 보자.</span>\\n      <span class=\\\"token function\\\">reverseContent</span><span class=\\\"token punctuation\\\">(</span>stack<span class=\\\"token punctuation\\\">,</span> tag<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    html <span class=\\\"token operator\\\">=</span> html<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span>tag<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> stack<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>content<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 37 라인에서 넘어온다.</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">reverseContent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">stack<span class=\\\"token punctuation\\\">,</span> closeTag</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> contents <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 정상적인 stack 이라면 여는 태그가 무조건 하나 이상 존재하기 때문에</span>\\n  <span class=\\\"token comment\\\">// 54 라인 if 문에 걸려서 이 while 문을 빠져나가게 된다.</span>\\n  <span class=\\\"token comment\\\">// 따라서 while 문의 조건이 true 인 것은 문제 없다.</span>\\n  <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 스택에서 pop 한다.</span>\\n    <span class=\\\"token keyword\\\">const</span> item <span class=\\\"token operator\\\">=</span> stack<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pop</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// pop 한 아이템이 여는 태그였다면</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'open'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      stack<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token literal-property property\\\">type</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'contents'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token comment\\\">// 여태까지 pop 했던 아이템들을 모두 연결한다.</span>\\n        <span class=\\\"token comment\\\">// pop 할 때마다 contents 에 push 해두었기 때문에 .join('') 으로 연결만 해도</span>\\n        <span class=\\\"token comment\\\">// 자연스럽게 순서가 반대가 되어 합쳐진다.</span>\\n        <span class=\\\"token literal-property property\\\">content</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>item<span class=\\\"token punctuation\\\">.</span>content<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>contents<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>closeTag<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token comment\\\">// 그리고 while 문을 빠져나간다.</span>\\n      <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// pop 한 아이템이 여는 태그가 아니었다면 contents 에 아이템을 밀어넣는다.</span>\\n    contents<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">.</span>content<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">reverseString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">string</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> string<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code><span aria-hidden=\\\"true\\\" class=\\\"line-numbers-rows\\\" style=\\\"white-space: normal; width: auto; left: 0;\\\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\"\n    }\n  }), React.createElement(_components.button, {\n    className: \"codeblock-copy-button\"\n  }, \"COPY\")), React.createElement(_components.h1, {\n    id: \"후기\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%ED%9B%84%EA%B8%B0\",\n    \"aria-label\": \"후기 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"후기\"), React.createElement(_components.p, null, \"처음에는 평소에 본 적 없는 문제라 당황한데다가 쓸데없이 토큰에 꽂혀서 제대로 문제를 풀지 못했다. 잠시 문제를 치워뒀다가 다시 보니 쉬운 방법이 있었는데 돌아가고 있었다는 걸 깨달았고 빨리 해결할 수 있었다.\"), React.createElement(_components.p, null, \"따라서 오늘의 교훈은 \\\"안 풀릴 때는 잠시 딴 일을 하다 돌아오자.\\\" ...물론 시험이나 기술 면접 같은 곳에서는 안 통할 이야기긴 하다.\")), \"\\n\", React.createElement(_components.div, {\n    className: \"toc\"\n  }, React.createElement(_components.p, null, \"목차\"), React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"#%EC%8B%9C%EB%A6%AC%EC%A6%88-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%AC%B8%EC%A0%9C%ED%92%80%EA%B8%B0-%EA%B0%9C%EC%9A%94\"\n  }, \"시리즈 \\\"알고리즘 문제풀기\\\" 개요\")), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"#%EB%AC%B8%EC%A0%9C\"\n  }, \"문제\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"#%EC%A0%91%EA%B7%BC\"\n  }, \"접근\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"#%ED%92%80%EC%9D%B4\"\n  }, \"풀이\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"#%ED%9B%84%EA%B8%B0\"\n  }, \"후기\")), \"\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/kangseong/workspace/private/blog/posts/2023/230405-algorithm-1-reverse-html/index.mdx\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nvar _templateObject, _templateObject2, _templateObject3;\nimport * as React from \"react\";\nimport {Link} from \"gatsby\";\nimport {getImage} from \"gatsby-plugin-image\";\nimport Layout from \"../../components/Layout\";\nimport Seo from \"../../components/Seo\";\nimport styled from \"../../themes\";\nimport MdxContent from \"../../components/MdxContent\";\nimport NearbySeriesPostLinks from \"../../components/NearbySeriesPostLinks\";\nimport Comments from \"../../components/Comments\";\nimport SameSeriesPosts from \"../../components/SameSeriesPosts\";\nimport highlightCurrentHeading from \"../../utils/highlightCurrentHeading\";\nimport ScrollToEndButton from \"../../components/ScrollToEndButton\";\nfunction PostDetailPage(_ref) {\n  let {data, children} = _ref;\n  const ref = React.useRef();\n  const {frontmatter, sameSeriesPosts} = data.mdx;\n  const {title, slug, date, series} = frontmatter;\n  React.useEffect(() => {\n    var _ref$current;\n    const headingElements = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.querySelectorAll(\".md h1, .md h2, .md h3, .md h4, .md h5, .md h6\");\n    const observer = new IntersectionObserver(() => highlightCurrentHeading(ref, headingElements), {\n      rootMargin: \"0px 0px -90% 0px\",\n      threshold: [0, 1.0]\n    });\n    headingElements === null || headingElements === void 0 ? void 0 : headingElements.forEach(element => observer.observe(element));\n    return () => observer.disconnect();\n  }, []);\n  return React.createElement(Layout, null, React.createElement(Header, null, React.createElement(\"h1\", null, React.createElement(Link, {\n    to: \"/posts/\" + slug\n  }, title)), React.createElement(WrittenDate, null, date)), React.createElement(SameSeriesPosts, {\n    name: series,\n    data: sameSeriesPosts,\n    current: slug\n  }), React.createElement(PostContent, {\n    ref: ref\n  }, children), React.createElement(NearbySeriesPostLinks, {\n    data: sameSeriesPosts,\n    current: slug\n  }), React.createElement(ScrollToEndButton, null), React.createElement(Comments, null));\n}\nconst Header = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  margin: 72px 0 84px;\\n  padding: 0 32px;\\n\\n  & > h1 {\\n    font-size: 2.5rem;\\n    word-break: keep-all;\\n    margin: 0;\\n\\n    > a {\\n      color: \", \";\\n    }\\n  }\\n\"])), p => p.theme.colors.onBackground);\nconst WrittenDate = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n  margin-left: 2px;\\n\"])));\nconst PostContent = styled(MdxContent)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose([\"\\n  margin-bottom: 120px;\\n\"])));\nconst query = \"2677585968\";\nexport const Head = _ref2 => {\n  var _image$images, _image$images$fallbac;\n  let {data} = _ref2;\n  const {frontmatter: {title, slug, tags, heroImage, previewContent}, excerpt} = data.mdx;\n  const image = heroImage ? getImage(heroImage) : null;\n  return React.createElement(Seo, {\n    title: title,\n    description: previewContent !== null && previewContent !== void 0 ? previewContent : excerpt,\n    path: \"posts/\" + slug,\n    thumbnail: image === null || image === void 0 ? void 0 : (_image$images = image.images) === null || _image$images === void 0 ? void 0 : (_image$images$fallbac = _image$images.fallback) === null || _image$images$fallbac === void 0 ? void 0 : _image$images$fallbac.src,\n    keywords: tags,\n    ogType: \"article\"\n  });\n};\nPostDetailPage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostDetailPage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","div","h3","a","ul","li","h1","p","button","code","em","_provideComponents","components","React","className","id","style","position","href","dangerouslySetInnerHTML","__html","_templateObject","_templateObject2","_templateObject3","wrapper","MDXLayout","PostDetailPage","_ref","data","children","ref","frontmatter","sameSeriesPosts","mdx","title","slug","date","series","_ref$current","headingElements","current","querySelectorAll","observer","IntersectionObserver","highlightCurrentHeading","rootMargin","threshold","forEach","element","observe","disconnect","Layout","Header","Link","to","WrittenDate","SameSeriesPosts","name","PostContent","NearbySeriesPostLinks","ScrollToEndButton","Comments","styled","_taggedTemplateLiteralLoose","theme","colors","onBackground","MdxContent","Head","_ref2","_image$images","_image$images$fallbac","tags","heroImage","previewContent","excerpt","image","getImage","Seo","description","path","thumbnail","images","fallback","src","keywords","ogType","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}