{"version":3,"file":"component---src-pages-posts-mdx-frontmatter-slug-tsx-content-file-path-users-kangseong-workspace-private-blog-posts-2023-230420-algorithm-2-multiply-strings-index-mdx-3c7d2d2189ced06a1db4.js","mappings":"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","sources":["webpack://ricalelog/./posts/2023/230420-algorithm-2-multiply-strings/index.mdx","webpack://ricalelog/./src/pages/posts/{mdx.frontmatter__slug}.tsx","webpack://ricalelog/./src/components/Comments.tsx","webpack://ricalelog/./src/components/MdxContent/blockquoteCss.ts","webpack://ricalelog/./src/components/MdxContent/codeblockCss.ts","webpack://ricalelog/./src/components/MdxContent/headingCss.ts","webpack://ricalelog/./src/components/MdxContent/imageCss.ts","webpack://ricalelog/./src/components/MdxContent/listCss.ts","webpack://ricalelog/./src/components/MdxContent/tableCss.ts","webpack://ricalelog/./src/components/MdxContent/tocCss.ts","webpack://ricalelog/./src/components/MdxContent/index.tsx","webpack://ricalelog/./src/components/NearbySeriesPostLinks/NearbyPostLink.tsx","webpack://ricalelog/./src/components/NearbySeriesPostLinks/index.tsx","webpack://ricalelog/./src/components/SameSeriesPosts.tsx","webpack://ricalelog/./src/utils/highlightCurrentHeading.ts","webpack://ricalelog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    div: \"div\",\n    h3: \"h3\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    button: \"button\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.div, {\n    className: \"md\"\n  }, React.createElement(_components.h3, {\n    id: \"시리즈-알고리즘-문제풀기-개요\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%8B%9C%EB%A6%AC%EC%A6%88-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%AC%B8%EC%A0%9C%ED%92%80%EA%B8%B0-%EA%B0%9C%EC%9A%94\",\n    \"aria-label\": \"시리즈 알고리즘 문제풀기 개요 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"시리즈 \\\"알고리즘 문제풀기\\\" 개요\"), React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"1~2주 (최소) 1개 문제 풀기를 목표로 한다.\"), \"\\n\", React.createElement(_components.li, null, \"JavaScript 로 푼다.\"), \"\\n\"), React.createElement(_components.h1, {\n    id: \"문제\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EB%AC%B8%EC%A0%9C\",\n    \"aria-label\": \"문제 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"문제\"), React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://leetcode.com/problems/multiply-strings/\"\n  }, \"LeetCode - 43. Multiply Strings\")), React.createElement(_components.p, null, \"문자열로 표현된 두 개의 숫자를 \", React.createElement(_components.code, null, \"num1\"), \", \", React.createElement(_components.code, null, \"num2\"), \" 를 곱해서 결과를 반환하자.\"), React.createElement(_components.p, null, \"숫자는 최소 1자리에서 최대 200자리까지 가능하다. \", React.createElement(_components.code, null, \"BigInt\"), \" 같은 내장 라이브러리는 쓰면 안 된다.\"), React.createElement(_components.h1, {\n    id: \"접근\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%A0%91%EA%B7%BC\",\n    \"aria-label\": \"접근 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"접근\"), React.createElement(_components.p, null, \"실제로 곱셈을 할 때와 동일하게 생각해보았다. 보통 세 자리 수 두 개를 곱한다고 하면 아래처럼 계산한다.\"), React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">  123\\nx 456\\n-----\\n  738\\n 615\\n492\\n-----\\n56088</code></pre></div>\"\n    }\n  }), React.createElement(_components.p, null, \"한 숫자에 자랏수마다 다른 한 숫자를 곱한 뒤 곱한 결과를 합하는 것이다. 이걸 코드로 그대로 구현하면 되겠다 싶었다.\"), React.createElement(_components.h1, {\n    id: \"풀이-1\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%ED%92%80%EC%9D%B4-1\",\n    \"aria-label\": \"풀이 1 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"풀이 1\"), React.createElement(_components.div, {\n    className: \"codeblock-container\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre style=\\\"counter-reset: linenumber 0\\\" class=\\\"language-js line-numbers\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">multiply</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">num1<span class=\\\"token punctuation\\\">,</span> num2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 둘 중 하나라도 \\\"0\\\" 이라면 바로 결과를 반환한다.</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>num1 <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>num2 <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// 곱셈을 편하게 하기 위해 두 숫자를 배열로 만든뒤 뒤집는다.</span>\\n  <span class=\\\"token comment\\\">// 뒤집는 건 사실 필수가 아니지만, 인덱스를 좀 더 편하게 생각하려고 뒤집었다.</span>\\n  <span class=\\\"token keyword\\\">const</span> a1 <span class=\\\"token operator\\\">=</span> num1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> a2 <span class=\\\"token operator\\\">=</span> num2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">let</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> j <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> a2<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// (`num1` * `num2` 의 j 번째 숫자) 의 결과를 얻는다.</span>\\n    <span class=\\\"token comment\\\">// `getMultiplyWithOneDigit` 함수의 코드는 26 라인에 나온다.</span>\\n    <span class=\\\"token keyword\\\">const</span> subResult <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getMultiplyWithOneDigit</span><span class=\\\"token punctuation\\\">(</span>a1<span class=\\\"token punctuation\\\">,</span> a2<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> j<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// 결과값에 `subResult` 값을 합산한다.</span>\\n    <span class=\\\"token comment\\\">// `addTo` 함수의 코드는 59 라인에 나온다.</span>\\n    <span class=\\\"token function\\\">addTo</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">,</span> subResult<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// 결과를 반환한다.</span>\\n  <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// a1 과 n 을 곱한다. (digit 는 n 이 a2 의 몇 번째 자릿수였는지 알려주는 값.)</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">getMultiplyWithOneDigit</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">a1<span class=\\\"token punctuation\\\">,</span> n<span class=\\\"token punctuation\\\">,</span> digit</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 곱하려는 값이 \\\"0\\\" 이면 \\\"0\\\" 을 바로 반환한다.</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// `n` 의 자릿수만큼 \\\"0\\\"으로 채운다.</span>\\n  <span class=\\\"token comment\\\">// 예를 들어 `a1` 이 \\\"123\\\" 이고 `n` 이 \\\"456\\\" 중에 \\\"4\\\" 였다고 하면</span>\\n  <span class=\\\"token comment\\\">// 두 수의 곱의 결과는 \\\"492\\\" 지만, `n` 이 백의 자리 숫자였으므로</span>\\n  <span class=\\\"token comment\\\">// 결과에 합산하기 편하게 \\\"49200\\\" 으로 만들어준 것.</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Array</span><span class=\\\"token punctuation\\\">(</span>digit<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fill</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// `a1` 의 자릿수 별로 `n` 을 곱한다.</span>\\n  <span class=\\\"token comment\\\">// 곱한 결과가 10 이상이면 (결과 % 10) 만 저장하고</span>\\n  <span class=\\\"token comment\\\">// (결과 / 10) 은 다음 자릿수로 넘긴다.</span>\\n  <span class=\\\"token keyword\\\">let</span> more <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> a1<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> multiplied <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">+</span>a1<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token operator\\\">+</span>n <span class=\\\"token operator\\\">+</span> more<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> subResult <span class=\\\"token operator\\\">=</span> multiplied <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\n    result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>subResult<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    more <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>multiplied <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// 다 곱했는데도 `more` 에 값이 있다는 것은 최종 자릿수의 곱셈 결과가</span>\\n  <span class=\\\"token comment\\\">// 10 이상이었다는 뜻이다. 그렇다면 해당 값도 밀어넣어주자.</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>more <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>more<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// `result` 와 `adding` 을 더한다.</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">addTo</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">result<span class=\\\"token punctuation\\\">,</span> adding</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 더하려는 값 `adding` 이 \\\"0\\\" 이면 더해봤자 결과가 같으므로 바로 종료한다.</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>adding<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">&amp;&amp;</span> adding<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> more <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// `result` 와 `adding\\\" 을 자릿수별로 차례차례 더해서</span>\\n  <span class=\\\"token comment\\\">// 다시 `result` 에 넣는다.</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">&lt;</span> result<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">&lt;</span> adding<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> added <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">+</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">??</span> <span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token operator\\\">+</span><span class=\\\"token punctuation\\\">(</span>adding<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">??</span> <span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> more<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// (더한 결과 % 10) 만 현재 자릿수 값에 반영하고</span>\\n    <span class=\\\"token comment\\\">// (더한 결과 / 10) 은 다음 자릿수에 넘긴다.</span>\\n    result<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>added <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">10</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">;</span>\\n    more <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>added <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// 덧셈을 다 끝냈는데 `more` 에 값이 남았다면 해당 값은 맨 앞자리에 붙여준다.</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>more <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>more<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// `result` 에 결과를 바로 반영했으므로 값을 따로 반환할 필요는 없다.</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code><span aria-hidden=\\\"true\\\" class=\\\"line-numbers-rows\\\" style=\\\"white-space: normal; width: auto; left: 0;\\\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\"\n    }\n  }), React.createElement(_components.button, {\n    className: \"codeblock-copy-button\"\n  }, \"COPY\")), React.createElement(_components.h1, {\n    id: \"개선점\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EA%B0%9C%EC%84%A0%EC%A0%90\",\n    \"aria-label\": \"개선점 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"개선점\"), React.createElement(_components.p, null, \"위 코드도 문제 없이 동작한다. 하지만 개선점이 존재한다.\"), React.createElement(_components.p, null, \"첫째로 숫자를 뒤집을 필요가 없다. 이건 순전히 생각하기 편하려고 뒤집었던 것이었고, 뒤집지 않아도 곱하는 데 문제가 없다.\"), React.createElement(_components.p, null, \"둘째로 현재는 숫자를 자릿수 별로 곱한 뒤에, 곱한 값을 결과에 합산하고 있는데 이렇게 할 필요가 없다. 곱하면서 바로바로 결과에 합산해도 되기 때문이다. 이러면 코드가 더 단순해지고 불필요한 반복문도 제거할 수 있다.\"), React.createElement(_components.p, null, \"그럼 이제 개선해보자.\"), React.createElement(_components.h1, {\n    id: \"풀이-2\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%ED%92%80%EC%9D%B4-2\",\n    \"aria-label\": \"풀이 2 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"풀이 2\"), React.createElement(_components.div, {\n    className: \"codeblock-container\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre style=\\\"counter-reset: linenumber 0\\\" class=\\\"language-js line-numbers\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">multiply</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">num1<span class=\\\"token punctuation\\\">,</span> num2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>num1 <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>num2 <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// - num1 * num2 의 결과값의 길이는</span>\\n  <span class=\\\"token comment\\\">//   최소 num1.length + num2.length - 1</span>\\n  <span class=\\\"token comment\\\">//   최대 num1.length + num2.length</span>\\n  <span class=\\\"token comment\\\">// - 최대 길이만큼 결과 배열을 미리 만들어서 0으로 채워두었다.</span>\\n  <span class=\\\"token keyword\\\">const</span> resArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Array</span><span class=\\\"token punctuation\\\">(</span>num1<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fill</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> num1<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> j <span class=\\\"token operator\\\">=</span> num2<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// i 번째 숫자와 j 번째 숫자를 곱한 값은 결과값의 i + j + 1 번째에 반영된다.</span>\\n      <span class=\\\"token keyword\\\">const</span> curr <span class=\\\"token operator\\\">=</span> i <span class=\\\"token operator\\\">+</span> j <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n\\n      <span class=\\\"token comment\\\">// 두 숫자를 곱한 뒤 현재 결과 자릿수의 값과 합산한다.</span>\\n      <span class=\\\"token keyword\\\">const</span> multiplied <span class=\\\"token operator\\\">=</span> resArr<span class=\\\"token punctuation\\\">[</span>curr<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token operator\\\">+</span>num1<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token operator\\\">+</span>num2<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token comment\\\">// 값이 10 이상이면 10을 나눈 나머지만 해당 자릿수에 반영한다.</span>\\n      resArr<span class=\\\"token punctuation\\\">[</span>curr<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> multiplied <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token comment\\\">// 값을 10으로 나눈 값을 바로 윗자릿수에 합산한다.</span>\\n      resArr<span class=\\\"token punctuation\\\">[</span>curr <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>multiplied <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// 결과 배열을 문자열로 만든다.</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> resArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// - 만약 첫 자릿수의 값이 0이라면 쓸모 없는 값이므로 해당 값을 잘라낸다.</span>\\n  <span class=\\\"token comment\\\">// - 왜 첫 자릿수의 값이 0인 경우가 생기냐면</span>\\n  <span class=\\\"token comment\\\">//   최대 자릿수 num1.length + num2.length 만큼 미리 0을 채워놨기 때문이다.</span>\\n  <span class=\\\"token comment\\\">//   결과가 최소 자릿수 num1.length + num2.length - 1 일 경우 첫 번째 자릿수는 0으로 남게 된다.</span>\\n  <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">\\\"0\\\"</span> <span class=\\\"token operator\\\">?</span> result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">:</span> result<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code><span aria-hidden=\\\"true\\\" class=\\\"line-numbers-rows\\\" style=\\\"white-space: normal; width: auto; left: 0;\\\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\"\n    }\n  }), React.createElement(_components.button, {\n    className: \"codeblock-copy-button\"\n  }, \"COPY\")), React.createElement(_components.h1, {\n    id: \"후기\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%ED%9B%84%EA%B8%B0\",\n    \"aria-label\": \"후기 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"후기\"), React.createElement(_components.p, null, \"어렵다기보다는 헷갈리는 문제였다. 하지만 침착하게만 하면 어떻게든 풀 수 있는 문제이기도 한 것 같다.\")), \"\\n\", React.createElement(_components.div, {\n    className: \"toc\"\n  }, React.createElement(_components.p, null, \"목차\"), React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"#%EC%8B%9C%EB%A6%AC%EC%A6%88-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%AC%B8%EC%A0%9C%ED%92%80%EA%B8%B0-%EA%B0%9C%EC%9A%94\"\n  }, \"시리즈 \\\"알고리즘 문제풀기\\\" 개요\")), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"#%EB%AC%B8%EC%A0%9C\"\n  }, \"문제\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"#%EC%A0%91%EA%B7%BC\"\n  }, \"접근\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"#%ED%92%80%EC%9D%B4-1\"\n  }, \"풀이 1\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"#%EA%B0%9C%EC%84%A0%EC%A0%90\"\n  }, \"개선점\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"#%ED%92%80%EC%9D%B4-2\"\n  }, \"풀이 2\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"#%ED%9B%84%EA%B8%B0\"\n  }, \"후기\")), \"\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/kangseong/workspace/private/blog/posts/2023/230420-algorithm-2-multiply-strings/index.mdx\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nvar _templateObject, _templateObject2, _templateObject3;\nimport * as React from \"react\";\nimport {Link} from \"gatsby\";\nimport {getImage} from \"gatsby-plugin-image\";\nimport Layout from \"../../components/Layout\";\nimport Seo from \"../../components/Seo\";\nimport styled from \"../../themes\";\nimport MdxContent from \"../../components/MdxContent\";\nimport NearbySeriesPostLinks from \"../../components/NearbySeriesPostLinks\";\nimport Comments from \"../../components/Comments\";\nimport SameSeriesPosts from \"../../components/SameSeriesPosts\";\nimport highlightCurrentHeading from \"../../utils/highlightCurrentHeading\";\nfunction PostDetailPage(_ref) {\n  let {data, children} = _ref;\n  const ref = React.useRef();\n  const {frontmatter, sameSeriesPosts} = data.mdx;\n  const {title, slug, date, series} = frontmatter;\n  React.useEffect(() => {\n    var _ref$current;\n    const headingElements = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.querySelectorAll(\".md h1, .md h2, .md h3, .md h4, .md h5, .md h6\");\n    const observer = new IntersectionObserver(() => highlightCurrentHeading(ref, headingElements), {\n      rootMargin: \"0px 0px -90% 0px\",\n      threshold: [0, 1.0]\n    });\n    headingElements === null || headingElements === void 0 ? void 0 : headingElements.forEach(element => observer.observe(element));\n    return () => observer.disconnect();\n  }, []);\n  return React.createElement(Layout, null, React.createElement(Header, null, React.createElement(\"h1\", null, React.createElement(Link, {\n    to: \"/posts/\" + slug\n  }, title)), React.createElement(WrittenDate, null, date)), React.createElement(SameSeriesPosts, {\n    name: series,\n    data: sameSeriesPosts,\n    current: slug\n  }), React.createElement(PostContent, {\n    ref: ref\n  }, children), React.createElement(NearbySeriesPostLinks, {\n    data: sameSeriesPosts,\n    current: slug\n  }), React.createElement(Comments, null));\n}\nconst Header = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  margin: 72px 0 84px;\\n  padding: 0 32px;\\n\\n  & > h1 {\\n    font-size: 2.5rem;\\n    word-break: keep-all;\\n    margin: 0;\\n\\n    > a {\\n      color: \", \";\\n    }\\n  }\\n\"])), p => p.theme.colors.onBackground);\nconst WrittenDate = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n  margin-left: 2px;\\n\"])));\nconst PostContent = styled(MdxContent)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose([\"\\n  margin-bottom: 120px;\\n\"])));\nconst query = \"2677585968\";\nexport const Head = _ref2 => {\n  var _image$images, _image$images$fallbac;\n  let {data} = _ref2;\n  const {frontmatter: {title, slug, tags, heroImage, previewContent}, excerpt} = data.mdx;\n  const image = heroImage ? getImage(heroImage) : null;\n  return React.createElement(Seo, {\n    title: title,\n    description: previewContent !== null && previewContent !== void 0 ? previewContent : excerpt,\n    path: \"posts/\" + slug,\n    thumbnail: image === null || image === void 0 ? void 0 : (_image$images = image.images) === null || _image$images === void 0 ? void 0 : (_image$images$fallbac = _image$images.fallback) === null || _image$images$fallbac === void 0 ? void 0 : _image$images$fallbac.src,\n    keywords: tags,\n    ogType: \"article\"\n  });\n};\nPostDetailPage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostDetailPage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import React, { useEffect, useRef } from \"react\";\n\nfunction Comments() {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const scriptTag = document.createElement(\"script\");\n    // NOTE: ricale - Utterances 를 위한 설정 코드.\n    // const attrs = {\n    //   src: \"https://utteranc.es/client.js\",\n    //   repo: \"ricale/blog\",\n    //   \"issue-term\": \"pathname\",\n    //   label: \"utterances\",\n    //   theme: \"github-dark\",\n    //   crossOrigin: \"anonymous\",\n    //   async: \"true\",\n    // };\n    const attrs = {\n      src: \"https://giscus.app/client.js\",\n      \"data-repo\": \"ricale/blog\",\n      \"data-repo-id\": \"R_kgDOIvqo5g\",\n      \"data-category\": \"Giscus\",\n      \"data-category-id\": \"DIC_kwDOIvqo5s4CT7fR\",\n      \"data-mapping\": \"pathname\",\n      \"data-strict\": \"0\",\n      \"data-reactions-enabled\": \"1\",\n      \"data-emit-metadata\": \"0\",\n      \"data-input-position\": \"top\",\n      \"data-theme\": \"dark\",\n      \"data-lang\": \"ko\",\n      crossorigin: \"anonymous\",\n      async: \"true\",\n    };\n    Object.entries(attrs).forEach(([key, value]) => {\n      scriptTag.setAttribute(key, value);\n    });\n    ref.current?.appendChild(scriptTag);\n  }, []);\n\n  return <div id=\"comments\" ref={ref} />;\n}\n\nexport default Comments;\n","import { css } from \"../../themes\";\n\nconst blockquoteCss = css`\n  blockquote {\n    position: relative;\n\n    margin-left: 0;\n    margin-right: 0;\n    margin-bottom: 16px;\n    padding: 16px 32px;\n    border-left: 1px solid ${(p) => p.theme.colors.blockquoteBorder};\n    border-left-width: 10px;\n\n    background-color: ${(p) => p.theme.colors.blockquote};\n\n    > :first-child {\n      margin-top: 0;\n    }\n    > :last-child {\n      margin-bottom: 0;\n    }\n    > ul,\n    > ol {\n      padding-left: 20px;\n    }\n  }\n\n  blockquote:before {\n    content: '\"';\n\n    position: absolute;\n    top: -10px;\n    left: 5px;\n\n    font-size: 3em;\n    color: ${(p) => p.theme.colors.blockquoteBorder};\n  }\n  blockquote:after {\n    content: '\"';\n\n    position: absolute;\n    bottom: -30px;\n    right: 5px;\n\n    font-size: 3em;\n    color: ${(p) => p.theme.colors.blockquoteBorder};\n  }\n`;\n\nexport default blockquoteCss;\n","import { css } from \"../../themes\";\n\nconst codeblockCss = css`\n  pre[class*=\"language-\"] {\n    margin: 0 0 16px;\n  }\n\n  code[class*=\"language-\"] {\n    font-size: 0.85rem;\n  }\n\n  .gatsby-highlight-code-line {\n    display: block;\n\n    margin-left: -1em;\n    margin-right: -1em;\n    padding-top: 1.8px;\n    padding-bottom: 1.8px;\n    padding-left: 0.75em;\n    padding-right: 1em;\n    border-left: 0.25em solid ${(p) => p.theme.colors.codeblockHighlightBorder};\n\n    background-color: ${(p) => p.theme.colors.codeblockHighlight};\n  }\n\n  .line-numbers .line-numbers-rows {\n    bottom: 0;\n    padding-top: 17.5px;\n    padding-left: 12px;\n  }\n\n  pre > code {\n    padding: unset;\n    border-radius: unset;\n    background-color: unset;\n    color: unset;\n  }\n  .codeblock-container {\n    position: relative;\n    padding-top: 0.1px;\n    .codeblock-title {\n      position: absolute;\n      top: 0px;\n      left: 8px;\n      z-index: 1;\n\n      padding: 2px 8px;\n\n      font-size: 0.875rem;\n      font-family: consolas, monospace;\n      background-color: ${(p) => p.theme.colors.codeblockTitle};\n    }\n    .codeblock-copy-button {\n      position: absolute;\n      top: 0;\n      right: 0;\n\n      padding: 4px 6px;\n      border: 0;\n\n      font-size: 0.75rem;\n      color: ${(p) => p.theme.colors.codeblockCopyButtonLabel};\n      text-decoration: underline;\n\n      background-color: transparent;\n      cursor: pointer;\n    }\n    .codeblock-title + div pre[class*=\"language-\"] {\n      margin-top: 8px;\n    }\n    .codeblock-title + div + .codeblock-copy-button {\n      top: 8px;\n    }\n  }\n\n  @media (max-width: 500px) {\n    .codeblock-container {\n      padding-top: 0;\n      .codeblock-title {\n        position: static;\n        background-color: ${(p) => p.theme.colors.codeblockTitleInMobile};\n      }\n    }\n  }\n`;\n\nexport default codeblockCss;\n","import { css } from \"../../themes\";\n\nconst headingCss = css`\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    margin-top: 24px;\n    margin-bottom: 16px;\n    line-height: 1.25;\n    font-weight: 600;\n\n    > a.anchor path {\n      fill: white;\n    }\n  }\n\n  h1 {\n    padding-bottom: 0.3em;\n    border-bottom: 1px solid ${(p) => p.theme.colors.headingBorder};\n    font-size: 2.125em;\n  }\n\n  h2 {\n    padding-bottom: 0.3em;\n    border-bottom: 1px solid ${(p) => p.theme.colors.headingBorder};\n    font-size: 1.75em;\n  }\n\n  h3 {\n    font-size: 1.5em;\n  }\n\n  h4 {\n    font-size: 1.25em;\n  }\n\n  h5 {\n    font-size: 1em;\n  }\n\n  h6 {\n    font-size: 0.9375em;\n  }\n`;\n\nexport default headingCss;\n","import { css } from \"../../themes\";\n\nconst imageCss = css`\n  img {\n    border: 1px solid ${(p) => p.theme.colors.imageBorder};\n  }\n\n  img:not([class]) {\n    max-width: 600px;\n    margin-bottom: 16px;\n  }\n\n  .gatsby-resp-image-figure {\n    margin: 0 0 16px;\n    .gatsby-resp-image-wrapper {\n      margin-bottom: 0;\n    }\n    .gatsby-resp-image-figcaption {\n      margin-top: 4px;\n      text-align: center;\n      font-size: 0.875rem;\n      color: ${(p) => p.theme.colors.imageCaptionText};\n    }\n  }\n  .gatsby-resp-image-wrapper {\n    margin-bottom: 16px;\n  }\n`;\n\nexport default imageCss;\n","import { css } from \"../../themes\";\n\nconst listCss = css`\n  ul,\n  ol {\n    margin-bottom: 16px;\n  }\n  li > ul,\n  li > ol {\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n`;\n\nexport default listCss;\n","import { css } from \"../../themes\";\n\nconst tableCss = css`\n  table {\n    width: max-content;\n    max-width: 100%;\n    margin-bottom: 16px;\n    border-collapse: collapse;\n    td,\n    th {\n      padding: 6px 13px;\n      border: 1px solid ${(p) => p.theme.colors.tableBorder};\n    }\n  }\n`;\n\nexport default tableCss;\n","import { css } from \"../../themes\";\n\nconst tocCss = css`\n  > .md {\n    order: 1;\n  }\n\n  > .toc {\n    font-size: 0.875rem;\n    > ul {\n      margin: 0;\n      padding: 0;\n      list-style: none;\n\n      ul {\n        list-style: none;\n      }\n    }\n  }\n  @media (max-width: 1099px) {\n    > .toc {\n      display: none;\n    }\n  }\n  @media (min-width: 1100px) {\n    > .toc {\n      position: absolute;\n      top: 8px;\n      left: calc(50% + 400px);\n      height: 100%;\n      > p {\n        display: none;\n      }\n      > ul {\n        position: sticky;\n        top: 10px;\n        padding-left: 8px;\n        border-left: 1px solid ${(p) => p.theme.colors.inactiveText};\n\n        white-space: nowrap;\n\n        a {\n          color: ${(p) => p.theme.colors.inactiveText};\n        }\n        a > code {\n          color: ${(p) => p.theme.colors.inactiveText};\n        }\n        code {\n          white-space: nowrap;\n        }\n        overflow: hidden;\n        ul {\n          padding-left: 15px;\n        }\n      }\n\n      .highlight {\n        color: ${(p) => p.theme.colors.onBackground};\n        text-decoration: underline;\n        code {\n          color: ${(p) => p.theme.colors.onBackground};\n          text-decoration: underline;\n        }\n      }\n    }\n  }\n  > .toc {\n    ${[...new Array(20)].map(\n      (_, i) =>\n        css`\n          @media (min-width: ${1100 + (i + 1) * 20}px) {\n            width: ${(1100 + i * 20 - 800) / 2}px;\n          }\n        `\n    )}\n\n    @media (min-width: ${1100}px) {\n      > ul {\n        white-space: inherit;\n        code {\n          white-space: inherit;\n        }\n      }\n    }\n  }\n`;\n\nexport default tocCss;\n","import styled from \"../../themes\";\nimport blockquoteCss from \"./blockquoteCss\";\nimport codeblockCss from \"./codeblockCss\";\nimport headingCss from \"./headingCss\";\nimport imageCss from \"./imageCss\";\nimport listCss from \"./listCss\";\nimport tableCss from \"./tableCss\";\nimport tocCss from \"./tocCss\";\n\nconst MdxContent = styled.div`\n  position: relative;\n\n  display: flex;\n  flex-direction: column;\n  font-size: 16px;\n  line-height: 1.5;\n\n  ${headingCss}\n  ${listCss}\n  ${imageCss}\n  ${tocCss}\n  ${codeblockCss}\n  ${blockquoteCss}\n  ${tableCss}\n\n  p {\n    margin-top: 0;\n    margin-bottom: 16px;\n  }\n\n  hr {\n    height: 0.25em;\n    margin: 24px 0;\n    border: 0;\n\n    background-color: ${(p) => p.theme.colors.hr};\n  }\n\n  code {\n    padding: 0.2em 0.4em;\n    border-radius: 2px;\n\n    font-size: 0.85em;\n\n    background-color: ${(p) => p.theme.colors.code};\n    color: ${(p) => p.theme.colors.onCode};\n    white-space: break-spaces;\n  }\n\n  a > code {\n    color: skyblue;\n  }\n\n  & > .md > :first-child {\n    margin-top: 0;\n  }\n`;\n\nexport default MdxContent;\n","import * as React from \"react\";\nimport { Link } from \"gatsby\";\n\nimport { PostFrontmatter } from \"../../types\";\nimport styled from \"../../themes\";\n\ntype NearbyPostLinkProps = Pick<PostFrontmatter, \"title\" | \"slug\"> & {\n  desc: string;\n  next?: boolean;\n};\nfunction NearbyPostLink({ title, slug, desc, ...props }: NearbyPostLinkProps) {\n  return (\n    <Container {...props} to={`/posts/${slug}`}>\n      <Desc>{desc}</Desc>\n      <Title>{title}</Title>\n    </Container>\n  );\n}\n\ntype ContainerProps = {\n  next?: boolean;\n};\nconst Container = styled(Link)<ContainerProps>`\n  display: flex;\n  flex-direction: column;\n  align-items: ${(p) => (p.next ? \"flex-end\" : \"flex-start\")};\n\n  max-width: 100%;\n  padding: 16px;\n\n  background-color: ${(p) => p.theme.colors.nearbyPostLink};\n\n  &:hover {\n    text-decoration: none;\n  }\n`;\nconst Desc = styled.div`\n  font-size: 0.75rem;\n  color: ${(p) => p.theme.colors.onNearbyPostLink};\n`;\nconst Title = styled.div`\n  max-width: 100%;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n`;\n\nexport default NearbyPostLink;\n","import * as React from \"react\";\n\nimport { PostFrontmatter } from \"../../types\";\nimport styled from \"../../themes\";\n\nimport NearbyPostLink from \"./NearbyPostLink\";\n\ntype NearbySeriesPostLinksProps = {\n  data?:\n    | null\n    | {\n        frontmatter: Pick<PostFrontmatter, \"title\" | \"slug\">;\n      }[];\n  current?: string;\n};\n\nfunction NearbySeriesPostLinks({ data, current }: NearbySeriesPostLinksProps) {\n  if (!data) {\n    return null;\n  }\n\n  const currentIndex = data.findIndex((it) => it.frontmatter.slug === current);\n  const prevPost = data[currentIndex - 1]?.frontmatter;\n  const nextPost = data[currentIndex + 1]?.frontmatter;\n\n  return (\n    <Container>\n      <div>\n        {!!prevPost && <NearbyPostLink {...prevPost} desc=\"❮ 시리즈 이전글\" />}\n      </div>\n      <div>\n        {!!nextPost && (\n          <NearbyPostLink {...nextPost} next desc=\"시리즈 다음글 ❯\" />\n        )}\n      </div>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  gap: 16px;\n\n  margin: 120px 0;\n\n  & > div {\n    display: flex;\n    flex-direction: column;\n\n    overflow: hidden;\n  }\n  & > :nth-child(1) {\n    align-items: flex-start;\n  }\n  & > :nth-child(2) {\n    align-items: flex-end;\n  }\n`;\n\nexport default NearbySeriesPostLinks;\n","import * as React from \"react\";\nimport { Link } from \"gatsby\";\n\nimport styled, { css } from \"../themes\";\nimport { PostFrontmatter } from \"../types\";\n\ntype SameSeriesPostsProps = {\n  name?: string;\n  data?:\n    | null\n    | {\n        frontmatter: Pick<PostFrontmatter, \"title\" | \"slug\">;\n      }[];\n  current?: string;\n};\nfunction SameSeriesPosts({ name, data, current }: SameSeriesPostsProps) {\n  const [collapsed, setCollapsed] = React.useState(true);\n  if (!data) {\n    return null;\n  }\n  return (\n    <Container>\n      <Header collapsed={collapsed} onClick={() => setCollapsed((st) => !st)}>\n        <h2>\n          <Link to={`/series/${name}/`}>{`시리즈 \"${name}\"`}</Link>\n        </h2>\n        <span>▲</span>\n      </Header>\n      {!collapsed && (\n        <List>\n          {data.map(({ frontmatter: { slug, title } }) => (\n            <ListItem active={slug === current} key={slug}>\n              <Link to={`/posts/${slug}`}>{title}</Link>\n            </ListItem>\n          ))}\n        </List>\n      )}\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  margin-bottom: 16px;\n  align-items: center;\n\n  background-color: ${(p) => p.theme.colors.sameSereisPosts};\n`;\n\ntype HeaderProps = {\n  collapsed: boolean;\n};\nconst Header = styled.div<HeaderProps>`\n  display: flex;\n  justify-content: space-between;\n  padding: 16px;\n  cursor: pointer;\n  user-select: none;\n\n  > h2 {\n    margin: 0;\n    font-size: 1rem;\n    > a {\n      color: ${(p) => p.theme.colors.onBackground};\n    }\n  }\n\n  > span {\n    transform: rotate(${(p) => (p.collapsed ? 0 : 180)}deg);\n    transition: transform 0.2s;\n  }\n`;\n\nconst List = styled.ol`\n  margin: 0;\n  border-top: 1px solid ${(p) => p.theme.colors.background};\n  padding-top: 16px;\n  padding-left: 48px;\n  padding-bottom: 16px;\n`;\n\ntype ListItemProps = {\n  active: boolean;\n};\nconst ListItem = styled.li<ListItemProps>`\n  margin-bottom: 4px;\n  font-size: 0.9375rem;\n  color: ${(p) => p.theme.colors.inactiveText};\n  & > a {\n    color: ${(p) => p.theme.colors.inactiveText};\n  }\n  ${(p) =>\n    p.active &&\n    css`\n      color: ${(p) => p.theme.colors.onBackground};\n      & > a {\n        color: ${(p) => p.theme.colors.onBackground};\n        text-decoration: underline;\n      }\n    `}\n`;\n\nexport default SameSeriesPosts;\n","const highlightClass = \"highlight\";\n\nfunction highlightCurrentHeading(\n  containerRef: React.MutableRefObject<HTMLDivElement | undefined>,\n  headingElements: NodeListOf<HTMLElement> | undefined\n) {\n  if (!headingElements) {\n    return;\n  }\n\n  const offset = 10;\n  const scrollTop =\n    document.documentElement.scrollTop +\n    offset -\n    (containerRef.current?.offsetTop ?? 0);\n\n  let targetHeading;\n  for (let i = 0; i < headingElements.length; i++) {\n    if (headingElements[i].offsetTop > scrollTop) {\n      targetHeading = headingElements[i - 1] ?? null;\n      break;\n    }\n  }\n  if (targetHeading === undefined) {\n    targetHeading = headingElements[headingElements.length - 1];\n  }\n\n  containerRef.current\n    ?.querySelectorAll(`.${highlightClass}`)\n    .forEach((element) => element.classList.remove(highlightClass));\n\n  if (targetHeading) {\n    const targetId = targetHeading.getAttribute(\"id\");\n    const linkSelector = `.toc a[href='#${encodeURI(targetId ?? \"\")}']`;\n    const linkElement = containerRef.current?.querySelector(linkSelector);\n    linkElement?.classList.add(highlightClass);\n  }\n  return;\n}\n\nexport default highlightCurrentHeading;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode} [children]\n *   Children.\n *\n * @callback MergeComponents\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components|MergeComponents} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  let allComponents = useMDXComponents(components)\n\n  if (disableParentContext) {\n    allComponents = components || emptyObject\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","div","h3","a","ul","li","h1","p","code","button","_provideComponents","components","React","className","id","style","position","href","dangerouslySetInnerHTML","__html","_templateObject","_templateObject2","_templateObject3","wrapper","MDXLayout","PostDetailPage","_ref","data","children","ref","frontmatter","sameSeriesPosts","mdx","title","slug","date","series","_ref$current","headingElements","current","querySelectorAll","observer","IntersectionObserver","highlightCurrentHeading","rootMargin","threshold","forEach","element","observe","disconnect","Layout","Header","Link","to","WrittenDate","SameSeriesPosts","name","PostContent","NearbySeriesPostLinks","Comments","styled","_taggedTemplateLiteralLoose","theme","colors","onBackground","MdxContent","Head","_ref2","_image$images","_image$images$fallbac","tags","heroImage","previewContent","excerpt","image","getImage","Seo","description","path","thumbnail","images","fallback","src","keywords","ogType","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","useRef","useEffect","scriptTag","document","createElement","entries","crossorigin","async","key","value","setAttribute","appendChild","css","blockquoteBorder","blockquote","codeblockHighlightBorder","codeblockHighlight","codeblockTitle","codeblockCopyButtonLabel","codeblockTitleInMobile","headingBorder","imageBorder","imageCaptionText","tableBorder","inactiveText","_toConsumableArray","Array","map","_","i","headingCss","listCss","imageCss","tocCss","codeblockCss","blockquoteCss","tableCss","hr","onCode","Container","next","nearbyPostLink","Desc","onNearbyPostLink","Title","desc","currentIndex","findIndex","it","prevPost","_data","nextPost","_data2","NearbyPostLink","sameSereisPosts","collapsed","List","background","ListItem","active","setCollapsed","onClick","st","highlightClass","containerRef","scrollTop","documentElement","_containerRef$current2","offsetTop","targetHeading","length","undefined","_containerRef$current3","classList","remove","targetId","getAttribute","linkSelector","encodeURI","linkElement","_containerRef$current4","querySelector","add","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}