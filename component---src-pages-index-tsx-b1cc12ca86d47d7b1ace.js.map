{"version":3,"file":"component---src-pages-index-tsx-b1cc12ca86d47d7b1ace.js","mappings":"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","sources":["webpack://ricalelog/./src/components/SeriesList/SeriesListItem.tsx","webpack://ricalelog/./src/components/SeriesList/index.tsx","webpack://ricalelog/./src/components/Tag.tsx","webpack://ricalelog/./src/components/TagList.tsx","webpack://ricalelog/./src/components/ThumbnailImage.tsx","webpack://ricalelog/./src/getters/getPosts.ts","webpack://ricalelog/./src/getters/getSeries.ts","webpack://ricalelog/./src/components/PostCardList/PostCardItem.tsx","webpack://ricalelog/./src/components/PostCardList/index.tsx","webpack://ricalelog/./src/pages/index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { navigate } from \"gatsby\";\n\nimport { Series } from \"../../types\";\nimport styled from \"../../themes\";\nimport ThumbnailImage from \"../ThumbnailImage\";\n\ntype SeriesListItemProps = Series;\nfunction SeriesListItem({\n  fieldValue,\n  totalCount,\n  frontmatter,\n  ...props\n}: SeriesListItemProps) {\n  const { date, heroImage, heroImageAlt } = frontmatter;\n  return (\n    <Container onClick={() => navigate(`/series/${fieldValue}`)} {...props}>\n      <ThumbnailWrapper>\n        <ThumbnailImage source={heroImage} alt={heroImageAlt} />\n      </ThumbnailWrapper>\n      <Info>\n        <h3>\n          {fieldValue} <small>{`${totalCount}`}</small>\n        </h3>\n        <small>{`~ ${date}`}</small>\n      </Info>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  position: relative;\n  cursor: pointer;\n  &::after {\n    content: \"\";\n    display: block;\n    padding-bottom: 100%;\n  }\n`;\n\nconst ThumbnailWrapper = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n\n  background-color: ${(p) => p.theme.colors.seriesListItemThumbnail};\n`;\n\nconst Info = styled.div`\n  position: absolute;\n  top: 8px;\n  left: 8px;\n  right: 8px;\n  bottom: 8px;\n\n  display: flex;\n  flex-direction: column;\n  padding: 8px;\n\n  background-color: ${(p) => p.theme.colors.seriesListItemInfo};\n\n  & > h3 {\n    flex: 1;\n    margin: 0 0 4px;\n    word-break: keep-all;\n  }\n  & > small {\n    text-align: right;\n  }\n  & > h3 > small {\n    padding: 2px 4px;\n\n    background-color: ${(p) => p.theme.colors.sereisListItemCount};\n    color: ${(p) => p.theme.colors.seriesListItemCountText};\n    font-size: 0.85rem;\n    font-weight: normal;\n  }\n`;\n\nexport default SeriesListItem;\n","import * as React from \"react\";\n\nimport styled from \"../../themes\";\nimport { Series } from \"../../types\";\nimport SeriesListItem from \"./SeriesListItem\";\n\ntype SeriesListProps = {\n  data: Series[];\n};\nfunction SeriesList({ data, ...props }: SeriesListProps) {\n  return (\n    <Container {...props}>\n      {data.map((sr) => (\n        <SeriesListItem key={sr.fieldValue} {...sr} />\n      ))}\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 16px;\n\n  & > * {\n    width: calc(25% - 12px);\n\n    @media (max-width: 768px) {\n      width: calc(33% - 10px);\n    }\n\n    @media (max-width: 500px) {\n      width: calc(50% - 8px);\n    }\n  }\n`;\n\nexport default SeriesList;\n","import * as React from \"react\";\nimport { Link } from \"gatsby\";\nimport styled from \"../themes\";\n\ntype TagProps = {\n  value: string;\n};\nfunction Tag({ value }: TagProps) {\n  return <TagComp to={`/tags/${value}`}>{value}</TagComp>;\n}\n\nconst TagComp = styled(Link)`\n  display: inline-block;\n  padding: ${(p) => p.theme.dimens.spacing}px ${(p) => p.theme.dimens.gutter}px;\n  border-radius: 2px;\n\n  background-color: ${(p) => p.theme.colors.tag};\n  color: ${(p) => p.theme.colors.onTag};\n  text-decoration: none;\n`;\n\nexport default Tag;\n","import * as React from \"react\";\n\nimport styled from \"../themes\";\nimport Tag from \"./Tag\";\n\nfunction isStringArray(arr: unknown[]): arr is string[] {\n  return typeof arr[0] === \"string\";\n}\n\ntype TagListProps = {\n  tags: string[] | { fieldValue: string; totalCount: number }[];\n  showCount?: boolean;\n};\nfunction TagList({ tags, showCount, ...props }: TagListProps) {\n  const items = isStringArray(tags)\n    ? tags.map((tag) => ({ fieldValue: tag, totalCount: undefined }))\n    : tags;\n  return (\n    <Container {...props}>\n      {items.map((tag) => (\n        <li key={tag.fieldValue}>\n          <Tag value={tag.fieldValue} />\n          {showCount && !!tag.totalCount && <sup>{`${tag.totalCount}`}</sup>}\n        </li>\n      ))}\n    </Container>\n  );\n}\n\nconst Container = styled.ul`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: ${(p) => p.theme.dimens.gutter}px;\n\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nexport default TagList;\n","import * as React from \"react\";\nimport {\n  GatsbyImage,\n  getImage,\n  ImageDataLike,\n  StaticImage,\n} from \"gatsby-plugin-image\";\nimport styled from \"../themes\";\n\ntype ThumbnailImageProps = {\n  source: ImageDataLike | undefined;\n  alt: string | undefined;\n};\nfunction ThumbnailImage({ source, alt }: ThumbnailImageProps) {\n  const image = source ? getImage(source) : null;\n\n  if (image) {\n    return <Image image={image} alt={alt ?? \"\"} />;\n  }\n\n  return (\n    <StaticImage\n      src=\"../images/defaultThumbnail.jpeg\"\n      alt=\"default thumbnail\"\n      style={{ width: \"100%\", height: \"100%\" }}\n      imgStyle={{ objectFit: \"cover\", objectPosition: \"top left\" }}\n    />\n  );\n}\n\nconst Image = styled(GatsbyImage)`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n`;\n\nexport default ThumbnailImage;\n","import { Post, PostSource } from \"../types\";\n\nfunction getPosts(source: PostSource[]): Post[] {\n  return source.map((item) => ({ ...item.frontmatter }));\n}\n\nexport default getPosts;\n","import { Series, SeriesSource } from \"../types\";\n\nfunction getSeries(source: SeriesSource[]): Series[] {\n  return source\n    .map(({ edges, ...sr }) => ({\n      ...sr,\n      ...edges.sort((a, b) =>\n        b.node.frontmatter.originalDate.localeCompare(\n          a.node.frontmatter.originalDate\n        )\n      )[0].node,\n    }))\n    .sort((a, b) =>\n      b.frontmatter.originalDate.localeCompare(a.frontmatter.originalDate)\n    );\n}\n\nexport default getSeries;\n","import * as React from \"react\";\nimport { navigate } from \"gatsby\";\n\nimport { Post } from \"../../types\";\nimport styled from \"../../themes\";\nimport ThumbnailImage from \"../ThumbnailImage\";\n\ntype PostListItemProps = Post;\n\nfunction PostCardItem({\n  title,\n  slug,\n  date,\n  heroImage,\n  heroImageAlt,\n  ...props\n}: PostListItemProps) {\n  return (\n    <Container {...props} onClick={() => navigate(`/posts/${slug}`)}>\n      <ThumbnailWrapper>\n        <ThumbnailImage source={heroImage} alt={heroImageAlt} />\n      </ThumbnailWrapper>\n      <Info>\n        <Title>{title}</Title>\n        <Subtitle>{date}</Subtitle>\n      </Info>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  padding: 2px;\n  background-color: ${(p) => p.theme.colors.postCardItem};\n  cursor: pointer;\n`;\n\nconst ThumbnailWrapper = styled.div`\n  width: 100%;\n  height: 150px;\n`;\n\nconst Info = styled.div`\n  padding: 8px;\n`;\nconst Title = styled.h3`\n  word-break: keep-all;\n  margin-bottom: 4px;\n`;\nconst Subtitle = styled.p`\n  font-size: 0.875rem;\n`;\n\nexport default PostCardItem;\n","import * as React from \"react\";\n\nimport styled from \"../../themes\";\nimport { Post } from \"../../types\";\nimport PostCardItem from \"./PostCardItem\";\n\ntype PostCardListProps = {\n  data: Post[];\n};\nfunction PostCardList({ data, ...props }: PostCardListProps) {\n  return (\n    <Container {...props}>\n      {data.map(({ ...item }, i) => (\n        <PostCardItem key={i} {...item} />\n      ))}\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 24px;\n\n  & > * {\n    width: calc(50% - 12px);\n\n    @media (max-width: 500px) {\n      width: 100%;\n    }\n  }\n`;\n\nexport default PostCardList;\n","import * as React from \"react\";\nimport { graphql, HeadFC, Link, PageProps } from \"gatsby\";\n\nimport Layout from \"../components/Layout\";\nimport Seo from \"../components/Seo\";\nimport { PostSource, SeriesSource, TagSource } from \"../types\";\nimport getPosts from \"../getters/getPosts\";\nimport getSeries from \"../getters/getSeries\";\nimport SeriesList from \"../components/SeriesList\";\nimport styled from \"../themes\";\nimport PostCardList from \"../components/PostCardList\";\nimport TagList from \"../components/TagList\";\n\ntype IndexPageData = {\n  recentPosts: {\n    nodes: PostSource[];\n  };\n  series: {\n    group: SeriesSource[];\n  };\n  tags: {\n    group: TagSource[];\n  };\n};\n\nfunction IndexPage({ data: source }: PageProps<IndexPageData>) {\n  const recentPosts = getPosts(source.recentPosts.nodes);\n  const recentSeries = getSeries(source.series.group).slice(0, 3);\n  const popularTags = source.tags.group\n    .filter((item) => item.totalCount > 1)\n    .sort((a, b) => b.totalCount - a.totalCount)\n    .slice(0, 30);\n\n  return (\n    <Layout emphasize>\n      <Row>\n        <Column flex={4}>\n          <Section>\n            <div>\n              <h2>최신 글</h2>\n              <Link to=\"/posts/\">더보기</Link>\n            </div>\n            <PostCardList data={recentPosts} />\n          </Section>\n\n          <Section>\n            <div>\n              <h2>최신 시리즈</h2>\n              <Link to=\"/series/\">더보기</Link>\n            </div>\n            <RecentSeriesList data={recentSeries} />\n          </Section>\n        </Column>\n        <Column>\n          <Section>\n            <div>\n              <h2>태그</h2>\n              <Link to=\"/tags/\">더보기</Link>\n            </div>\n            <PopularTagList tags={popularTags} />\n          </Section>\n        </Column>\n      </Row>\n    </Layout>\n  );\n}\n\nconst Row = styled.div`\n  display: flex;\n  align-items: flex-start;\n  gap: 24px;\n\n  margin: 24px 0;\n\n  @media (max-width: 799px) {\n    flex-direction: column;\n  }\n`;\ntype ColumnProps = {\n  flex?: number;\n};\nconst Column = styled.div<ColumnProps>`\n  display: flex;\n  flex-direction: column;\n  gap: 32px;\n  flex: ${(p) => p.flex ?? 1};\n`;\nconst Section = styled.div`\n  & > :first-child {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 8px;\n\n    > h2 {\n      font-size: 1.125rem;\n    }\n    > a {\n      font-size: 0.875rem;\n      color: ${(p) => p.theme.colors.inactiveText};\n      text-decoration: underline;\n    }\n  }\n`;\n\nconst PopularTagList = styled(TagList)`\n  font-size: 0.875rem;\n`;\nconst RecentSeriesList = styled(SeriesList)`\n  gap: 24px;\n\n  & > * {\n    width: calc(33% - 16px);\n  }\n\n  @media (max-width: 768px) {\n    & > * {\n      width: calc(33% - 16px);\n    }\n  }\n\n  @media (max-width: 500px) {\n    gap: 16px;\n    & > * {\n      width: calc(50% - 8px);\n    }\n  }\n`;\n\nexport const query = graphql`\n  query {\n    recentPosts: allMdx(\n      filter: { frontmatter: { date: { ne: \"\" } } }\n      sort: { frontmatter: { date: DESC } }\n      limit: 4\n    ) {\n      nodes {\n        frontmatter {\n          title\n          slug\n          date(formatString: \"YYYY. M. D.\")\n          heroImageAlt\n          heroImage {\n            childImageSharp {\n              gatsbyImageData\n            }\n          }\n        }\n      }\n    }\n\n    series: allMdx(limit: 2000, filter: { frontmatter: { date: { ne: \"\" } } }) {\n      group(field: { frontmatter: { series: SELECT } }) {\n        fieldValue\n        totalCount\n        edges {\n          node {\n            frontmatter {\n              title\n              originalDate: date\n              date(formatString: \"YYYY. M. D.\")\n              heroImageAlt\n              heroImage {\n                childImageSharp {\n                  gatsbyImageData\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    tags: allMdx(limit: 2000, filter: { frontmatter: { date: { ne: \"\" } } }) {\n      group(field: { frontmatter: { tags: SELECT } }) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`;\n\nexport const Head: HeadFC = () => <Seo />;\n\nexport default IndexPage;\n"],"names":["Container","styled","ThumbnailWrapper","p","theme","colors","seriesListItemThumbnail","Info","seriesListItemInfo","sereisListItemCount","seriesListItemCountText","fieldValue","totalCount","frontmatter","props","date","heroImage","heroImageAlt","React","onClick","navigate","ThumbnailImage","source","alt","data","map","sr","SeriesListItem","key","TagComp","Link","dimens","spacing","gutter","tag","onTag","value","to","tags","showCount","items","undefined","Tag","Image","GatsbyImage","image","getImage","StaticImage","src","style","width","height","imgStyle","objectFit","objectPosition","item","_ref","edges","sort","a","b","node","originalDate","localeCompare","postCardItem","Title","Subtitle","title","slug","i","PostCardItem","Row","Column","flex","Section","inactiveText","PopularTagList","TagList","RecentSeriesList","SeriesList","Head","Seo","recentPosts","getPosts","nodes","recentSeries","getSeries","series","group","slice","popularTags","filter","Layout","emphasize","PostCardList"],"sourceRoot":""}