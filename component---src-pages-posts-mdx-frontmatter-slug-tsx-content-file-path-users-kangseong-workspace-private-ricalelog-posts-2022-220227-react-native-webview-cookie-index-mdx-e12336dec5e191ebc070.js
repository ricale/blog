"use strict";(self.webpackChunkricalelog=self.webpackChunkricalelog||[]).push([[8743],{3925:function(n,a,s){s.r(a),s.d(a,{Head:function(){return Z},default:function(){return R}});var t=s(1151),e=s(7294);function p(n){const a=Object.assign({p:"p",a:"a",h2:"h2",h3:"h3",code:"code",div:"div"},(0,t.ah)(),n.components);return e.createElement(e.Fragment,null,e.createElement(a.p,null,"우리 회사의 앱은 ",e.createElement(a.a,{href:"https://github.com/react-native-webview/react-native-webview"},"React Native WebView")," 를 사용해 하이브리드 앱으로 구현되어 있다. 최근 웹앱 쪽에서 로그인 인증 토큰을 쿠키로 유지하는 업데이트를 적용했는데, RN 쪽에서 별안간 쿠키가 유지되지 않는 버그가 발견되었다."),"\n",e.createElement(a.h2,null,"1. 버그 개요"),"\n",e.createElement(a.p,null,"일단 브라우저 상에서 웹앱을 사용할 때는 쿠키에 관한 이슈가 전혀 없다."),"\n",e.createElement(a.p,null,"앱에서도 사용하는 동안에는 문제가 없다. 문제는 앱 프로세스를 완전히 종료한 뒤 다시 실행했을 때다. 이 때 쿠키에 저장되어 있던 값들이 롤백된다. 누군가는 로그인이 유지된다는 걸로 봐서는 항상 롤백되는 건 아닌 것 같은데, 규칙성을 찾기가 어려웠다."),"\n",e.createElement(a.p,null,"이 버그 때문에 쿠키 값이 유지되지 않으면서 로그인이 풀린다는 제보가 잇따르기 시작했다."),"\n",e.createElement(a.p,null,"React Native WebView 리파지토리의 ",e.createElement(a.a,{href:"https://github.com/react-native-webview/react-native-webview/issues?q=is%3Aissue+cookie"},"이슈들"),"을 살펴봐도, 우리처럼 쿠키 때문에 고생하고 있는 사람들은 제법 있었지만 해결책은 보이지 않았다."),"\n",e.createElement(a.h2,null,"2. 해결 과정"),"\n",e.createElement(a.h3,null,"2.1. React Native WebView prop 확인"),"\n",e.createElement(a.p,null,"일단 혹시나 ",e.createElement(a.a,{href:"https://github.com/react-native-webview/react-native-webview/blob/master/docs/Reference.md"},"React Native WebView 에서 제공하는 prop")," 으로 해결할 수 있을까 싶어 쿠키와 관련된 prop 들 (",e.createElement(a.code,null,"incognite"),", ",e.createElement(a.code,null,"sharedCookiesEnabled"),", ",e.createElement(a.code,null,"thirdPartyCookiesEnabled"),") 을 적용해보았지만 해결되지 않았다."),"\n",e.createElement(a.p,null,"고민 끝에 우리는 React Native WebView 의 버그라고 판단하고 우회책을 찾기로 했다."),"\n",e.createElement(a.h3,null,"2.2. 쿠키를 RN 에 별도로 저장해두자."),"\n",e.createElement(a.p,null,"우회방법으로 웹앱 쪽에서 쿠키 값이 변경될 때마다 ",e.createElement(a.a,{href:"https://github.com/react-native-webview/react-native-webview/blob/master/docs/Reference.md#postmessagestr"},e.createElement(a.code,null,"postMessage()"))," 로 쿠키 전문을 보내주는 방법을 선택했다."),"\n",e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"cookie"</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> document<span class="token punctuation">.</span>cookie <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"쿠키를 받으면 RN 쪽에서는 AsyncStorage 등에 저장해두었다가 앱의 프로세스가 재실행될 때 웹뷰의 헤더에 쿠키를 넣어주었다."),"\n",e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>source<span class="token punctuation">,</span> setSource<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">uri</span><span class="token operator">:</span> <span class="token constant">SOME_URI</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 저장해놓은 쿠키가 있으면 source 에 저장한다.</span>\n<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  AsyncStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">\'cookie\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">setSource</span><span class="token punctuation">(</span><span class="token parameter">st</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token operator">...</span>st<span class="token punctuation">,</span>\n      <span class="token literal-property property">headers</span><span class="token operator">:</span> res <span class="token operator">?</span> <span class="token punctuation">{</span> <span class="token literal-property property">Cookie</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token keyword">null</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...</span>\n<span class="token keyword">return</span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WebView</span></span>\n    <span class="token comment">// ...</span>\n    <span class="token attr-name">incognite</span> <span class="token comment">// &lt;- incognite 가 없으면 source.headers.Cookie 값이 적용되지 않는다. 이유는 아직 불명</span>\n    <span class="token attr-name">source</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>source<span class="token punctuation">}</span></span>\n    <span class="token attr-name">onMessage</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> content <span class="token punctuation">}</span> <span class="token operator">=</span> evt<span class="token punctuation">.</span>nativeEvent<span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n      <span class="token comment">// 웹앱으로부터 postMessage 로 쿠키가 오면 저장해둔다.</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">\'cookie\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        AsyncStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">\'cookie\'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n    <span class="token punctuation">/></span></span></code></pre></div>'}}),"\n",e.createElement(a.h3,null,"2.3. 그럼에도 이슈가 남아있다."),"\n",e.createElement(a.p,null,"신기하게도 이렇게 해도 때때로 웹앱의 ",e.createElement(a.code,null,"postMessage()"),' 를 통해 넘어온 쿠키 값에서 인증 리프레시 토큰 값만 누락되어 넘어오는 현상이 있었다 (하필이면 제일 중요한 녀석이..). 이것 또한 원인을 찾지 못하고 결국 임시 방편으로 "액세스 토큰과 리프레시 토큰 중 하나라도 값이 있으면 이전 쿠키로부터 다른 하나의 값을 복구하도록" 로직을 넣었다.'),"\n",e.createElement(a.h2,null,"3. 근본적인 해결책"),"\n",e.createElement(a.p,null,"회사에 iOS/안드로이드 네이티브 개발자가 없어서 라이브러리를 뜯어가며 근본적인 해결책을 찾는 것은 어려울 것 같다. 일단 임시 방편으로 대응하면서 React Native WebView 가 업데이트 되기를 기다리는 수밖에 없는 것 같다."))}var o,c,l,u,r=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.ah)(),n.components);return a?e.createElement(a,n,e.createElement(p,n)):p(n)},i=s(1880),k=s(1883),m=s(3723),g=s(1858),d=s(3904),h=s(891),E=s(5534),v=s(5777),w=s(7178);const b=n=>{let{data:a,children:s}=n;const{frontmatter:t,sameSeriesPosts:p}=a.mdx,{title:o,slug:c,date:l,tags:u,series:r,heroImage:i,heroImageAlt:d}=t,h=i?(0,m.c)(i):null;return e.createElement(g.Z,null,e.createElement(f,null,e.createElement("h1",null,o),e.createElement(x,null,l),e.createElement(S,null,u.map((n=>e.createElement("li",{key:n},e.createElement(k.rU,{to:"/tags/"+n},n)))))),e.createElement(w.Z,{name:r,data:p,current:c}),!!h&&e.createElement(y,{image:h,alt:null!=d?d:""}),e.createElement(E.Z,null,s),e.createElement(v.Z,null))},f=h.ZP.div(o||(o=(0,i.Z)(["\n  margin: 60px 0 72px;\n  padding: 0 24px;\n\n  & > h1 {\n    font-size: 2.5rem;\n    word-break: keep-all;\n    margin: 0;\n  }\n"]))),y=(0,h.ZP)(m.G)(c||(c=(0,i.Z)(["\n  margin-bottom: 16px;\n"]))),x=h.ZP.div(l||(l=(0,i.Z)(["\n  margin: 16px 0;\n"]))),S=h.ZP.ul(u||(u=(0,i.Z)(["\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: ","px;\n\n  margin: 0;\n  padding: 0;\n  list-style: none;\n\n  > li {\n    padding: ","px\n      ","px;\n    border-radius: 2px;\n\n    background-color: ",";\n    color: ",";\n\n    > a {\n      text-decoration: none;\n    }\n  }\n"])),(n=>n.theme.dimens.gutter),(n=>n.theme.dimens.spacing),(n=>n.theme.dimens.gutter),(n=>n.theme.colors.tag),(n=>n.theme.colors.onTag)),Z=n=>{var a,s;let{data:t}=n;const{frontmatter:{title:p,slug:o,tags:c,heroImage:l,previewContent:u},excerpt:r}=t.mdx,i=l?(0,m.c)(l):null;return e.createElement(d.Z,{title:p,description:null!=u?u:r,path:"posts/"+o,thumbnail:null==i||null===(a=i.images)||void 0===a||null===(s=a.fallback)||void 0===s?void 0:s.src,keywords:c,ogType:"article"})};function R(n){return e.createElement(b,n,e.createElement(r,n))}}}]);
//# sourceMappingURL=component---src-pages-posts-mdx-frontmatter-slug-tsx-content-file-path-users-kangseong-workspace-private-ricalelog-posts-2022-220227-react-native-webview-cookie-index-mdx-e12336dec5e191ebc070.js.map