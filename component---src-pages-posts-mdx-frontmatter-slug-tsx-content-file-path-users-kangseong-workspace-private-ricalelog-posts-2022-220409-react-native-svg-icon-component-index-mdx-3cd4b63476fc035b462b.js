"use strict";(self.webpackChunkricalelog=self.webpackChunkricalelog||[]).push([[2071],{6900:function(n,a,s){s.r(a),s.d(a,{Head:function(){return I},default:function(){return _}});var t=s(1151),e=s(7294);function p(n){const a=Object.assign({p:"p",h1:"h1",h2:"h2",a:"a",div:"div",code:"code",h3:"h3",h4:"h4"},(0,t.ah)(),n.components);return e.createElement(e.Fragment,null,e.createElement(a.p,null,"아이콘 같은 간단한 이미지를 다룰 때는 PNG 형식보다는 SVG 가 더 좋다. 하지만 React Native 에서는 기본적으로 SVG 파일을 지원하지 않는다."),"\n",e.createElement(a.p,null,"그럼 React Native 에서 SVG 파일을 아이콘으로 사용할 수 있도록 설정 및 구현해보자."),"\n",e.createElement(a.h1,null,"1. 환경 구성 및 설정"),"\n",e.createElement(a.h2,null,"1.1. react-native-svg"),"\n",e.createElement(a.p,null,e.createElement(a.a,{href:"https://github.com/react-native-svg/react-native-svg"},"react-native-svg")," 는 React Native 프로젝트에서 SVG 및 관련 엘리먼트들을 웹과 유사한 형식으로 사용할 수 있게 해주는 라이브러리다. 이 라이브러리를 먼저 설치하자."),"\n",e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash">$ <span class="token function">yarn</span> <span class="token function">add</span> react-native-svg\n$ <span class="token builtin class-name">cd</span> ./ios <span class="token operator">&amp;&amp;</span> pod <span class="token function">install</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"설치만 하면 된다. 특별한 설정은 필요 없다."),"\n",e.createElement(a.h2,null,"1.2. react-native-svg-transformer"),"\n",e.createElement(a.p,null,"react-native-svg 는 ",e.createElement(a.code,null,"<Svg />"),", ",e.createElement(a.code,null,"<G />"),", ",e.createElement(a.code,null,"<Path />")," 등 거의 모든 SVG 관련 컴포넌트를 제공하지만, SVG 파일 자체를 ",e.createElement(a.code,null,"import")," 할 수 있게 해주지는 않는다. SVG 파일들을 ",e.createElement(a.code,null,"import")," 해서 사용하려면 ",e.createElement(a.a,{href:"https://github.com/kristerkari/react-native-svg-transformer"},"react-native-svg-transformer")," 라이브러리도 필요하다. 이 라이브러리는 react-native-svg 라이브러리를 사용해 SVG 파일을 읽어들여 React 컴포넌트로 사용할 수 있게 해준다."),"\n",e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash">$ <span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">--dev</span> react-native-svg-transformer</code></pre></div>'}}),"\n",e.createElement(a.p,null,"설치 이후 추가적인 설정이 필요하다. (react-native-svg-transformer 의 ",e.createElement(a.a,{href:"https://github.com/kristerkari/react-native-svg-transformer/blob/master/README.md"},"README"),"에도 잘 나와있다.)"),"\n",e.createElement(a.h3,null,"1.2.1. ",e.createElement(a.code,null,"metro.config.js")),"\n",e.createElement(a.p,null,"프로젝트의 루트 디렉토리에 ",e.createElement(a.code,null,"metro.config.js")," 파일이 있다. 기본 설정되어있는 내용과 ",e.createElement(a.a,{href:"https://github.com/kristerkari/react-native-svg-transformer#for-react-native-v059-or-newer"},"라이브러리 README.md 의 ",e.createElement(a.code,null,"metro.config.js"))," 내용을 병합하자. 아래는 병합한 결과물 예시이다."),"\n",e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// metro.config.js</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> getDefaultConfig <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"metro-config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">resolver</span><span class="token operator">:</span> <span class="token punctuation">{</span> sourceExts<span class="token punctuation">,</span> assetExts <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getDefaultConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">transformer</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token function-variable function">getTransformOptions</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">experimentalImportSupport</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">inlineRequires</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">babelTransformerPath</span><span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"react-native-svg-transformer"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">resolver</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">assetExts</span><span class="token operator">:</span> assetExts<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ext</span><span class="token punctuation">)</span> <span class="token operator">=></span> ext <span class="token operator">!==</span> <span class="token string">"svg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">sourceExts</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>sourceExts<span class="token punctuation">,</span> <span class="token string">"svg"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.h3,null,"1.2.2. ",e.createElement(a.code,null,"declaration.d.ts")),"\n",e.createElement(a.p,null,"타입스크립트를 사용한다면 프로젝트 루트 디렉토리에 ",e.createElement(a.code,null,"declaration.d.ts")," 파일을 새로 만들어서 아래 내용을 넣어주어야 한다."),"\n",e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// declaration.d.ts</span>\n\n<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">"*.svg"</span> <span class="token punctuation">{</span>\n  <span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n  <span class="token keyword">import</span> <span class="token punctuation">{</span> SvgProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-native-svg"</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> content<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>SvgProps<span class="token operator">></span><span class="token punctuation">;</span>\n  <span class="token keyword">export</span> <span class="token keyword">default</span> content<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.h3,null,"1.2.3. ",e.createElement(a.code,null,".svgrrc")),"\n",e.createElement(a.p,null,"이 파일은 꼭 작성할 필요는 없다. 하지만 작성하면 읽어들인 SVG 컴포넌트의 어트리뷰트를 동적으로 지정할 수 있게 된다. 프로젝트 루트 디렉토리에 ",e.createElement(a.code,null,".svgrrc")," 파일을 만들어 아래 내용을 넣자."),"\n",e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token comment">// .svgrrc</span>\n<span class="token punctuation">{</span>\n  <span class="token property">"replaceAttrValues"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"#000"</span><span class="token operator">:</span> <span class="token string">"{props.fill}"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"이렇게 설정하면 읽어들인 svg 파일 내에서 ",e.createElement(a.code,null,'"#000"'),"로 값이 설정된 어트리뷰트는 ",e.createElement(a.code,null,"fill")," prop 의 값으로 치환된다."),"\n",e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="xml"><pre class="language-xml"><code class="language-xml"><span class="token comment">&lt;!-- Logo.svg --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>14<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>14<span class="token punctuation">"</span></span> <span class="token attr-name">viewBox</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 14 14<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M2.965 6.0925C4.045 8.215 ...<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"위처럼 작성된 ",e.createElement(a.code,null,"Logo.svg")," 파일을 ",e.createElement(a.code,null,"import")," 해서 아래처럼 쓸 수 있다."),"\n",e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> Logo <span class="token keyword">from</span> <span class="token string">"./Logo.svg"</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ...</span>\n<span class="token keyword">const</span> <span class="token function-variable function">SomeComp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token comment">// 이렇게 하면 Logo.svg 파일 내의 "#000" 어트리뷰트를 "#FFF" 로 치환되어 적용된다.</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Logo</span></span> <span class="token attr-name">width</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">120</span><span class="token punctuation">}</span></span> <span class="token attr-name">height</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">40</span><span class="token punctuation">}</span></span> <span class="token attr-name">fill</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">"#FFF"</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"이 기능은 react-native-svg-transformer 가 내부적으로 ",e.createElement(a.a,{href:"https://github.com/gregberge/svgr"},"SVGR"),"이라는 라이브러리를 사용해서 구현했다. 따라서 SVGR 에서 지원하는 다른 설정들도 사용할 수 있다. 좀 더 정보를 얻고 싶다면 ",e.createElement(a.a,{href:"https://react-svgr.com/docs/configuration-files/"},"해당 라이브러리의 문서"),"를 확인하자."),"\n",e.createElement(a.h4,null,"# ",e.createElement(a.code,null,".svgrrc")," 설정을 수정해도 적용되지 않는다?"),"\n",e.createElement(a.p,null,e.createElement(a.code,null,".svgrrc")," 설정을 수정하고 다시 빌드해도 수정한 사항이 적용되지 않을 때가 있다. 그럴 때는 metro 를 끄고 ",e.createElement(a.code,null,"yarn start --reset-cache")," 로 다시 실행시켜주자."),"\n",e.createElement(a.h1,null,"2. 공통 아이콘 컴포넌트 작성"),"\n",e.createElement(a.p,null,"이제 SVG 파일을 웹에서처럼 읽어들여 사용할 수 있다. 하지만 SVG 파일을 일일이 따로따로 ",e.createElement(a.code,null,"import")," 해줘야 하므로 사용하기 번거롭고, 아이콘들의 공통 props 혹은 속성을 관리하기도 힘들다."),"\n",e.createElement(a.p,null,"그러한 불편함을 해결하기 위해 별도의 컴포넌트를 하나 구현할 것이다. 해당 컴포넌트는 아이콘 이름만으로 아이콘을 사용할 수 있게 해줄 것이며 공통적으로 쓰일 props 들도 관리할 것이다."),"\n",e.createElement(a.h3,null,"2.1. SVG 파일들 re-export"),"\n",e.createElement(a.p,null,"일단 컴포넌트를 작성하기 전에, 모든 SVG 파일은 직접 ",e.createElement(a.code,null,"import")," 해서 쓰는 게 아니라 인덱스 파일을 따로 만들어 한 곳에서 관리하도록 하자."),"\n",e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// src/res/index.ts</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> Calendar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./calendar.svg"</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> Clock <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./clock.svg"</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> Sandwatch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./sandwatch.svg"</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> Watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./watch.svg"</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"이제 다른 파일에서는 아래와 같은 형식으로 import 가 가능하다."),"\n",e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> Calendar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../res"</span><span class="token punctuation">;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Calendar</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token comment">// 혹은</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> icons <span class="token keyword">from</span> <span class="token string">"../res"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> Comp <span class="token operator">=</span> icons<span class="token punctuation">[</span><span class="token string">"Calendar"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Comp</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.h3,null,"2.2. ",e.createElement(a.code,null,"<SvgIcon />")," 구현"),"\n",e.createElement(a.p,null,"하나의 파일에 묶이게 된 SVG 파일들을 읽어와 사용하는 컴포넌트 ",e.createElement(a.code,null,"<SvgIcon />")," 은 아래처럼 구현할 수 있다."),"\n",e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">// src/components/SvgIcon.tsx</span>\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> SvgProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-native-svg"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Icons <span class="token keyword">from</span> <span class="token string">"../res"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">IconProps</span> <span class="token operator">=</span> SvgProps <span class="token operator">&amp;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// res 에서 re-export 되는 SVG 파일들의 이름을 name 으로 받을 수 있다.</span>\n  name<span class="token operator">:</span> <span class="token keyword">keyof</span> <span class="token keyword">typeof</span> Icons<span class="token punctuation">;</span>\n  size<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">Icon</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token punctuation">,</span>\n  fill <span class="token operator">=</span> <span class="token string">"black"</span><span class="token punctuation">,</span>\n  width<span class="token operator">:</span> _width<span class="token punctuation">,</span>\n  height<span class="token operator">:</span> _height<span class="token punctuation">,</span>\n  size<span class="token punctuation">,</span>\n  <span class="token operator">...</span>props\n<span class="token punctuation">}</span><span class="token operator">:</span> IconProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> Comp <span class="token operator">=</span> Icons<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token comment">// `width`, `height` 를 따로 지정할 수 있지만</span>\n  <span class="token comment">// 아이콘은 보통 가로 세로 값이 같은 정사각형 형식이기 때문에</span>\n  <span class="token comment">// 여기서는 `size` 를 사용해 너비와 높이를 같이 지정할 수 있게 해주었다.</span>\n  <span class="token keyword">const</span> width <span class="token operator">=</span> _width <span class="token operator">??</span> size<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> height <span class="token operator">=</span> _height <span class="token operator">??</span> size<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> sizeProps <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span><span class="token punctuation">(</span>width <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token punctuation">{</span> width <span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span><span class="token punctuation">(</span>height <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token punctuation">{</span> height <span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Comp</span></span>\n      <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span>\n      <span class="token comment">// 1.2.3. `.svgrrc` 의 설정 덕분에 `fill` prop 을 이렇게 사용할 수 있다.</span>\n      <span class="token attr-name">fill</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>fill<span class="token punctuation">}</span></span>\n      <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>sizeProps<span class="token punctuation">}</span></span>\n    <span class="token punctuation">/></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Icon<span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.h1,null,"3. 결과"),"\n",e.createElement(a.h2,null,"3.1. 사용 예"),"\n",e.createElement(a.p,null,"구현한 컴포넌트 ",e.createElement(a.code,null,"<SvgIcon />"),"을 아래처럼 사용할 수 있다."),"\n",e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">// ...</span>\n<span class="token keyword">import</span> SvgIcon <span class="token keyword">from</span> <span class="token string">"./components/SvgIcon"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SafeAreaView</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">flex</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token number">24</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SvgIcon</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Calendar<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SvgIcon</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Clock<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orange<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SvgIcon</span></span> <span class="token attr-name">size</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">48</span><span class="token punctuation">}</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Watch<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gold<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">SafeAreaView</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.h2,null,"3.2. 소스코드 전문"),"\n",e.createElement(a.p,null,"설정 및 구현이 적용된 실제 소스코드를 참고하고 싶다면 ",e.createElement(a.a,{href:"https://github.com/ricale/RnSvgIconExample"},"RnSvgIconExample")," 리파지토리를 참고하자. 이 문서를 작성하면서 다시 한 번 적용 및 구현해본 리파지토리이며, 실행 또한 잘 된다."))}var o,c,l,r,u=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.ah)(),n.components);return a?e.createElement(a,n,e.createElement(p,n)):p(n)},k=s(1880),i=s(1883),g=s(3723),m=s(1858),d=s(3904),v=s(891),h=s(5534),y=s(5777),E=s(7178);const f=n=>{let{data:a,children:s}=n;const{frontmatter:t,sameSeriesPosts:p}=a.mdx,{title:o,slug:c,date:l,tags:r,series:u,heroImage:k,heroImageAlt:d}=t,v=k?(0,g.c)(k):null;return e.createElement(m.Z,null,e.createElement(w,null,e.createElement("h1",null,o),e.createElement(b,null,l),e.createElement(S,null,r.map((n=>e.createElement("li",{key:n},e.createElement(i.rU,{to:"/tags/"+n},n)))))),e.createElement(E.Z,{name:u,data:p,current:c}),!!v&&e.createElement(x,{image:v,alt:null!=d?d:""}),e.createElement(h.Z,null,s),e.createElement(y.Z,null))},w=v.ZP.div(o||(o=(0,k.Z)(["\n  margin: 60px 0 72px;\n  padding: 0 24px;\n\n  & > h1 {\n    font-size: 2.5rem;\n    word-break: keep-all;\n    margin: 0;\n  }\n"]))),x=(0,v.ZP)(g.G)(c||(c=(0,k.Z)(["\n  margin-bottom: 16px;\n"]))),b=v.ZP.div(l||(l=(0,k.Z)(["\n  margin: 16px 0;\n"]))),S=v.ZP.ul(r||(r=(0,k.Z)(["\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: ","px;\n\n  margin: 0;\n  padding: 0;\n  list-style: none;\n\n  > li {\n    padding: ","px\n      ","px;\n    border-radius: 2px;\n\n    background-color: ",";\n    color: ",";\n\n    > a {\n      text-decoration: none;\n    }\n  }\n"])),(n=>n.theme.dimens.gutter),(n=>n.theme.dimens.spacing),(n=>n.theme.dimens.gutter),(n=>n.theme.colors.tag),(n=>n.theme.colors.onTag)),I=n=>{var a,s;let{data:t}=n;const{frontmatter:{title:p,slug:o,tags:c,heroImage:l,previewContent:r},excerpt:u}=t.mdx,k=l?(0,g.c)(l):null;return e.createElement(d.Z,{title:p,description:null!=r?r:u,path:"posts/"+o,thumbnail:null==k||null===(a=k.images)||void 0===a||null===(s=a.fallback)||void 0===s?void 0:s.src,keywords:c,ogType:"article"})};function _(n){return e.createElement(f,n,e.createElement(u,n))}}}]);
//# sourceMappingURL=component---src-pages-posts-mdx-frontmatter-slug-tsx-content-file-path-users-kangseong-workspace-private-ricalelog-posts-2022-220409-react-native-svg-icon-component-index-mdx-3cd4b63476fc035b462b.js.map