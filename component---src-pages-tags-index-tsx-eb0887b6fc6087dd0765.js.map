{"version":3,"file":"component---src-pages-tags-index-tsx-eb0887b6fc6087dd0765.js","mappings":"0JAOA,MA+BMA,EAAYC,EAAAA,GAAAA,IAAU,gEAEdC,GAAMA,EAAEC,MAAMC,OAAOC,SAEhBJ,EAAAA,GAAAA,OAAa,sBAEhC,IArCeK,IAAgC,IAA/B,SAAEC,GAAuB,EACvC,MAAMC,GAAOC,EAAAA,EAAAA,IAAe,cAS5B,OACEC,EAAAA,cAACC,EAAAA,GAAa,CAACR,MAAOS,EAAAA,IACpBF,EAAAA,cAACG,EAAAA,GAAW,MACZH,EAAAA,cAACV,EAAS,KACRU,EAAAA,cAAAA,SAAAA,KAASF,EAAKM,KAAKC,aAAaC,OAChCN,EAAAA,cAAAA,MAAAA,KACEA,EAAAA,cAAAA,KAAAA,KACEA,EAAAA,cAAAA,KAAAA,KACEA,EAAAA,cAACO,EAAAA,GAAI,CAACC,GAAG,UAAQ,UAEnBR,EAAAA,cAAAA,KAAAA,KACEA,EAAAA,cAACO,EAAAA,GAAI,CAACC,GAAG,SAAO,WAItBR,EAAAA,cAAAA,OAAAA,KAAOH,IAEK,C,+CCdpB,IAdYD,IAA0B,IAAzB,MAAEU,GAAiB,EAC9B,MASMG,GATOV,EAAAA,EAAAA,IAAe,cASLK,KAAKC,aAAaC,MACzC,OAAON,EAAAA,cAAAA,QAAAA,KAAQM,EAAWA,EAAK,MAAMG,EAAcA,EAAkB,C,6GCJvE,MA4BaC,EAAO,IAAMV,EAAAA,cAACW,EAAAA,EAAG,CAACL,MAAM,UAErC,UA9BiBV,IAAuC,IAAtC,KAAEE,GAA+B,EACjD,MAAMc,EAAOd,EAAKe,OAAOC,MAAMC,MAAK,CAACC,EAAGC,IAAMA,EAAEC,WAAaF,EAAEE,aAC/D,OACElB,EAAAA,cAACmB,EAAAA,EAAM,KACLnB,EAAAA,cAAAA,KAAAA,KAAAA,QACAA,EAAAA,cAAAA,KAAAA,KACGY,EAAKQ,KAAKC,GACTrB,EAAAA,cAAAA,KAAAA,CAAIsB,IAAKD,EAAIE,YACXvB,EAAAA,cAACO,EAAAA,GAAI,CAACC,GAAE,SAAWa,EAAIE,WAAU,KAAI,GAAKF,EAAIE,YAAqB,IACnEvB,EAAAA,cAAAA,QAAAA,KAAAA,GAAWqB,EAAIH,gBAId,C,6ICtBN,MACLM,QAASjC,EAAM,IACfkC,EAAG,UACHC,EAAS,cACTzB,EACA0B,aAAY,oBACZC,GACEC,ECsBJ,I,EAAA,EAXe,CACbnC,OAAQ,CACNoC,UAAWC,GACXpC,OAAQoC,GACRC,OAAQD,EACRE,QAASF,EACTG,KAAMH,GAERI,OA5Ba,CACbC,WAAY,QACZC,aAAc,QAEdC,UAAW,UACXC,YAAa,QAEbC,iBAAkB,UAClBC,WAAY,UACZC,aAAc,QAEdC,KAAM,UACNC,OAAQ,UAERvB,IAAK,UACLwB,MAAO,UAEPC,YAAa,U,UCaf,MA9BoBlB,EAAiB,6ZAUZpC,GAAMA,EAAEC,MAAM0C,OAAOC,aAChC5C,GAAMA,EAAEC,MAAM0C,OAAOE,e,QCNnC,O,uBCPe,SAASU,EAA4BC,EAASC,GAK3D,OAJKA,IACHA,EAAMD,EAAQE,MAAM,IAEtBF,EAAQC,IAAMA,EACPD,CACT,C","sources":["webpack://ricalelog/./src/components/Layout.tsx","webpack://ricalelog/./src/components/Seo.tsx","webpack://ricalelog/./src/pages/tags/index.tsx","webpack://ricalelog/./src/themes/themedStyledComponents.ts","webpack://ricalelog/./src/themes/normal.ts","webpack://ricalelog/./src/themes/GlobalStyle.ts","webpack://ricalelog/./src/themes/index.ts","webpack://ricalelog/./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js"],"sourcesContent":["import { graphql, Link, useStaticQuery } from \"gatsby\";\nimport * as React from \"react\";\nimport styled, { GlobalStyle, normalTheme, ThemeProvider } from \"../themes\";\n\ntype LayoutProps = {\n  children?: React.ReactNode;\n};\nconst Layout = ({ children }: LayoutProps) => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n  return (\n    <ThemeProvider theme={normalTheme}>\n      <GlobalStyle />\n      <Container>\n        <header>{data.site.siteMetadata.title}</header>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/posts\">posts</Link>\n            </li>\n            <li>\n              <Link to=\"/tags\">tags</Link>\n            </li>\n          </ul>\n        </nav>\n        <main>{children}</main>\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nconst Container = styled.div`\n  max-width: 800px;\n  padding: ${(p) => p.theme.dimens.margin}px;\n`;\nconst BlogHeader = styled.header``;\n\nexport default Layout;\n","import * as React from \"react\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\ntype SeoProps = {\n  title?: string;\n};\nconst Seo = ({ title }: SeoProps) => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n  const siteTitle = data.site.siteMetadata.title;\n  return <title>{title ? `${title} | ${siteTitle}` : siteTitle}</title>;\n};\n\nexport default Seo;\n","import * as React from \"react\";\nimport { graphql, Link, PageProps } from \"gatsby\";\nimport Layout from \"../../components/Layout\";\nimport Seo from \"../../components/Seo\";\n\ntype TagsPageData = {\n  allMdx: {\n    group: {\n      totalCount: number;\n      fieldValue: string;\n    }[];\n  };\n};\nconst TagsPage = ({ data }: PageProps<TagsPageData>) => {\n  const tags = data.allMdx.group.sort((a, b) => b.totalCount - a.totalCount);\n  return (\n    <Layout>\n      <h1>tags</h1>\n      <ul>\n        {tags.map((tag) => (\n          <li key={tag.fieldValue}>\n            <Link to={`/tags/${tag.fieldValue}/`}>{`${tag.fieldValue}`}</Link>{\" \"}\n            <small>{`${tag.totalCount}`}</small>\n          </li>\n        ))}\n      </ul>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query {\n    allMdx(limit: 2000) {\n      group(field: { frontmatter: { tags: SELECT } }) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`;\n\nexport const Head = () => <Seo title=\"태그 목록\" />;\n\nexport default TagsPage;\n","import * as styledComponents from \"styled-components\";\n\nimport { RicalelogTheme } from \"./normal\";\n\nexport const {\n  default: styled,\n  css,\n  keyframes,\n  ThemeProvider,\n  ThemeContext,\n  createGlobalStyle,\n} = styledComponents as unknown as styledComponents.ThemedStyledComponentsModule<RicalelogTheme>;\n","const base = 16;\n\nconst colors = {\n  background: \"black\",\n  onBackground: \"white\",\n\n  codeblock: \"#111111\",\n  onCodeblock: \"white\",\n\n  blockquoteBorder: \"#666666\",\n  blockquote: \"#111111\",\n  onBlockquote: \"white\",\n\n  code: \"#333333\",\n  onCode: \"#DDDDDD\",\n\n  tag: \"#111111\",\n  onTag: \"skyblue\",\n\n  tableBorder: \"white\",\n};\n\nconst normal = {\n  dimens: {\n    bigMargin: base * 2,\n    margin: base * 1,\n    gutter: base * 0.5,\n    spacing: base * 0.25,\n    thin: base * 0.125,\n  },\n  colors,\n};\n\nexport default normal;\nexport type RicalelogTheme = typeof normal;\n","import { createGlobalStyle } from \"./themedStyledComponents\";\n\nconst GlobalStyle = createGlobalStyle`\n  html, body, #root {\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    font-size: 18px;\n    line-height: 180%;\n\n    overflow-x: hidden;\n\n    background-color: ${(p) => p.theme.colors.background};\n    color: ${(p) => p.theme.colors.onBackground};\n  }\n\n  a {\n    color: skyblue;\n  }\n\n  input, button, select {\n    margin: 0;\n    padding: 0;\n    font-size: 16px;\n    appearance: none;\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n`;\n\nexport default GlobalStyle;\n","import {\n  styled,\n  css,\n  keyframes,\n  ThemeProvider,\n} from \"./themedStyledComponents\";\n\nexport default styled;\nexport { css, keyframes, ThemeProvider };\n\nexport { default as normalTheme } from \"./normal\";\nexport * from \"./normal\";\nexport { default as GlobalStyle } from \"./GlobalStyle\";\nexport { default as useTheme } from \"./useTheme\";\n","export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n  strings.raw = raw;\n  return strings;\n}"],"names":["Container","styled","p","theme","dimens","margin","_ref","children","data","useStaticQuery","React","ThemeProvider","normalTheme","GlobalStyle","site","siteMetadata","title","Link","to","siteTitle","Head","Seo","tags","allMdx","group","sort","a","b","totalCount","Layout","map","tag","key","fieldValue","default","css","keyframes","ThemeContext","createGlobalStyle","styledComponents","bigMargin","base","gutter","spacing","thin","colors","background","onBackground","codeblock","onCodeblock","blockquoteBorder","blockquote","onBlockquote","code","onCode","onTag","tableBorder","_taggedTemplateLiteralLoose","strings","raw","slice"],"sourceRoot":""}