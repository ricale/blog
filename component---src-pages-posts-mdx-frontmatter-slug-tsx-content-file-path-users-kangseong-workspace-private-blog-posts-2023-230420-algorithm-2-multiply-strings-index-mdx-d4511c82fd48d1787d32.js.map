{"version":3,"file":"component---src-pages-posts-mdx-frontmatter-slug-tsx-content-file-path-users-kangseong-workspace-private-blog-posts-2023-230420-algorithm-2-multiply-strings-index-mdx-d4511c82fd48d1787d32.js","mappings":"2MAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,IAAK,MACLC,GAAI,KACJC,EAAG,IACHC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,EAAG,IACHC,KAAM,OACNC,OAAQ,WACPC,EAAAA,EAAAA,MAAsBb,EAAMc,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBd,EAAYG,IAAK,CACpFY,UAAW,MACVD,EAAAA,cAAoBd,EAAYI,GAAI,CACrCY,GAAI,mBACJC,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBd,EAAYK,EAAG,CACpCc,KAAM,4HACN,aAAc,6BACdJ,UAAW,iBACVD,EAAAA,cAAoBd,EAAYG,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,sBAAyBP,EAAAA,cAAoBd,EAAYM,GAAI,KAAM,KAAMQ,EAAAA,cAAoBd,EAAYO,GAAI,KAAM,+BAAgC,KAAMO,EAAAA,cAAoBd,EAAYO,GAAI,KAAM,oBAAqB,MAAOO,EAAAA,cAAoBd,EAAYQ,GAAI,CACtQQ,GAAI,KACJC,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBd,EAAYK,EAAG,CACpCc,KAAM,sBACN,aAAc,eACdJ,UAAW,iBACVD,EAAAA,cAAoBd,EAAYG,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,MAAOP,EAAAA,cAAoBd,EAAYS,EAAG,KAAMK,EAAAA,cAAoBd,EAAYK,EAAG,CACtFc,KAAM,mDACL,oCAAqCL,EAAAA,cAAoBd,EAAYS,EAAG,KAAM,qBAAsBK,EAAAA,cAAoBd,EAAYU,KAAM,KAAM,QAAS,KAAMI,EAAAA,cAAoBd,EAAYU,KAAM,KAAM,QAAS,oBAAqBI,EAAAA,cAAoBd,EAAYS,EAAG,KAAM,iCAAkCK,EAAAA,cAAoBd,EAAYU,KAAM,KAAM,UAAW,0BAA2BI,EAAAA,cAAoBd,EAAYQ,GAAI,CAC3aQ,GAAI,KACJC,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBd,EAAYK,EAAG,CACpCc,KAAM,sBACN,aAAc,eACdJ,UAAW,iBACVD,EAAAA,cAAoBd,EAAYG,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,MAAOP,EAAAA,cAAoBd,EAAYS,EAAG,KAAM,+DAAgEK,EAAAA,cAAoBd,EAAYG,IAAK,CACxJiB,wBAAyB,CACvBC,OAAQ,sLAERP,EAAAA,cAAoBd,EAAYS,EAAG,KAAM,sEAAuEK,EAAAA,cAAoBd,EAAYQ,GAAI,CACtJQ,GAAI,OACJC,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBd,EAAYK,EAAG,CACpCc,KAAM,wBACN,aAAc,iBACdJ,UAAW,iBACVD,EAAAA,cAAoBd,EAAYG,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,QAASP,EAAAA,cAAoBd,EAAYG,IAAK,CACjDY,UAAW,uBACVD,EAAAA,cAAoBd,EAAYG,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,gwgBAERP,EAAAA,cAAoBd,EAAYW,OAAQ,CAC1CI,UAAW,yBACV,SAAUD,EAAAA,cAAoBd,EAAYQ,GAAI,CAC/CQ,GAAI,MACJC,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBd,EAAYK,EAAG,CACpCc,KAAM,+BACN,aAAc,gBACdJ,UAAW,iBACVD,EAAAA,cAAoBd,EAAYG,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,OAAQP,EAAAA,cAAoBd,EAAYS,EAAG,KAAM,oCAAqCK,EAAAA,cAAoBd,EAAYS,EAAG,KAAM,yEAA0EK,EAAAA,cAAoBd,EAAYS,EAAG,KAAM,8HAA+HK,EAAAA,cAAoBd,EAAYS,EAAG,KAAM,gBAAiBK,EAAAA,cAAoBd,EAAYQ,GAAI,CACldQ,GAAI,OACJC,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBd,EAAYK,EAAG,CACpCc,KAAM,wBACN,aAAc,iBACdJ,UAAW,iBACVD,EAAAA,cAAoBd,EAAYG,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,QAASP,EAAAA,cAAoBd,EAAYG,IAAK,CACjDY,UAAW,uBACVD,EAAAA,cAAoBd,EAAYG,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,ihOAERP,EAAAA,cAAoBd,EAAYW,OAAQ,CAC1CI,UAAW,yBACV,SAAUD,EAAAA,cAAoBd,EAAYQ,GAAI,CAC/CQ,GAAI,KACJC,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBd,EAAYK,EAAG,CACpCc,KAAM,sBACN,aAAc,eACdJ,UAAW,iBACVD,EAAAA,cAAoBd,EAAYG,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,MAAOP,EAAAA,cAAoBd,EAAYS,EAAG,KAAM,8DAA+D,KAAMK,EAAAA,cAAoBd,EAAYG,IAAK,CAC7JY,UAAW,OACVD,EAAAA,cAAoBd,EAAYS,EAAG,KAAM,MAAOK,EAAAA,cAAoBd,EAAYM,GAAI,KAAM,KAAMQ,EAAAA,cAAoBd,EAAYO,GAAI,KAAM,KAAMO,EAAAA,cAAoBd,EAAYM,GAAI,KAAM,KAAMQ,EAAAA,cAAoBd,EAAYO,GAAI,KAAM,KAAMO,EAAAA,cAAoBd,EAAYM,GAAI,KAAM,KAAMQ,EAAAA,cAAoBd,EAAYO,GAAI,KAAMO,EAAAA,cAAoBd,EAAYK,EAAG,CAC9Wc,KAAM,6HACL,uBAA0B,MAAO,MAAO,MAAO,MAAO,KAAML,EAAAA,cAAoBd,EAAYO,GAAI,KAAMO,EAAAA,cAAoBd,EAAYK,EAAG,CAC1Ic,KAAM,uBACL,OAAQ,KAAML,EAAAA,cAAoBd,EAAYO,GAAI,KAAMO,EAAAA,cAAoBd,EAAYK,EAAG,CAC5Fc,KAAM,uBACL,OAAQ,KAAML,EAAAA,cAAoBd,EAAYO,GAAI,KAAMO,EAAAA,cAAoBd,EAAYK,EAAG,CAC5Fc,KAAM,yBACL,SAAU,KAAML,EAAAA,cAAoBd,EAAYO,GAAI,KAAMO,EAAAA,cAAoBd,EAAYK,EAAG,CAC9Fc,KAAM,gCACL,QAAS,KAAML,EAAAA,cAAoBd,EAAYO,GAAI,KAAMO,EAAAA,cAAoBd,EAAYK,EAAG,CAC7Fc,KAAM,yBACL,SAAU,KAAML,EAAAA,cAAoBd,EAAYO,GAAI,KAAMO,EAAAA,cAAoBd,EAAYK,EAAG,CAC9Fc,KAAM,uBACL,OAAQ,OACb,CAKA,ICtJIG,EAAiBC,EAAkBC,EDsJvC,EAJA,SAAoBzB,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAO0B,QAASC,GAAazB,OAAOC,OAAO,CAAC,GAAGU,EAAAA,EAAAA,MAAsBb,EAAMc,YAC3E,OAAOa,EAAYZ,EAAAA,cAAoBY,EAAW3B,EAAOe,EAAAA,cAAoBhB,EAAmBC,IAAUD,EAAkBC,EAC9H,E,uHCxIA,SAAS4B,EAAeC,GACtB,IAAI,KAACC,EAAI,SAAEC,GAAYF,EACvB,MAAMG,EAAMjB,EAAAA,UACN,YAACkB,EAAW,gBAAEC,GAAmBJ,EAAKK,KACtC,MAACC,EAAK,KAAEC,EAAI,KAAEC,EAAI,OAAEC,GAAUN,EAWpC,OAVAlB,EAAAA,WAAgB,KACd,IAAIyB,EACJ,MAAMC,EAAmD,QAAhCD,EAAeR,EAAIU,eAAsC,IAAjBF,OAA0B,EAASA,EAAaG,iBAAiB,kDAC5HC,EAAW,IAAIC,sBAAqB,KAAMC,EAAAA,EAAAA,GAAwBd,EAAKS,IAAkB,CAC7FM,WAAY,mBACZC,UAAW,CAAC,EAAG,KAGjB,OADAP,SAAkEA,EAAgBQ,SAAQC,GAAWN,EAASO,QAAQD,KAC/G,IAAMN,EAASQ,YAAY,GACjC,IACIrC,EAAAA,cAAoBsC,EAAAA,EAAQ,KAAMtC,EAAAA,cAAoBuC,EAAQ,KAAMvC,EAAAA,cAAoB,KAAM,KAAMA,EAAAA,cAAoBwC,EAAAA,KAAM,CACnIC,GAAI,UAAYnB,GACfD,IAASrB,EAAAA,cAAoB0C,EAAa,KAAMnB,IAAQvB,EAAAA,cAAoB2C,EAAAA,EAAiB,CAC9FC,KAAMpB,EACNT,KAAMI,EACNQ,QAASL,IACPtB,EAAAA,cAAoB6C,EAAa,CACnC5B,IAAKA,GACJD,GAAWhB,EAAAA,cAAoB8C,EAAAA,EAAuB,CACvD/B,KAAMI,EACNQ,QAASL,IACPtB,EAAAA,cAAoB+C,EAAAA,EAAmB,MAAO/C,EAAAA,cAAoBgD,EAAAA,EAAU,MAClF,CACA,MAAMT,EAASU,EAAAA,GAAAA,IAAWzC,IAAoBA,GAAkB0C,EAAAA,EAAAA,GAA4B,CAAC,4JAA6J,sBAAsBvD,GAAKA,EAAEwD,MAAMC,OAAOC,eAC9RX,EAAcO,EAAAA,GAAAA,IAAWxC,IAAqBA,GAAmByC,EAAAA,EAAAA,GAA4B,CAAC,8BAC9FL,GAAcI,EAAAA,EAAAA,IAAOK,EAAAA,EAAPL,CAAmBvC,IAAqBA,GAAmBwC,EAAAA,EAAAA,GAA4B,CAAC,kCAE/FK,EAAOC,IAClB,IAAIC,EAAeC,EACnB,IAAI,KAAC3C,GAAQyC,EACb,MAAOtC,aAAa,MAACG,EAAK,KAAEC,EAAI,KAAEqC,EAAI,UAAEC,EAAS,eAAEC,GAAe,QAAEC,GAAW/C,EAAKK,IAC9E2C,EAAQH,GAAYI,EAAAA,EAAAA,GAASJ,GAAa,KAChD,OAAO5D,EAAAA,cAAoBiE,EAAAA,EAAK,CAC9B5C,MAAOA,EACP6C,YAAaL,QAAuDA,EAAiBC,EACrFK,KAAM,SAAW7C,EACjB8C,UAAWL,SAAiF,QAAlCN,EAAgBM,EAAMM,cAAsC,IAAlBZ,GAAyF,QAApDC,EAAwBD,EAAca,gBAAgD,IAA1BZ,OAArJ,EAAiMA,EAAsBa,IACvQC,SAAUb,EACVc,OAAQ,WACR,EAGW,SAASC,EAAiBzF,GACvC,OAAOe,EAAAA,cAAoBa,EAAgB5B,EAAOe,EAAAA,cAAoB2E,EAAqB1F,GAC7F,C","sources":["webpack://ricalelog/./posts/2023/230420-algorithm-2-multiply-strings/index.mdx","webpack://ricalelog/./src/pages/posts/{mdx.frontmatter__slug}.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    div: \"div\",\n    h3: \"h3\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    button: \"button\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.div, {\n    className: \"md\"\n  }, React.createElement(_components.h3, {\n    id: \"시리즈-알고리즘-문제풀기-개요\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%8B%9C%EB%A6%AC%EC%A6%88-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%AC%B8%EC%A0%9C%ED%92%80%EA%B8%B0-%EA%B0%9C%EC%9A%94\",\n    \"aria-label\": \"시리즈 알고리즘 문제풀기 개요 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"시리즈 \\\"알고리즘 문제풀기\\\" 개요\"), React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"1~2주 (최소) 1개 문제 풀기를 목표로 한다.\"), \"\\n\", React.createElement(_components.li, null, \"JavaScript 로 푼다.\"), \"\\n\"), React.createElement(_components.h1, {\n    id: \"문제\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EB%AC%B8%EC%A0%9C\",\n    \"aria-label\": \"문제 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"문제\"), React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://leetcode.com/problems/multiply-strings/\"\n  }, \"LeetCode - 43. Multiply Strings\")), React.createElement(_components.p, null, \"문자열로 표현된 두 개의 숫자를 \", React.createElement(_components.code, null, \"num1\"), \", \", React.createElement(_components.code, null, \"num2\"), \" 를 곱해서 결과를 반환하자.\"), React.createElement(_components.p, null, \"숫자는 최소 1자리에서 최대 200자리까지 가능하다. \", React.createElement(_components.code, null, \"BigInt\"), \" 같은 내장 라이브러리는 쓰면 안 된다.\"), React.createElement(_components.h1, {\n    id: \"접근\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%A0%91%EA%B7%BC\",\n    \"aria-label\": \"접근 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"접근\"), React.createElement(_components.p, null, \"실제로 곱셈을 할 때와 동일하게 생각해보았다. 보통 세 자리 수 두 개를 곱한다고 하면 아래처럼 계산한다.\"), React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">  123\\nx 456\\n-----\\n  738\\n 615\\n492\\n-----\\n56088</code></pre></div>\"\n    }\n  }), React.createElement(_components.p, null, \"한 숫자에 자랏수마다 다른 한 숫자를 곱한 뒤 곱한 결과를 합하는 것이다. 이걸 코드로 그대로 구현하면 되겠다 싶었다.\"), React.createElement(_components.h1, {\n    id: \"풀이-1\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%ED%92%80%EC%9D%B4-1\",\n    \"aria-label\": \"풀이 1 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"풀이 1\"), React.createElement(_components.div, {\n    className: \"codeblock-container\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre style=\\\"counter-reset: linenumber 0\\\" class=\\\"language-js line-numbers\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">multiply</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">num1<span class=\\\"token punctuation\\\">,</span> num2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 둘 중 하나라도 \\\"0\\\" 이라면 바로 결과를 반환한다.</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>num1 <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>num2 <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// 곱셈을 편하게 하기 위해 두 숫자를 배열로 만든뒤 뒤집는다.</span>\\n  <span class=\\\"token comment\\\">// 뒤집는 건 사실 필수가 아니지만, 인덱스를 좀 더 편하게 생각하려고 뒤집었다.</span>\\n  <span class=\\\"token keyword\\\">const</span> a1 <span class=\\\"token operator\\\">=</span> num1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> a2 <span class=\\\"token operator\\\">=</span> num2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">let</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> j <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> a2<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// (`num1` * `num2` 의 j 번째 숫자) 의 결과를 얻는다.</span>\\n    <span class=\\\"token comment\\\">// `getMultiplyWithOneDigit` 함수의 코드는 26 라인에 나온다.</span>\\n    <span class=\\\"token keyword\\\">const</span> subResult <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getMultiplyWithOneDigit</span><span class=\\\"token punctuation\\\">(</span>a1<span class=\\\"token punctuation\\\">,</span> a2<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> j<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// 결과값에 `subResult` 값을 합산한다.</span>\\n    <span class=\\\"token comment\\\">// `addTo` 함수의 코드는 59 라인에 나온다.</span>\\n    <span class=\\\"token function\\\">addTo</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">,</span> subResult<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// 결과를 반환한다.</span>\\n  <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// a1 과 n 을 곱한다. (digit 는 n 이 a2 의 몇 번째 자릿수였는지 알려주는 값.)</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">getMultiplyWithOneDigit</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">a1<span class=\\\"token punctuation\\\">,</span> n<span class=\\\"token punctuation\\\">,</span> digit</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 곱하려는 값이 \\\"0\\\" 이면 \\\"0\\\" 을 바로 반환한다.</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// `n` 의 자릿수만큼 \\\"0\\\"으로 채운다.</span>\\n  <span class=\\\"token comment\\\">// 예를 들어 `a1` 이 \\\"123\\\" 이고 `n` 이 \\\"456\\\" 중에 \\\"4\\\" 였다고 하면</span>\\n  <span class=\\\"token comment\\\">// 두 수의 곱의 결과는 \\\"492\\\" 지만, `n` 이 백의 자리 숫자였으므로</span>\\n  <span class=\\\"token comment\\\">// 결과에 합산하기 편하게 \\\"49200\\\" 으로 만들어준 것.</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Array</span><span class=\\\"token punctuation\\\">(</span>digit<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fill</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// `a1` 의 자릿수 별로 `n` 을 곱한다.</span>\\n  <span class=\\\"token comment\\\">// 곱한 결과가 10 이상이면 (결과 % 10) 만 저장하고</span>\\n  <span class=\\\"token comment\\\">// (결과 / 10) 은 다음 자릿수로 넘긴다.</span>\\n  <span class=\\\"token keyword\\\">let</span> more <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> a1<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> multiplied <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">+</span>a1<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token operator\\\">+</span>n <span class=\\\"token operator\\\">+</span> more<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> subResult <span class=\\\"token operator\\\">=</span> multiplied <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\n    result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>subResult<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    more <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>multiplied <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// 다 곱했는데도 `more` 에 값이 있다는 것은 최종 자릿수의 곱셈 결과가</span>\\n  <span class=\\\"token comment\\\">// 10 이상이었다는 뜻이다. 그렇다면 해당 값도 밀어넣어주자.</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>more <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>more<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// `result` 와 `adding` 을 더한다.</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">addTo</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">result<span class=\\\"token punctuation\\\">,</span> adding</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 더하려는 값 `adding` 이 \\\"0\\\" 이면 더해봤자 결과가 같으므로 바로 종료한다.</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>adding<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">&amp;&amp;</span> adding<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> more <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// `result` 와 `adding\\\" 을 자릿수별로 차례차례 더해서</span>\\n  <span class=\\\"token comment\\\">// 다시 `result` 에 넣는다.</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">&lt;</span> result<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">&lt;</span> adding<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> added <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">+</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">??</span> <span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token operator\\\">+</span><span class=\\\"token punctuation\\\">(</span>adding<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">??</span> <span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> more<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// (더한 결과 % 10) 만 현재 자릿수 값에 반영하고</span>\\n    <span class=\\\"token comment\\\">// (더한 결과 / 10) 은 다음 자릿수에 넘긴다.</span>\\n    result<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>added <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">10</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">;</span>\\n    more <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>added <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// 덧셈을 다 끝냈는데 `more` 에 값이 남았다면 해당 값은 맨 앞자리에 붙여준다.</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>more <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>more<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// `result` 에 결과를 바로 반영했으므로 값을 따로 반환할 필요는 없다.</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code><span aria-hidden=\\\"true\\\" class=\\\"line-numbers-rows\\\" style=\\\"white-space: normal; width: auto; left: 0;\\\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\"\n    }\n  }), React.createElement(_components.button, {\n    className: \"codeblock-copy-button\"\n  }, \"COPY\")), React.createElement(_components.h1, {\n    id: \"개선점\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EA%B0%9C%EC%84%A0%EC%A0%90\",\n    \"aria-label\": \"개선점 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"개선점\"), React.createElement(_components.p, null, \"위 코드도 문제 없이 동작한다. 하지만 개선점이 존재한다.\"), React.createElement(_components.p, null, \"첫째로 숫자를 뒤집을 필요가 없다. 이건 순전히 생각하기 편하려고 뒤집었던 것이었고, 뒤집지 않아도 곱하는 데 문제가 없다.\"), React.createElement(_components.p, null, \"둘째로 현재는 숫자를 자릿수 별로 곱한 뒤에, 곱한 값을 결과에 합산하고 있는데 이렇게 할 필요가 없다. 곱하면서 바로바로 결과에 합산해도 되기 때문이다. 이러면 코드가 더 단순해지고 불필요한 반복문도 제거할 수 있다.\"), React.createElement(_components.p, null, \"그럼 이제 개선해보자.\"), React.createElement(_components.h1, {\n    id: \"풀이-2\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%ED%92%80%EC%9D%B4-2\",\n    \"aria-label\": \"풀이 2 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"풀이 2\"), React.createElement(_components.div, {\n    className: \"codeblock-container\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre style=\\\"counter-reset: linenumber 0\\\" class=\\\"language-js line-numbers\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">multiply</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">num1<span class=\\\"token punctuation\\\">,</span> num2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>num1 <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>num2 <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// - num1 * num2 의 결과값의 길이는</span>\\n  <span class=\\\"token comment\\\">//   최소 num1.length + num2.length - 1</span>\\n  <span class=\\\"token comment\\\">//   최대 num1.length + num2.length</span>\\n  <span class=\\\"token comment\\\">// - 최대 길이만큼 결과 배열을 미리 만들어서 0으로 채워두었다.</span>\\n  <span class=\\\"token keyword\\\">const</span> resArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Array</span><span class=\\\"token punctuation\\\">(</span>num1<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fill</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> num1<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> j <span class=\\\"token operator\\\">=</span> num2<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// i 번째 숫자와 j 번째 숫자를 곱한 값은 결과값의 i + j + 1 번째에 반영된다.</span>\\n      <span class=\\\"token keyword\\\">const</span> curr <span class=\\\"token operator\\\">=</span> i <span class=\\\"token operator\\\">+</span> j <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n\\n      <span class=\\\"token comment\\\">// 두 숫자를 곱한 뒤 현재 결과 자릿수의 값과 합산한다.</span>\\n      <span class=\\\"token keyword\\\">const</span> multiplied <span class=\\\"token operator\\\">=</span> resArr<span class=\\\"token punctuation\\\">[</span>curr<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token operator\\\">+</span>num1<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token operator\\\">+</span>num2<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token comment\\\">// 값이 10 이상이면 10을 나눈 나머지만 해당 자릿수에 반영한다.</span>\\n      resArr<span class=\\\"token punctuation\\\">[</span>curr<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> multiplied <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token comment\\\">// 값을 10으로 나눈 값을 바로 윗자릿수에 합산한다.</span>\\n      resArr<span class=\\\"token punctuation\\\">[</span>curr <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>multiplied <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// 결과 배열을 문자열로 만든다.</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> resArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// - 만약 첫 자릿수의 값이 0이라면 쓸모 없는 값이므로 해당 값을 잘라낸다.</span>\\n  <span class=\\\"token comment\\\">// - 왜 첫 자릿수의 값이 0인 경우가 생기냐면</span>\\n  <span class=\\\"token comment\\\">//   최대 자릿수 num1.length + num2.length 만큼 미리 0을 채워놨기 때문이다.</span>\\n  <span class=\\\"token comment\\\">//   결과가 최소 자릿수 num1.length + num2.length - 1 일 경우 첫 번째 자릿수는 0으로 남게 된다.</span>\\n  <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">\\\"0\\\"</span> <span class=\\\"token operator\\\">?</span> result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">:</span> result<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code><span aria-hidden=\\\"true\\\" class=\\\"line-numbers-rows\\\" style=\\\"white-space: normal; width: auto; left: 0;\\\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\"\n    }\n  }), React.createElement(_components.button, {\n    className: \"codeblock-copy-button\"\n  }, \"COPY\")), React.createElement(_components.h1, {\n    id: \"후기\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%ED%9B%84%EA%B8%B0\",\n    \"aria-label\": \"후기 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"후기\"), React.createElement(_components.p, null, \"어렵다기보다는 헷갈리는 문제였다. 하지만 침착하게만 하면 어떻게든 풀 수 있는 문제이기도 한 것 같다.\")), \"\\n\", React.createElement(_components.div, {\n    className: \"toc\"\n  }, React.createElement(_components.p, null, \"목차\"), React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"#%EC%8B%9C%EB%A6%AC%EC%A6%88-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%AC%B8%EC%A0%9C%ED%92%80%EA%B8%B0-%EA%B0%9C%EC%9A%94\"\n  }, \"시리즈 \\\"알고리즘 문제풀기\\\" 개요\")), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"#%EB%AC%B8%EC%A0%9C\"\n  }, \"문제\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"#%EC%A0%91%EA%B7%BC\"\n  }, \"접근\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"#%ED%92%80%EC%9D%B4-1\"\n  }, \"풀이 1\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"#%EA%B0%9C%EC%84%A0%EC%A0%90\"\n  }, \"개선점\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"#%ED%92%80%EC%9D%B4-2\"\n  }, \"풀이 2\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"#%ED%9B%84%EA%B8%B0\"\n  }, \"후기\")), \"\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/kangseong/workspace/private/blog/posts/2023/230420-algorithm-2-multiply-strings/index.mdx\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nvar _templateObject, _templateObject2, _templateObject3;\nimport * as React from \"react\";\nimport {Link} from \"gatsby\";\nimport {getImage} from \"gatsby-plugin-image\";\nimport Layout from \"../../components/Layout\";\nimport Seo from \"../../components/Seo\";\nimport styled from \"../../themes\";\nimport MdxContent from \"../../components/MdxContent\";\nimport NearbySeriesPostLinks from \"../../components/NearbySeriesPostLinks\";\nimport Comments from \"../../components/Comments\";\nimport SameSeriesPosts from \"../../components/SameSeriesPosts\";\nimport highlightCurrentHeading from \"../../utils/highlightCurrentHeading\";\nimport ScrollToEndButton from \"../../components/ScrollToEndButton\";\nfunction PostDetailPage(_ref) {\n  let {data, children} = _ref;\n  const ref = React.useRef();\n  const {frontmatter, sameSeriesPosts} = data.mdx;\n  const {title, slug, date, series} = frontmatter;\n  React.useEffect(() => {\n    var _ref$current;\n    const headingElements = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.querySelectorAll(\".md h1, .md h2, .md h3, .md h4, .md h5, .md h6\");\n    const observer = new IntersectionObserver(() => highlightCurrentHeading(ref, headingElements), {\n      rootMargin: \"0px 0px -90% 0px\",\n      threshold: [0, 1.0]\n    });\n    headingElements === null || headingElements === void 0 ? void 0 : headingElements.forEach(element => observer.observe(element));\n    return () => observer.disconnect();\n  }, []);\n  return React.createElement(Layout, null, React.createElement(Header, null, React.createElement(\"h1\", null, React.createElement(Link, {\n    to: \"/posts/\" + slug\n  }, title)), React.createElement(WrittenDate, null, date)), React.createElement(SameSeriesPosts, {\n    name: series,\n    data: sameSeriesPosts,\n    current: slug\n  }), React.createElement(PostContent, {\n    ref: ref\n  }, children), React.createElement(NearbySeriesPostLinks, {\n    data: sameSeriesPosts,\n    current: slug\n  }), React.createElement(ScrollToEndButton, null), React.createElement(Comments, null));\n}\nconst Header = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  margin: 72px 0 84px;\\n  padding: 0 32px;\\n\\n  & > h1 {\\n    font-size: 2.5rem;\\n    word-break: keep-all;\\n    margin: 0;\\n\\n    > a {\\n      color: \", \";\\n    }\\n  }\\n\"])), p => p.theme.colors.onBackground);\nconst WrittenDate = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n  margin-left: 2px;\\n\"])));\nconst PostContent = styled(MdxContent)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose([\"\\n  margin-bottom: 120px;\\n\"])));\nconst query = \"2677585968\";\nexport const Head = _ref2 => {\n  var _image$images, _image$images$fallbac;\n  let {data} = _ref2;\n  const {frontmatter: {title, slug, tags, heroImage, previewContent}, excerpt} = data.mdx;\n  const image = heroImage ? getImage(heroImage) : null;\n  return React.createElement(Seo, {\n    title: title,\n    description: previewContent !== null && previewContent !== void 0 ? previewContent : excerpt,\n    path: \"posts/\" + slug,\n    thumbnail: image === null || image === void 0 ? void 0 : (_image$images = image.images) === null || _image$images === void 0 ? void 0 : (_image$images$fallbac = _image$images.fallback) === null || _image$images$fallbac === void 0 ? void 0 : _image$images$fallbac.src,\n    keywords: tags,\n    ogType: \"article\"\n  });\n};\nPostDetailPage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostDetailPage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","div","h3","a","ul","li","h1","p","code","button","_provideComponents","components","React","className","id","style","position","href","dangerouslySetInnerHTML","__html","_templateObject","_templateObject2","_templateObject3","wrapper","MDXLayout","PostDetailPage","_ref","data","children","ref","frontmatter","sameSeriesPosts","mdx","title","slug","date","series","_ref$current","headingElements","current","querySelectorAll","observer","IntersectionObserver","highlightCurrentHeading","rootMargin","threshold","forEach","element","observe","disconnect","Layout","Header","Link","to","WrittenDate","SameSeriesPosts","name","PostContent","NearbySeriesPostLinks","ScrollToEndButton","Comments","styled","_taggedTemplateLiteralLoose","theme","colors","onBackground","MdxContent","Head","_ref2","_image$images","_image$images$fallbac","tags","heroImage","previewContent","excerpt","image","getImage","Seo","description","path","thumbnail","images","fallback","src","keywords","ogType","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}