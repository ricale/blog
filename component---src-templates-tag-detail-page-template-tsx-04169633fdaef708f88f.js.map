{"version":3,"file":"component---src-templates-tag-detail-page-template-tsx-04169633fdaef708f88f.js","mappings":"qMAKA,MAEMA,EAAS,CACb,CAAEC,KAAM,SAAUC,MAAO,OACzB,CAAED,KAAM,UAAWC,MAAO,OAC1B,CAAED,KAAM,QAASC,MAAO,MACxB,CAAED,KAAM,WAAYC,MAAO,QAAO,eACwB,KAiC5D,MAAMC,EAAYC,EAAAA,GAAAA,IAAU,8yBAiDvBC,GACDA,EAAEC,YACFC,EAAAA,EAAAA,IAAG,ilBA8BP,I,EAAA,EA1GA,SAAgB,GAA4C,IAA5C,UAAED,EAAS,MAAEJ,EAAK,OAAEM,GAAqB,EACvD,OACEC,EAAAA,cAACN,EAAS,CAACG,UAAWA,GACpBG,EAAAA,cAAAA,SAAAA,KACEA,EAAAA,cAACC,EAAAA,KAAI,CAACC,GAAG,KAAKT,IAEhBO,EAAAA,cAAAA,UAAAA,KACEA,EAAAA,cAAAA,IAAAA,CAAGG,KAAK,qBAAmB,MAAQJ,IAErCC,EAAAA,cAAAA,MAAAA,KACEA,EAAAA,cAAAA,KAAAA,KACGT,EAAUa,KAAKC,GACdL,EAAAA,cAAAA,KAAAA,CAAIM,IAAKD,EAAKb,MACZQ,EAAAA,cAACC,EAAAA,KAAI,CAACC,GAAIG,EAAKb,MAAOa,EAAKZ,YAOzC,ECPA,MAAMC,EAAYC,EAAAA,GAAAA,IAAU,4YA2B5B,I,MAAA,EAzDA,WACE,OACEK,EAAAA,cAACN,EAAS,KACRM,EAAAA,cAAAA,IAAAA,KAAAA,iBACiB,IACfA,EAAAA,cAAAA,SAAAA,KACEA,EAAAA,cAAAA,IAAAA,CAAGG,KAAK,sBAAoB,UAAW,MAG3CH,EAAAA,cAAAA,IAAAA,KACEA,EAAAA,cAAAA,IAAAA,CAAGG,KAAK,yDAAuD,sBAE3D,KAGNH,EAAAA,cAAAA,IAAAA,KAAAA,aACa,IACXA,EAAAA,cAAAA,SAAAA,KACEA,EAAAA,cAAAA,IAAAA,CAAGG,KAAK,6BAA2B,WAC3B,IAAG,MACT,IACJH,EAAAA,cAAAA,SAAAA,KACEA,EAAAA,cAAAA,IAAAA,CAAGG,KAAK,6BAA2B,iBAC5B,KAKjB,ECgBA,MAAMT,EAAYC,EAAAA,GAAAA,IAAU,uQAKPC,GAAMA,EAAEW,MAAMC,OAAOC,SACpBb,GAAMA,EAAEW,MAAMC,OAAOC,SACpBb,GAAMA,EAAEW,MAAMC,OAAOC,SAGrBb,GAAMA,EAAEW,MAAMC,OAAOC,OAAS,IAC7Bb,GAAMA,EAAEW,MAAMC,OAAOC,OAAS,IAQhDC,EAAUf,EAAAA,GAAAA,KAAW,+BACtBC,QACee,IAAhBf,EAAEgB,YACFd,EAAAA,EAAAA,IAAG,qDACaF,EAAEgB,aAItB,MAnDA,SAAgB,GAAyD,IAAzD,UAAEf,EAAS,iBAAEgB,EAAgB,SAAEC,GAAuB,EACpE,MAAMC,GAAOC,EAAAA,EAAAA,gBAAc,eAUrB,MAAEvB,EAAK,OAAEM,GAAWgB,EAAKE,KAAKC,aACpC,OACElB,EAAAA,cAACmB,EAAAA,GAAa,CAACZ,MAAOa,EAAAA,IACpBpB,EAAAA,cAACqB,EAAAA,GAAW,MACZrB,EAAAA,cAACN,EAAS,KACRM,EAAAA,cAACsB,EAAM,CAACzB,UAAWA,EAAWJ,MAAOA,EAAOM,OAAQA,IACpDC,EAAAA,cAACU,EAAO,CAACE,UAAWC,GAAmBC,GACvCd,EAAAA,cAACuB,EAAM,OAIf,C,gECzBA,MAAM7B,EAAYC,EAAAA,GAAAA,IAAU,sIAStB6B,EAAW7B,EAAAA,GAAAA,EAAQ,sBAEnB8B,EAAW9B,EAAAA,GAAAA,IAAU,gOAerB+B,EAAO/B,EAAAA,GAAAA,EAAQ,wEAKrB,IA3CA,SAAwB,GAAiD,IAAjD,MAAEF,EAAK,SAAEkC,EAAQ,KAAEC,GAA2B,EACpE,OACE5B,EAAAA,cAACN,EAAS,OACLiC,GAAY3B,EAAAA,cAACwB,EAAQ,KAAEG,GAC1B3B,EAAAA,cAACyB,EAAQ,KACPzB,EAAAA,cAAAA,KAAAA,KAAKP,KACFmC,GAAQ5B,EAAAA,cAAC0B,EAAI,SAAME,EAAI,MAIlC,C,+CC+DA,IA/DA,SAAa,GAOC,IAPD,MACXnC,EAAK,YACLoC,EAAW,KACXrC,EAAI,UACJsC,EAAS,OACTC,EAAM,SACNC,GACS,EACT,MAAMjB,GAAOC,EAAAA,EAAAA,gBAAc,eAezBE,cAAgBzB,MAAOwC,EAAS,OAAElC,EAAM,QAAEmC,EAASL,YAAaM,GAAU,WAC1EC,GACErB,EAAKE,KAEHoB,EAAY5C,EACXA,EAAK,MAAMwC,EACXA,EAAS,OAAOlC,EACjBuC,EAAW7C,QAAAA,EAASwC,EACpBM,EAAOV,GAAeM,EACtBK,EAAO,GAAMN,EAAUE,GAAa5C,EAAI,IAAOA,EAAS,IACxDiD,EAAWX,EAAS,GAAMI,EAAUJ,EAAc,KAClDY,EAAiBV,EAAWA,EAASW,KAAK,MAAQ,KAExD,OACE3C,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAAAA,QAAAA,KAAQqC,GACRrC,EAAAA,cAAAA,OAAAA,CAAM4C,KAAK,cAAcC,QAASN,IAClCvC,EAAAA,cAAAA,OAAAA,CAAM4C,KAAK,SAASC,QAAS9C,IAC5B2C,GAAkB1C,EAAAA,cAAAA,OAAAA,CAAM4C,KAAK,WAAWC,QAASH,MAE/CX,GAAU/B,EAAAA,cAAAA,OAAAA,CAAM8C,SAAS,UAAUD,QAASd,IAC/C/B,EAAAA,cAAAA,OAAAA,CAAM8C,SAAS,WAAWD,QAASP,IACnCtC,EAAAA,cAAAA,OAAAA,CAAM8C,SAAS,iBAAiBD,QAASN,IACzCvC,EAAAA,cAAAA,OAAAA,CAAM8C,SAAS,SAASD,QAASL,MAC9BC,GAAYzC,EAAAA,cAAAA,OAAAA,CAAM8C,SAAS,WAAWD,QAASJ,IAElDzC,EAAAA,cAAAA,OAAAA,CAAM8C,SAAS,eAAeD,QAAQ,wBACtC7C,EAAAA,cAAAA,OAAAA,CAAM8C,SAAS,gBAAgBD,QAASP,IACxCtC,EAAAA,cAAAA,OAAAA,CAAM8C,SAAS,sBAAsBD,QAASN,IAC9CvC,EAAAA,cAAAA,OAAAA,CAAM8C,SAAS,cAAcD,QAASL,MACnCC,GAAYzC,EAAAA,cAAAA,OAAAA,CAAM8C,SAAS,gBAAgBD,QAASJ,IAEvDzC,EAAAA,cAAAA,OAAAA,CACE4C,KAAK,2BACLC,QAAQ,gDAIhB,C,oFChCA,MAAMnD,EAAYC,EAAAA,GAAAA,IAAU,sBAEtBoD,EAAgBpD,EAAAA,GAAAA,IAAU,kKAW1BqD,EAAsBrD,EAAAA,GAAAA,OAAa,wKAUnCsD,EAAWtD,EAAAA,GAAAA,GAAS,orBA2C1B,IAlGA,SAAwB,GAAwC,IAAtCoB,KAAMmC,GAA6B,EAC3D,MAAOC,EAAYC,GAAiBpD,EAAAA,UAAe,GAC7Ce,GAAOsC,EAAAA,EAAAA,GAAIH,GAAQI,MACvB,CAACC,EAAGC,IACFD,EAAEE,KAAKC,YAAYC,aAAaC,cAC9BJ,EAAEC,KAAKC,YAAYC,eAChBR,EAAa,GAAK,KAG3B,OACEnD,EAAAA,cAACN,EAAS,KACRM,EAAAA,cAAC+C,EAAa,KACZ/C,EAAAA,cAAAA,OAAAA,KAAAA,OACAA,EAAAA,cAACgD,EAAmB,CAACa,QAAS,IAAMT,GAAeU,IAAQA,KAAI,QACrDX,EAAa,OAAS,UAGlCnD,EAAAA,cAACiD,EAAQ,KACNlC,EAAKX,KAAI2D,IAAAA,IAAGN,MAAM,YAAEC,IAAe,SAClC1D,EAAAA,cAAAA,KAAAA,CACEM,IAAKoD,EAAYM,KACjBH,QAAS,KAAMI,EAAAA,EAAAA,UAAS,UAAUP,EAAYM,OAE9ChE,EAAAA,cAAAA,OAAAA,CAAMkE,UAAU,QAAQR,EAAYS,MACpCnE,EAAAA,cAAAA,OAAAA,CAAMkE,UAAU,SAASR,EAAYjE,OAClC,KAKf,C,uHCrBA,MAqCa2E,EAAOL,IAGsD,IAHrD,YACnBM,EAAW,KACXtD,GACmE,EACnE,MAAM,IAAEuD,GAAQD,GACV,WAAEE,GAAexD,EAAKyD,OAE5B,OACExE,EAAAA,cAACyE,EAAAA,EAAG,CACFhF,MAAK,OAAS6E,EAAG,IACjBzC,YAAgB0C,EAAU,cAC1B/E,KAAI,QAAU8E,GACd,EAIN,UArD8BI,IAG4C,IAH3C,YAC7BL,EAAW,KACXtD,GACmE,EACnE,MAAM,IAAEuD,GAAQD,GACV,WAAEE,EAAU,MAAEI,GAAU5D,EAAKyD,OAEnC,OACExE,EAAAA,cAAC4E,EAAAA,EAAM,CAAC/D,iBAAkB,KACxBb,EAAAA,cAAC6E,EAAAA,EAAc,CAACpF,MAAO6E,EAAK3C,SAAS,KAAKC,KAAM2C,IAChDvE,EAAAA,cAAC8E,EAAAA,EAAc,CAAC/D,KAAM4D,IACf,C,qKC/BN,MACLI,QAASpF,EAAM,IACfG,EAAG,UACHkF,EAAS,cACT7D,EACA8D,aAAY,oBACZC,GACEC,ECmBJ,I,EAAA,EAXe,CACb3E,OAAQ,CACN4E,UAAWC,GACX5E,OAAQ4E,GACRC,OAAQD,EACRE,QAASF,EACTG,KAAMH,GAERI,OAzBa,CACbC,WAAY,QACZC,aAAc,QAEdC,iBAAkB,UAClBC,WAAY,UACZC,aAAc,QAEdC,KAAM,UACNC,OAAQ,UAER1B,IAAK,UACL2B,MAAO,UAEPC,YAAa,U,UC8Bf,MA5CoBhB,EAAiB,+qBAgBZtF,GAAMA,EAAEW,MAAMkF,OAAOC,aAChC9F,GAAMA,EAAEW,MAAMkF,OAAOE,e,QCZnC,O,uBCPe,SAASQ,EAA4BC,EAASC,GAK3D,OAJKA,IACHA,EAAMD,EAAQE,MAAM,IAEtBF,EAAQC,IAAMA,EACPD,CACT,C","sources":["webpack://ricalelog/./src/components/Layout/Header.tsx","webpack://ricalelog/./src/components/Layout/Footer.tsx","webpack://ricalelog/./src/components/Layout/index.tsx","webpack://ricalelog/./src/components/ListPageHeader.tsx","webpack://ricalelog/./src/components/Seo.tsx","webpack://ricalelog/./src/components/SimplePostList.tsx","webpack://ricalelog/./src/templates/TagDetailPageTemplate.tsx","webpack://ricalelog/./src/themes/themedStyledComponents.ts","webpack://ricalelog/./src/themes/normal.ts","webpack://ricalelog/./src/themes/GlobalStyle.ts","webpack://ricalelog/./src/themes/index.ts","webpack://ricalelog/./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js"],"sourcesContent":["import * as React from \"react\";\nimport { Link } from \"gatsby\";\n\nimport styled, { css } from \"../../themes\";\n\nconst isDevelopment = process.env.NODE_ENV === \"development\";\n\nconst menuItems = [\n  { path: \"/posts\", title: \"모든글\" },\n  { path: \"/series\", title: \"시리즈\" },\n  { path: \"/tags\", title: \"태그\" },\n  { path: \"/rss.xml\", title: \"RSS\" },\n  ...(isDevelopment ? [{ path: \"/drafts\", title: \"임시글\" }] : []),\n];\n\ntype HeaderProps = {\n  emphasize?: boolean;\n  title: string;\n  author: string;\n};\nfunction Header({ emphasize, title, author }: HeaderProps) {\n  return (\n    <Container emphasize={emphasize}>\n      <header>\n        <Link to=\"/\">{title}</Link>\n      </header>\n      <address>\n        <a href=\"https://ricale.kr\">{`by ${author}`}</a>\n      </address>\n      <nav>\n        <ul>\n          {menuItems.map((item) => (\n            <li key={item.path}>\n              <Link to={item.path}>{item.title}</Link>\n            </li>\n          ))}\n        </ul>\n      </nav>\n    </Container>\n  );\n}\n\ntype ContainerProps = {\n  emphasize?: boolean;\n};\nconst Container = styled.div<ContainerProps>`\n  display: flex;\n  flex-direction: row;\n\n  margin: 0px 16px 8px;\n  padding-top: 8px;\n\n  & > header {\n    margin-right: 8px;\n    font-weight: 600;\n    font-size: 1.25rem;\n    > a {\n      color: white;\n    }\n  }\n\n  & > address {\n    font-size: 0.875rem;\n    font-style: normal;\n    > a {\n      color: white;\n    }\n  }\n\n  & > nav {\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-end;\n\n    flex: 1;\n    > ul {\n      display: flex;\n      flex-direction: row;\n      gap: 8px;\n\n      margin: 0;\n      margin-left: 16px;\n      padding: 0;\n      list-style: none;\n\n      > li > a {\n        display: inline-block;\n        color: #dddddd;\n        text-decoration: underline;\n        font-size: 0.875rem;\n      }\n    }\n  }\n\n  ${(p) =>\n    p.emphasize &&\n    css`\n      padding-top: 56px;\n      padding-bottom: 48px;\n      & > header {\n        font-family: monospace;\n        font-size: 5rem;\n      }\n      & > address {\n        font-family: monospace;\n        font-size: 1.5rem;\n      }\n      & > nav {\n        display: none;\n      }\n\n      @media (max-width: 799px) {\n        flex-direction: column;\n\n        & > header {\n          font-family: monospace;\n          font-size: 4.5rem;\n        }\n        & > address {\n          font-family: monospace;\n          font-size: 1.25rem;\n        }\n      }\n    `}\n`;\n\nexport default Header;\n","import * as React from \"react\";\nimport styled from \"../../themes\";\n\nfunction Footer() {\n  return (\n    <Container>\n      <p>\n        Copyright 2021{\" \"}\n        <strong>\n          <a href=\"https://ricale.kr/\">ricale</a>.\n        </strong>\n      </p>\n      <p>\n        <a href=\"https://creativecommons.org/licenses/by-nc-sa/2.0/kr/\">\n          CC BY-NC-SA 2.0 KR\n        </a>\n        .\n      </p>\n      <p>\n        Powered by{\" \"}\n        <strong>\n          <a href=\"https://www.gatsbyjs.com/\">Gatsby</a>\n        </strong>{\" \"}\n        and{\" \"}\n        <strong>\n          <a href=\"https://pages.github.com/\">GitHub Pages</a>\n        </strong>\n        .\n      </p>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 4px;\n\n  margin-top: 60px;\n  margin-bottom: 16px;\n\n  font-size: 0.8125rem;\n\n  color: #aaaaaa;\n  p {\n    white-space: nowrap;\n  }\n  a {\n    color: #aaaaaa;\n  }\n  strong,\n  strong > a {\n    font-weight: normal;\n    color: #ffffff;\n  }\n`;\n\nexport default Footer;\n","import * as React from \"react\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\nimport styled, {\n  css,\n  GlobalStyle,\n  normalTheme,\n  ThemeProvider,\n} from \"../../themes\";\nimport { SiteMetadata } from \"../../types\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\ntype LayoutQueryData = {\n  site: {\n    siteMetadata: SiteMetadata;\n  };\n};\ntype LayoutProps = {\n  emphasize?: boolean;\n  minContentHeight?: number;\n  children?: React.ReactNode;\n};\nfunction Layout({ emphasize, minContentHeight, children }: LayoutProps) {\n  const data = useStaticQuery<LayoutQueryData>(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          author\n        }\n      }\n    }\n  `);\n  const { title, author } = data.site.siteMetadata;\n  return (\n    <ThemeProvider theme={normalTheme}>\n      <GlobalStyle />\n      <Container>\n        <Header emphasize={emphasize} title={title} author={author} />\n        <Content minHeight={minContentHeight}>{children}</Content>\n        <Footer />\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nconst Container = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n\n  > main {\n    padding-left: ${(p) => p.theme.dimens.margin}px;\n    padding-right: ${(p) => p.theme.dimens.margin}px;\n    padding-bottom: ${(p) => p.theme.dimens.margin}px;\n\n    @media (max-width: 799px) {\n      padding-left: ${(p) => p.theme.dimens.margin + 4}px;\n      padding-right: ${(p) => p.theme.dimens.margin + 4}px;\n    }\n  }\n`;\n\ntype ContentProps = {\n  minHeight?: number;\n};\nconst Content = styled.main<ContentProps>`\n  ${(p) =>\n    p.minHeight !== undefined &&\n    css`\n      min-height: ${p.minHeight}px;\n    `}\n`;\n\nexport default Layout;\n","import * as React from \"react\";\nimport styled from \"../themes\";\n\ntype ListPageHeaderProps = {\n  title: string;\n  subtitle?: string;\n  note?: string | number;\n};\nfunction ListPageHeader({ title, subtitle, note }: ListPageHeaderProps) {\n  return (\n    <Container>\n      {!!subtitle && <Subtitle>{subtitle}</Subtitle>}\n      <TitleRow>\n        <h1>{title}</h1>\n        {!!note && <Note>{`(${note})`}</Note>}\n      </TitleRow>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  margin: 40px 0 45px;\n  padding-left: 40px;\n\n  @media (max-width: 414px) {\n    padding-left: 20px;\n  }\n`;\n\nconst Subtitle = styled.p``;\n\nconst TitleRow = styled.div`\n  display: flex;\n  align-items: flex-end;\n  gap: 8px;\n\n  & > h1 {\n    word-break: keep-all;\n  }\n\n  @media (max-width: 414px) {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n`;\n\nconst Note = styled.p`\n  margin-bottom: 8px;\n  font-size: 0.9375rem;\n`;\n\nexport default ListPageHeader;\n","import * as React from \"react\";\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport { SiteMetadata } from \"../types\";\n\ntype SeoQueryData = {\n  site: {\n    siteMetadata: SiteMetadata;\n    pathPrefix: string;\n  };\n};\ntype SeoProps = {\n  title?: string;\n  description?: string;\n  path?: string;\n  thumbnail?: string;\n  keywords?: string[];\n  ogType?: string;\n};\nfunction Seo({\n  title,\n  description,\n  path,\n  thumbnail,\n  ogType,\n  keywords,\n}: SeoProps) {\n  const data = useStaticQuery<SeoQueryData>(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          author\n          siteUrl\n          description\n        }\n        pathPrefix\n      }\n    }\n  `);\n\n  const {\n    siteMetadata: { title: siteTitle, author, siteUrl, description: siteDesc },\n    pathPrefix,\n  } = data.site;\n\n  const pageTitle = title\n    ? `${title} | ${siteTitle}`\n    : `${siteTitle} by ${author}`;\n  const seoTitle = title ?? siteTitle;\n  const desc = description || siteDesc;\n  const pageUrl = `${siteUrl}${pathPrefix}${path ? `/${path}` : \"\"}`;\n  const imageUrl = thumbnail ? `${siteUrl}${thumbnail}` : null;\n  const keywordsString = keywords ? keywords.join(\", \") : null;\n\n  return (\n    <>\n      <title>{pageTitle}</title>\n      <meta name=\"description\" content={desc} />\n      <meta name=\"author\" content={author} />\n      {keywordsString && <meta name=\"keywords\" content={keywordsString} />}\n\n      {!!ogType && <meta property=\"og:type\" content={ogType} />}\n      <meta property=\"og:title\" content={seoTitle} />\n      <meta property=\"og:description\" content={desc} />\n      <meta property=\"og:url\" content={pageUrl} />\n      {!!imageUrl && <meta property=\"og:image\" content={imageUrl} />}\n\n      <meta property=\"twitter:card\" content=\"summary_large_image\" />\n      <meta property=\"twitter:title\" content={seoTitle} />\n      <meta property=\"twitter:description\" content={desc} />\n      <meta property=\"twitter:url\" content={pageUrl} />\n      {!!imageUrl && <meta property=\"twitter:image\" content={imageUrl} />}\n\n      <meta\n        name=\"google-site-verification\"\n        content=\"Z24DuzLFxq0tVrtFhTxfPETtFXf9rOEG73-HpKk2Pgs\"\n      />\n    </>\n  );\n}\n\nexport default Seo;\n","import * as React from \"react\";\nimport { navigate } from \"gatsby\";\nimport styled from \"../themes\";\nimport { PostFrontmatter } from \"../types\";\n\ntype SimplePostListProps = {\n  data: {\n    node: {\n      frontmatter: Pick<PostFrontmatter, \"title\" | \"slug\" | \"date\"> & {\n        originalDate: string;\n      };\n    };\n  }[];\n};\n\nfunction SimplePostList({ data: source }: SimplePostListProps) {\n  const [orderByAsc, setOrderByAsc] = React.useState(false);\n  const data = [...source].sort(\n    (a, b) =>\n      a.node.frontmatter.originalDate.localeCompare(\n        b.node.frontmatter.originalDate\n      ) * (orderByAsc ? 1 : -1)\n  );\n\n  return (\n    <Container>\n      <SortingAction>\n        <span>정렬:</span>\n        <SortingToggleButton onClick={() => setOrderByAsc((st) => !st)}>\n          {`작성일 ${orderByAsc ? \"오름차순\" : \"내림차순\"}`}\n        </SortingToggleButton>\n      </SortingAction>\n      <PostList>\n        {data.map(({ node: { frontmatter } }) => (\n          <li\n            key={frontmatter.slug}\n            onClick={() => navigate(`/posts/${frontmatter.slug}`)}\n          >\n            <span className=\"date\">{frontmatter.date}</span>\n            <span className=\"title\">{frontmatter.title}</span>\n          </li>\n        ))}\n      </PostList>\n    </Container>\n  );\n}\n\nconst Container = styled.div``;\n\nconst SortingAction = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  padding: 2px;\n\n  > span {\n    font-size: 0.875rem;\n    color: #ffffff;\n  }\n`;\nconst SortingToggleButton = styled.button`\n  border: 0;\n  text-decoration: underline;\n\n  font-size: 0.875rem;\n  color: #ffffff;\n  background-color: transparent;\n  cursor: pointer;\n`;\n\nconst PostList = styled.ol`\n  margin-top: 8px;\n  padding-left: 0px;\n  list-style: none;\n  cursor: pointer;\n\n  li {\n    display: flex;\n    align-items: center;\n\n    padding: 2px;\n    margin-bottom: 4px;\n    :hover {\n      background-color: #666666;\n    }\n\n    > .date {\n      margin-right: 8px;\n      font-family: monospace;\n      font-size: 0.875rem;\n    }\n    > .title {\n      color: skyblue;\n    }\n  }\n\n  @media (max-width: 414px) {\n    li {\n      flex-direction: column;\n      align-items: flex-start;\n\n      margin-bottom: 12px;\n      > .date {\n        order: 2;\n        font-size: 0.75rem;\n      }\n      > .title {\n        order: 1;\n      }\n    }\n  }\n`;\n\nexport default SimplePostList;\n","import * as React from \"react\";\nimport { graphql, HeadProps, PageProps } from \"gatsby\";\n\nimport Layout from \"../components/Layout\";\nimport ListPageHeader from \"../components/ListPageHeader\";\nimport SimplePostList from \"../components/SimplePostList\";\nimport { PostFrontmatter } from \"../types\";\nimport Seo from \"../components/Seo\";\n\ntype TagDetailPageTemplateData = {\n  allMdx: {\n    totalCount: number;\n    edges: {\n      node: {\n        frontmatter: Pick<PostFrontmatter, \"title\" | \"slug\" | \"date\"> & {\n          originalDate: string;\n        };\n      };\n    }[];\n  };\n};\ntype TagDetailPageTemplateContext = {\n  tag: string;\n};\nconst TagDetailPageTemplate = ({\n  pageContext,\n  data,\n}: PageProps<TagDetailPageTemplateData, TagDetailPageTemplateContext>) => {\n  const { tag } = pageContext;\n  const { totalCount, edges } = data.allMdx;\n\n  return (\n    <Layout minContentHeight={500}>\n      <ListPageHeader title={tag} subtitle=\"태그\" note={totalCount} />\n      <SimplePostList data={edges} />\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query ($tag: String) {\n    allMdx(\n      limit: 2000\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { tags: { in: [$tag] }, date: { ne: \"\" } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          frontmatter {\n            title\n            slug\n            date(formatString: \"YYYY.MM.DD.\")\n            originalDate: date\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const Head = ({\n  pageContext,\n  data,\n}: HeadProps<TagDetailPageTemplateData, TagDetailPageTemplateContext>) => {\n  const { tag } = pageContext;\n  const { totalCount } = data.allMdx;\n\n  return (\n    <Seo\n      title={`태그 \"${tag}\"`}\n      description={`${totalCount}개의 글이 있습니다.`}\n      path={`tags/${tag}`}\n    />\n  );\n};\n\nexport default TagDetailPageTemplate;\n","import * as styledComponents from \"styled-components\";\n\nimport { RicalelogTheme } from \"./normal\";\n\nexport const {\n  default: styled,\n  css,\n  keyframes,\n  ThemeProvider,\n  ThemeContext,\n  createGlobalStyle,\n} = styledComponents as unknown as styledComponents.ThemedStyledComponentsModule<RicalelogTheme>;\n","const base = 16;\n\nconst colors = {\n  background: \"black\",\n  onBackground: \"white\",\n\n  blockquoteBorder: \"#666666\",\n  blockquote: \"#1a1a1a\",\n  onBlockquote: \"white\",\n\n  code: \"#333333\",\n  onCode: \"#DDDDDD\",\n\n  tag: \"#222222\",\n  onTag: \"skyblue\",\n\n  tableBorder: \"white\",\n};\n\nconst normal = {\n  dimens: {\n    bigMargin: base * 2,\n    margin: base * 1,\n    gutter: base * 0.5,\n    spacing: base * 0.25,\n    thin: base * 0.125,\n  },\n  colors,\n};\n\nexport default normal;\nexport type RicalelogTheme = typeof normal;\n","import { createGlobalStyle } from \"./themedStyledComponents\";\n\nconst GlobalStyle = createGlobalStyle`\n  html, body, #___gatsby {\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    \n    font-family: -apple-system,\n      BlinkMacSystemFont,\n      \"Segoe UI\",\n      \"Noto Sans\",\n      Helvetica,\n      Arial,\n      sans-serif,\n      \"Apple Color Emoji\",\n      \"Segoe UI Emoji\";\n\n    background-color: ${(p) => p.theme.colors.background};\n    color: ${(p) => p.theme.colors.onBackground};\n  }\n\n  h1, h2, h3, h4, h5, h6, p {\n    margin: 0;\n  }\n\n  a {\n    color: skyblue;\n    text-decoration: none;\n  }\n  a:hover {\n    text-decoration: underline;\n  }\n\n  input, button, select {\n    margin: 0;\n    padding: 0;\n    font-size: 16px;\n    appearance: none;\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n`;\n\nexport default GlobalStyle;\n","import {\n  styled,\n  css,\n  keyframes,\n  ThemeProvider,\n} from \"./themedStyledComponents\";\n\nexport default styled;\nexport { css, keyframes, ThemeProvider };\n\nexport { default as normalTheme } from \"./normal\";\nexport * from \"./normal\";\nexport { default as GlobalStyle } from \"./GlobalStyle\";\nexport { default as useTheme } from \"./useTheme\";\n","export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n  strings.raw = raw;\n  return strings;\n}"],"names":["menuItems","path","title","Container","styled","p","emphasize","css","author","React","Link","to","href","map","item","key","theme","dimens","margin","Content","undefined","minHeight","minContentHeight","children","data","useStaticQuery","site","siteMetadata","ThemeProvider","normalTheme","GlobalStyle","Header","Footer","Subtitle","TitleRow","Note","subtitle","note","description","thumbnail","ogType","keywords","siteTitle","siteUrl","siteDesc","pathPrefix","pageTitle","seoTitle","desc","pageUrl","imageUrl","keywordsString","join","name","content","property","SortingAction","SortingToggleButton","PostList","source","orderByAsc","setOrderByAsc","_toConsumableArray","sort","a","b","node","frontmatter","originalDate","localeCompare","onClick","st","_ref2","slug","navigate","className","date","Head","pageContext","tag","totalCount","allMdx","Seo","_ref","edges","Layout","ListPageHeader","SimplePostList","default","keyframes","ThemeContext","createGlobalStyle","styledComponents","bigMargin","base","gutter","spacing","thin","colors","background","onBackground","blockquoteBorder","blockquote","onBlockquote","code","onCode","onTag","tableBorder","_taggedTemplateLiteralLoose","strings","raw","slice"],"sourceRoot":""}