{"version":3,"file":"component---src-pages-posts-mdx-frontmatter-slug-tsx-content-file-path-users-kangseong-workspace-private-ricalelog-posts-2023-230111-gatsby-1-index-mdx-60414125c6873c2a098a.js","mappings":"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","sources":["webpack://ricalelog/./posts/2023/230111-gatsby-1/index.mdx","webpack://ricalelog/./src/pages/posts/{mdx.frontmatter__slug}.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    ol: \"ol\",\n    li: \"li\",\n    ul: \"ul\",\n    code: \"code\",\n    h2: \"h2\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"0. 발단\"), \"\\n\", React.createElement(_components.p, null, \"쓰던 블로그 서비스가 안드로이드 모바일에서 광고를 삽입하는 것을 발견했다. (광고는 다시 없어졌다. 아마 운영자의 테스트였던 것 같다.) 개인적으로 개인 개발 블로그에 광고가 들어가는 걸 원치 않으므로 서비스를 바꿔야 겠다는 생각이 들었다. 그리고 그러던 와중에 GitHub Pages 에 정적 페이지 생성 프레임워크로 블로그를 운영하는 것도 괜찮겠다 싶었다.\"), \"\\n\", React.createElement(_components.p, null, \"Jekyll 과 Gatsby 두 서비스 중 고민하다가 Gatsby 를 선택했다. 자 그러면 천천히 하나씩 적용해보자.\"), \"\\n\", React.createElement(_components.h1, null, \"1. 프로젝트 기본 구성\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://www.gatsbyjs.com/docs/tutorial/\"\n  }, \"공식 튜토리얼 문서\"), \"가 잘 정리되어 있다. 튜토리얼에서는 아래 일곱가지 내용을 설명한다.\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"0\"\n  }, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.gatsbyjs.com/docs/tutorial/part-0/\"\n  }, \"개발 환경 구성하기\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.gatsbyjs.com/docs/tutorial/part-1/\"\n  }, \"로컬에서 프로젝트 생성 및 실행하고, Gatsby 클라우드에 배포하기\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.gatsbyjs.com/docs/tutorial/part-2/\"\n  }, \"React 로 페이지 구현하기\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.gatsbyjs.com/docs/tutorial/part-3/\"\n  }, \"플러그인 적용하기\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"gatsby-plugin-image 플러그인으로 정적 이미지를 사이트에 추가하기\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.gatsbyjs.com/docs/tutorial/part-4/\"\n  }, \"GraphQL 사용하기\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"사이트의 메타 데이터 다루기\"), \"\\n\", React.createElement(_components.li, null, \"gatsby-source-filesystem 플러그인을 적용해 GraphQL 로 MDX 파일 목록 가져오기\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.gatsbyjs.com/docs/tutorial/part-5/\"\n  }, \"MDX 사용하기\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"MDX 로 블로그 컨텐츠 작성하기\"), \"\\n\", React.createElement(_components.li, null, \"gatsby-plugin-mdx 플러그인을 적용해 GraphQL 로 MDX 파일 내용 가져오기\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.gatsbyjs.com/docs/tutorial/part-6/\"\n  }, \"동적으로 페이지 생성하기\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"MDX 의 frontmatter 와 \", React.createElement(_components.code, null, \"{mdx.frontmatter__slug}.tsx\"), \" 형식의 파일명을 사용해 페이지 동적으로 생성하기\"), \"\\n\", React.createElement(_components.li, null, \"생성된 페이지에 알맞는 MDX 데이터를 GraphQL 로 가져와 사용하기\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.gatsbyjs.com/docs/tutorial/part-7/\"\n  }, \"데이터에 따라 동적으로 이미지 추가하기\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"gatsby-transformer-sharp 플러그인을 적용해 MDX 의 frontmatter 에 따라 알맞는 이미지를 가져와 사용하기\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"본문이 훌륭하기 때문에 굳이 여기에 다시 정리하지는 않겠다. 위 과정을 모두 거치면 기본적인 글 작성이 가능한 블로그 사이트가 완성된다.\"), \"\\n\", React.createElement(_components.h1, null, \"2. 태그 구현\"), \"\\n\", React.createElement(_components.p, null, \"태그 구현 또한 \", React.createElement(_components.a, {\n    href: \"https://www.gatsbyjs.com/docs/adding-tags-and-categories-to-blog-posts/\"\n  }, \"공식 문서\"), \"가 잘 정리되어 있다. 하지만 약간 옛날 버전인 듯 위 튜토리얼 문서와 과 맞지 않는 부분이 있어서 해당 부분을 정정할 겸 정리해보겠다.\"), \"\\n\", React.createElement(_components.h2, null, \"2.1. MDX 에 태그 추가\"), \"\\n\", React.createElement(_components.p, null, \"MDX 파일의 frontmatter 영역에 tags 를 추가하자\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-mdx\"\n  }, \"---\\ntitle: \\\"Create React App 으로 GitHub Pages 적용하기\\\"\\ndate: \\\"2021-05-03\\\"\\nslug: \\\"210503-create-react-app-github-pages\\\"\\ntags: [\\\"React\\\", \\\"create react app\\\", \\\"github pages\\\"] # 이렇게 추가하자\\n---\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://eneaxharja.com/add-tags-to-mdx-blog\"\n  }, \"https://eneaxharja.com/add-tags-to-mdx-blog\")), \"\\n\", React.createElement(_components.h2, null, \"2.2. 태그 페이지 템플릿 추가\"), \"\\n\", React.createElement(_components.p, null, \"태그 페이지에 쓰일 템플릿을 만들어보자.\"), \"\\n\", React.createElement(_components.p, null, \"여기서 \", React.createElement(_components.code, null, \"{mdx.frontmatter__slug}.tsx}\"), \" 형식의 파일을 만들지 않고 템플릿을 만드는 이유는 페이지가 MDX 파일의 정적 데이터(frontmatter 의 slug 필드)에 의해 만들어지는 것이 아니라, 동적인 데이터 (frontmatter 의 tags 정보를 수집) 에 의해 만들어져야 하기 때문이다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"// src/templates/TagDetailPageTemplate.tsx\\nimport * as React from \\\"react\\\";\\nimport { graphql, Link, PageProps } from \\\"gatsby\\\";\\nimport Layout from \\\"../components/Layout\\\";\\n\\ntype TagDetailPageTemplateData = {\\n  allMdx: {\\n    totalCount: number;\\n    edges: {\\n      node: {\\n        frontmatter: {\\n          slug: string;\\n          title: string;\\n        };\\n      };\\n    }[];\\n  };\\n};\\ntype TagDetailPageTemplateContext = {\\n  tag: string;\\n};\\nconst TagDetailPageTemplate = ({\\n  pageContext,\\n  data,\\n}: PageProps<TagDetailPageTemplateData, TagDetailPageTemplateContext>) => {\\n  const { tag } = pageContext;\\n  const { totalCount, edges } = data.allMdx;\\n\\n  return (\\n    <Layout>\\n      <h1>{`태그 \\\"${tag}\\\"`}</h1>\\n      <p>{`글 ${totalCount}개`}</p>\\n\\n      <ul>\\n        {edges.map(({ node: { frontmatter } }) => (\\n          <li key={frontmatter.slug}>\\n            <Link to={`/posts/${frontmatter.slug}`}>{frontmatter.title}</Link>\\n          </li>\\n        ))}\\n      </ul>\\n    </Layout>\\n  );\\n};\\n\\nexport const pageQuery = graphql`\\n  query ($tag: String) {\\n    allMdx(\\n      limit: 2000\\n      sort: { frontmatter: { date: DESC } }\\n      filter: { frontmatter: { tags: { in: [$tag] } } }\\n    ) {\\n      totalCount\\n      edges {\\n        node {\\n          frontmatter {\\n            slug\\n            title\\n          }\\n        }\\n      }\\n    }\\n  }\\n`;\\n\\nexport default TagDetailPageTemplate;\\n\")), \"\\n\", React.createElement(_components.h2, null, \"2.3. \", React.createElement(_components.code, null, \"gatsby-node.ts\"), \" 작성\"), \"\\n\", React.createElement(_components.p, null, \"위에서 만든 템플릿으로 페이지를 만들기 위해서는 \", React.createElement(_components.code, null, \"gatsby-node.ts\"), \" 를 작성해야 한다. 이미 해당 파일을 만들었다면 \", React.createElement(_components.code, null, \"createPage()\"), \" 함수 안에 아래 내용을 적당히 끼워넣으면 된다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"// gatsby-node.ts\\nimport { GatsbyNode } from \\\"gatsby\\\";\\nimport path from \\\"path\\\";\\n\\ntype TagGroupsQueryData = {\\n  tagsGroup: {\\n    group: {\\n      fieldValue: string;\\n    }[];\\n  };\\n};\\n\\nexport const createPages: GatsbyNode[\\\"createPages\\\"] = async ({\\n  actions,\\n  graphql,\\n  reporter,\\n}) => {\\n  const result = await graphql<TagGroupsQueryData>(`\\n    {\\n      tagsGroup: allMdx(limit: 2000) {\\n        group(field: { frontmatter: { tags: SELECT } }) {\\n          fieldValue\\n        }\\n      }\\n    }\\n  `);\\n\\n  if (result.errors || !result.data) {\\n    reporter.panicOnBuild(`Error while running GraphQL query.`);\\n    return;\\n  }\\n\\n  const tagsTemplatePath = path.resolve(\\n    \\\"src/templates/TagDetailPageTemplate.tsx\\\"\\n  );\\n\\n  result.data.tagsGroup.group.forEach((tag) => {\\n    actions.createPage({\\n      path: `/tags/${tag.fieldValue}/`,\\n      component: tagsTemplatePath,\\n      context: { tag: tag.fieldValue },\\n    });\\n  });\\n};\\n\")), \"\\n\", React.createElement(_components.h2, null, \"2.4. 태그 목록 페이지 추가\"), \"\\n\", React.createElement(_components.p, null, \"태그 목록 페이지를 추가하자.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"// src/pages/tags/index.tsx\\nimport * as React from \\\"react\\\";\\nimport { graphql, Link, PageProps } from \\\"gatsby\\\";\\nimport Layout from \\\"../../components/Layout\\\";\\nimport Seo from \\\"../../components/Seo\\\";\\n\\ntype TagsPageData = {\\n  allMdx: {\\n    group: {\\n      totalCount: number;\\n      fieldValue: string;\\n    }[];\\n  };\\n};\\nconst TagsPage = ({ data }: PageProps<TagsPageData>) => {\\n  const tags = data.allMdx.group.sort((a, b) => b.totalCount - a.totalCount);\\n  return (\\n    <Layout>\\n      <h1>tags</h1>\\n      <ul>\\n        {tags.map((tag) => (\\n          <li key={tag.fieldValue}>\\n            <Link to={`/tags/${tag.fieldValue}/`}>{`${tag.fieldValue}`}</Link>{\\\" \\\"}\\n            <small>{`${tag.totalCount}`}</small>\\n          </li>\\n        ))}\\n      </ul>\\n    </Layout>\\n  );\\n};\\n\\nexport const query = graphql`\\n  query {\\n    allMdx(limit: 2000) {\\n      group(field: { frontmatter: { tags: SELECT } }) {\\n        fieldValue\\n        totalCount\\n      }\\n    }\\n  }\\n`;\\n\\nexport const Head = () => <Seo title=\\\"태그 목록\\\" />;\\n\\nexport default TagsPage;\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"graphql\"), \" 쿼리에서 바로 totalCount 로 정렬하고 싶었지만 (GraphQL 을 잘 몰라서) 방법을 찾지 못했다. 대신 \", React.createElement(_components.code, null, \"TagsPage\"), \" 컴포넌트 첫번째 줄에서 \", React.createElement(_components.code, null, \".sort()\"), \" 를 사용해 정렬하고 있다.\"), \"\\n\", React.createElement(_components.h1, null, \"3. 다음\"), \"\\n\", React.createElement(_components.p, null, \"다음 글에서는 글 내용 안에 이미지를 삽입하는 방법을 정리한다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/kangseong/workspace/private/ricalelog/posts/2023/230111-gatsby-1/index.mdx\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nvar _templateObject;\nimport * as React from \"react\";\nimport {Link} from \"gatsby\";\nimport {GatsbyImage, getImage} from \"gatsby-plugin-image\";\nimport Layout from \"../../components/Layout\";\nimport Seo from \"../../components/Seo\";\nimport styled from \"../../themes\";\nimport MdxContent from \"../../components/MdxContent\";\nconst PostDetailPage = _ref => {\n  let {data, children} = _ref;\n  const {title, date, tags, heroImage, heroImageAlt} = data.mdx.frontmatter;\n  const image = heroImage ? getImage(heroImage) : null;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, title), React.createElement(Tags, null, tags.map(tag => React.createElement(\"li\", {\n    key: tag\n  }, React.createElement(Link, {\n    to: \"/tags/\" + tag\n  }, tag)))), React.createElement(\"div\", null, date), !!image && React.createElement(GatsbyImage, {\n    image: image,\n    alt: heroImageAlt !== null && heroImageAlt !== void 0 ? heroImageAlt : \"\"\n  }), React.createElement(MdxContent, null, children), React.createElement(\"script\", {\n    src: \"https://utteranc.es/client.js\",\n    repo: \"ricale/blog\",\n    \"issue-term\": \"pathname\",\n    label: \"utterances\",\n    theme: \"github-dark\",\n    crossOrigin: \"anonymous\",\n    async: true\n  }));\n};\nconst Tags = styled.ul(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  display: flex;\\n  flex-direction: row;\\n  flex-wrap: wrap;\\n  gap: \", \"px;\\n\\n  margin: 0;\\n  padding: 0;\\n  list-style: none;\\n\\n  > li {\\n    padding: \", \"px \", \"px\\n      0px;\\n    border-radius: 2px;\\n\\n    background-color: \", \";\\n    color: \", \";\\n\\n    > a {\\n      text-decoration: none;\\n    }\\n  }\\n\"])), p => p.theme.dimens.gutter, p => p.theme.dimens.thin, p => p.theme.dimens.gutter, p => p.theme.colors.tag, p => p.theme.colors.onTag);\nconst query = \"3533977744\";\nexport const Head = _ref2 => {\n  var _image$images, _image$images$fallbac;\n  let {data} = _ref2;\n  const {frontmatter: {title, slug, tags, heroImage}, excerpt} = data.mdx;\n  const image = heroImage ? getImage(heroImage) : null;\n  return React.createElement(React.Fragment, null, React.createElement(Seo, {\n    title: title,\n    description: excerpt,\n    path: \"posts/\" + slug,\n    thumbnail: image === null || image === void 0 ? void 0 : (_image$images = image.images) === null || _image$images === void 0 ? void 0 : (_image$images$fallbac = _image$images.fallback) === null || _image$images$fallbac === void 0 ? void 0 : _image$images$fallbac.src,\n    keywords: tags,\n    ogType: \"article\"\n  }));\n};\nPostDetailPage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostDetailPage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","a","ol","li","ul","code","h2","pre","_provideComponents","components","React","href","start","className","_templateObject","wrapper","MDXLayout","PostDetailPage","_ref","data","children","title","date","tags","heroImage","heroImageAlt","mdx","frontmatter","image","getImage","Layout","Tags","map","tag","key","Link","to","GatsbyImage","alt","MdxContent","src","repo","label","theme","crossOrigin","async","styled","_taggedTemplateLiteralLoose","dimens","gutter","thin","colors","onTag","Head","_ref2","_image$images","_image$images$fallbac","slug","excerpt","Seo","description","path","thumbnail","images","fallback","keywords","ogType","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}