"use strict";(self.webpackChunkricalelog=self.webpackChunkricalelog||[]).push([[723],{940:function(e,n,a){a.r(n),a.d(n,{Head:function(){return _},default:function(){return A}});var t=a(1151),s=a(7294);function l(e){const n=Object.assign({div:"div",p:"p",a:"a",h2:"h2",button:"button",h3:"h3",code:"code",h4:"h4",strong:"strong",hr:"hr",ul:"ul",li:"li"},(0,t.ah)(),e.components);return s.createElement(s.Fragment,null,s.createElement(n.div,{className:"md"},s.createElement(n.p,null,"코드를 일관성 있는 형식으로 유지하는 것은 중요하다. 일관성 있는 코드는 가독성을 올려주며, 이는 협업 및 유지보수에 큰 도움을 준다."),s.createElement(n.p,null,"코드를 일관성있게 유지하는 방법은 많이 있겠지만, (React Native 환경에서) 가장 쉽게 적용할 수 있는 방법 중 하나가 ESLint 적용이라고 생각한다. ",s.createElement(n.a,{href:"https://eslint.org/"},"ESLint")," 는 설정된 규칙에 어긋나는 코드를 리포팅해주는 도구이다. 설치 및 설정이 간단하기 때문에 누구나 쉽게 사용할 수 있다."),s.createElement(n.h2,{id:"1-설치",style:{position:"relative"}},s.createElement(n.a,{href:"#1-%EC%84%A4%EC%B9%98","aria-label":"1 설치 permalink",className:"anchor before"},s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"1. 설치"),s.createElement(n.div,{className:"codeblock-container"},s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">--dev</span> eslint</code></pre></div>'}}),s.createElement(n.button,{className:"codeblock-copy-button"},"COPY")),s.createElement(n.p,null,"위 명령어를 통해 설치할 수 있다."),s.createElement(n.p,null,"ESLint 는 설치한 뒤, 설정 파일을 작성해야 한다. 방법은 두 가지가 있다. 하나는 ESLint 에서 제공하는 명령어를 통해 자동 생성하는 것이고, 다른 하나는 프리셋을 사용하는 것이다. (물론 직접 작성하는 방법도 있지만 이 글에서는 다루지 않는다.)"),s.createElement(n.h3,{id:"11-eslint---init",style:{position:"relative"}},s.createElement(n.a,{href:"#11-eslint---init","aria-label":"11 eslint   init permalink",className:"anchor before"},s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"1.1. ",s.createElement(n.code,null,"eslint --init")),s.createElement(n.div,{className:"codeblock-container"},s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash">./node_modules/.bin/eslint <span class="token parameter variable">--init</span></code></pre></div>'}}),s.createElement(n.button,{className:"codeblock-copy-button"},"COPY")),s.createElement(n.p,null,"위 명령어를 입력하면 아래처럼 터미널에 몇 가지 문항이 뜨는데 자신에게 알맞는 답을 선택하면 자동으로 설정 파일을 생성해주고 필요한 디펜던시까지 설치해준다."),s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">✔ How would you like to use ESLint?\n✔ What type of modules does your project use?\n✔ Which framework does your project use?\n✔ Does your project use TypeScript?\n✔ Where does your code run?\n✔ What format do you want your config file to be in?\nThe config that you\'ve selected requires the following dependencies:\n\neslint-plugin-react@latest @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest\n✔ Would you like to install them now with npm?\nInstalling eslint-plugin-react@latest, @typescript-eslint/eslint-plugin@latest, @typescript-eslint/parser@latest</code></pre></div>'}}),s.createElement(n.h3,{id:"12-react-native-community-의-프리셋-사용",style:{position:"relative"}},s.createElement(n.a,{href:"#12-react-native-community-%EC%9D%98-%ED%94%84%EB%A6%AC%EC%85%8B-%EC%82%AC%EC%9A%A9","aria-label":"12 react native community 의 프리셋 사용 permalink",className:"anchor before"},s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"1.2. react-native-community 의 프리셋 사용"),s.createElement(n.p,null,"또다른 방법은 ",s.createElement(n.a,{href:"https://github.com/react-native-community"},"React Native Community")," 에서 제공하는 설정 ",s.createElement(n.a,{href:"https://www.npmjs.com/package/@react-native-community/eslint-config"},"프리셋"),"을 사용하는 것이다. 해당 프리셋은 아래 명령어로 설치할 수 있다."),s.createElement(n.div,{className:"codeblock-container"},s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">--dev</span> @react-native-community/eslint-config</code></pre></div>'}}),s.createElement(n.button,{className:"codeblock-copy-button"},"COPY")),s.createElement(n.p,null,"이 프리셋에는 TypeScript 관련 설정이 포함되어 있다."),s.createElement(n.p,null,"라이브러리가 설치되면 설정 파일을 작성해주어야 한다."),s.createElement(n.div,{className:"codeblock-container"},s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// {ROOT}/.eslintrc.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"@react-native-community"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),s.createElement(n.button,{className:"codeblock-copy-button"},"COPY")),s.createElement(n.p,null,s.createElement(n.a,{href:"https://www.npmjs.com/package/@react-native-community/eslint-config"},"@react-native-community/eslint-config")," 패키지에 설정이 미리 되어 있으므로, 이 이상 더 해 줄 것은 없다."),s.createElement(n.h4,{id:"121-프리셋-설정-수정",style:{position:"relative"}},s.createElement(n.a,{href:"#121-%ED%94%84%EB%A6%AC%EC%85%8B-%EC%84%A4%EC%A0%95-%EC%88%98%EC%A0%95","aria-label":"121 프리셋 설정 수정 permalink",className:"anchor before"},s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"1.2.1. 프리셋 설정 수정"),s.createElement(n.p,null,"React Native Community 의 프리셋이 일부 마음에 들지 않을 수 있다. 그렇다면 설정 파일을 수정하면 된다."),s.createElement(n.p,null,"마음에 들지 않을 수 있는 대표적은 설정으로는 ",s.createElement(n.a,{href:"https://www.npmjs.com/package/eslint-plugin-prettier"},"prettier")," 설정이 있다. React Native Community 의 프리셋에는 prettier 옵션이 설정되어 있고, 이 옵션에 의한 코드 스타일은 개발자의 호불호가 크게 갈릴 수 있다. 만약 해당 설정을 끄고 싶다면 아래처럼 설정 파일을 수정하면 된다."),s.createElement(n.div,{className:"codeblock-container"},s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// {ROOT}/.eslintrc.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">"@react-native-community"</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// eslint-config-prettier 는</span>\n    <span class="token comment">// @react-native-community/eslint-config 의 디펜던시에</span>\n    <span class="token comment">// 포함된 패키지이므로, 추가로 설치해 줄 필요는 없다.</span>\n    <span class="token string">"eslint-config-prettier"</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// prettier 설정을 끈다.</span>\n    <span class="token string-property property">"prettier/prettier"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),s.createElement(n.button,{className:"codeblock-copy-button"},"COPY")),s.createElement(n.p,null,"단 위처럼 prettier를 꺼버리면 ",s.createElement(n.code,null,"comma-dangle"),", ",s.createElement(n.code,null,"quotes")," 등 prettier 를 통해 적용되고 있던 일부 lint 옵션들이 꺼질 수 있다. 그러면 ",s.createElement(n.code,null,"rules")," 필드에 원하는 룰을 추가해주면 된다."),s.createElement(n.div,{className:"codeblock-container"},s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// {ROOT}/.eslintrc.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token string-property property">"comma-dangle"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token string">"always-multiline"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">quotes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token string">"single"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">semi</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),s.createElement(n.button,{className:"codeblock-copy-button"},"COPY")),s.createElement(n.p,null,"설정에 관한 자세한 내용은 ",s.createElement(n.a,{href:"https://eslint.org/docs/user-guide/configuring/"},"공식 문서"),"를 참고하자."),s.createElement(n.h2,{id:"2-자동화",style:{position:"relative"}},s.createElement(n.a,{href:"#2-%EC%9E%90%EB%8F%99%ED%99%94","aria-label":"2 자동화 permalink",className:"anchor before"},s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"2. 자동화"),s.createElement(n.p,null,"ESLint 를 적용했지만, 이 툴은 설치한 것만으로 자동으로 코드를 검사를 해주지 않는다. ",s.createElement(n.code,null,"eslint")," 명령어를 실행해야지만 코드를 검사해준다. 하지만 명령어를 일일이 쳐주는 것은 번거로울 뿐더러 까먹기도 쉽다. 까먹고 커밋하고 푸시하면 결국 설치한 것이 의미가 없어진다. 까먹지 않는 가장 좋은 방법은 툴이 자동으로 알아서 실행되게끔 자동화를 해주는 것이다."),s.createElement(n.p,null,"자동화 방법에는 여러가지가 있을 수 있겠지만, 여기서는 ",s.createElement(n.a,{href:"https://git-scm.com/"},"git")," 의 ",s.createElement(n.a,{href:"https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks"},"pre-commit 훅"),"을 사용한다."),s.createElement(n.h3,{id:"21-pre-commit",style:{position:"relative"}},s.createElement(n.a,{href:"#21-pre-commit","aria-label":"21 pre commit permalink",className:"anchor before"},s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"2.1. pre-commit"),s.createElement(n.p,null,"pre-commit 훅은 커밋 직전에 실행되는 스크립트다. 스크립트 결과에 따라 커밋을 막을 수도 있다. 즉 우리는 pre-commit 으로 ",s.createElement(n.code,null,"eslint")," 명령어를 실행하고, 룰셋에 맞지 않는 코드가 있으면 커밋을 하지 못하게 할 것이다."),s.createElement(n.p,null,"pre-commit 훅은 ",s.createElement(n.code,null,".git/hooks/pre-commit")," 파일에 작성하면 된다. 아래는 간략화한 pre-commit 코드다."),s.createElement(n.div,{className:"codeblock-container"},s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token comment"># eslint 가 설치되어 있는지 확인하고 설치되어있지 않다면 커밋을 막는다.</span>\n<span class="token assign-left variable">ESLINT</span><span class="token operator">=</span><span class="token string">"node_modules/.bin/eslint"</span>\n<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-x</span> <span class="token string">"<span class="token variable">$ESLINT</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>\n  <span class="token builtin class-name">printf</span> <span class="token string">"Please install ESlint<span class="token entity" title="\\n">\\n</span>"</span>\n  <span class="token builtin class-name">exit</span> <span class="token number">1</span>\n<span class="token keyword">fi</span>\n\n<span class="token comment"># staged 된 파일들에 대해서만 eslint --fix 명령어를 실행한다.</span>\n<span class="token assign-left variable">STAGED_FILES</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--cached</span> --name-only --diff-filter<span class="token operator">=</span>ACM <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">".[jt]sx\\{0,1\\}$"</span><span class="token variable">)</span></span><span class="token punctuation">)</span>\n<span class="token variable">$ESLINT</span> <span class="token string">"<span class="token variable">${STAGED_FILES<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>"</span> <span class="token parameter variable">--fix</span>\n<span class="token assign-left variable">ESLINT_EXIT</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$?</span>"</span>\n\n<span class="token comment"># eslint --fix 결과에 따라 커밋을 진행한다.</span>\n<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">${ESLINT_EXIT}</span>"</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>\n  <span class="token builtin class-name">printf</span> <span class="token string">"COMMIT SUCCEEDED"</span>\n<span class="token keyword">else</span>\n  <span class="token builtin class-name">printf</span> <span class="token string">"COMMIT FAILED"</span>\n  <span class="token builtin class-name">exit</span> <span class="token number">1</span>\n<span class="token keyword">fi</span>\n<span class="token builtin class-name">exit</span> <span class="token variable">$?</span></code></pre></div>'}}),s.createElement(n.button,{className:"codeblock-copy-button"},"COPY")),s.createElement(n.p,null,"(",s.createElement(n.a,{href:"https://gist.github.com/ricale/a386ae04faff3ba26f3f44c0bbcfcbe3"},"스크립트 원문"),")"),s.createElement(n.h2,{id:"3-결과",style:{position:"relative"}},s.createElement(n.a,{href:"#3-%EA%B2%B0%EA%B3%BC","aria-label":"3 결과 permalink",className:"anchor before"},s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"3. 결과"),s.createElement(n.p,null,"이제 코드를 커밋할 때마다 git 스테이지에 포함된 파일에 대해 자동으로 eslint 명령어가 실행될 것이다. 작업 다 끝났다고 생각했는데 pre-commit 에 의해 커밋이 막히면 기분이 나쁠 수도 있지만, 장기적으로 봤을 때 작업의 효율성이 개선될 것이다."),s.createElement(n.h2,{id:"4-개선점",style:{position:"relative"}},s.createElement(n.a,{href:"#4-%EA%B0%9C%EC%84%A0%EC%A0%90","aria-label":"4 개선점 permalink",className:"anchor before"},s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4. 개선점?"),s.createElement(n.p,null,"ESLint 는 기본적으로 일관된 코드를 강제하는 것에 초점을 두기 보다는 나쁜 코드를 막는 것에 초점을 둔다. 규칙에 맞지 않는 코드를 찾아주지만 그것을 자동으로 고쳐주지는 않고 (",s.createElement(n.code,null,"--fix")," 옵션을 통해 몇몇 옵션들은 코드를 자동으로 고쳐주기도 하지만 모든 옵션이 다 그렇지는 않다), 규칙 자체도 상황에 따라서는 느슨하다고 느낄 수 있다."),s.createElement(n.p,null,"그렇다면 일관된 코드를 강제하기 위한 대안은 어떤 게 있을까?"),s.createElement(n.p,null,s.createElement(n.a,{href:"https://prettier.io/"},"Prettier")," 라이브러리를 사용하는 방법이 있다. Prettier 는 말 그대로 일관된 코드를 강제하는, 일관되지 않은 부분을 강제로 고쳐주는 툴이다. (",s.createElement(n.strong,null,"1.2.1. 프리셋 설정 수정")," 에서 비활성화했던 prettier 옵션이 이 ",s.createElement(n.a,{href:"https://www.npmjs.com/package/eslint-plugin-prettier"},"Prettier 라이브러리의 ESLint 플러그인 버전"),"이다.) 다만 이 툴은 강제성이 크기 때문에 사용자에 따라 호불호가 갈릴 수 있다. 사용해보고 더 맞는 쪽을 선택하는 것이 좋을 것 같다."),s.createElement(n.hr),s.createElement(n.h2,{id:"references",style:{position:"relative"}},s.createElement(n.a,{href:"#references","aria-label":"references permalink",className:"anchor before"},s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"References"),s.createElement(n.ul,null,"\n",s.createElement(n.li,null,s.createElement(n.a,{href:"https://gist.github.com/broofa/730fab6ceb1686f4a1fa9977b791b1b5"},"GitHub Gist - broofa/pre-commit")),"\n",s.createElement(n.li,null,s.createElement(n.a,{href:"https://github.com/facebook/react-native/issues/26903"},"facebook/react-native - Remove prettier from eslint-config-react-native-community")),"\n")),"\n",s.createElement(n.div,{className:"toc"},s.createElement(n.p,null,"목차"),s.createElement(n.ul,null,"\n",s.createElement(n.li,null,s.createElement(n.a,{href:"#1-%EC%84%A4%EC%B9%98"},"1. 설치"),"\n",s.createElement(n.ul,null,"\n",s.createElement(n.li,null,s.createElement(n.a,{href:"#11-eslint---init"},"1.1. ",s.createElement(n.code,null,"eslint --init"))),"\n",s.createElement(n.li,null,s.createElement(n.a,{href:"#12-react-native-community-%EC%9D%98-%ED%94%84%EB%A6%AC%EC%85%8B-%EC%82%AC%EC%9A%A9"},"1.2. react-native-community 의 프리셋 사용"),"\n",s.createElement(n.ul,null,"\n",s.createElement(n.li,null,s.createElement(n.a,{href:"#121-%ED%94%84%EB%A6%AC%EC%85%8B-%EC%84%A4%EC%A0%95-%EC%88%98%EC%A0%95"},"1.2.1. 프리셋 설정 수정")),"\n"),"\n"),"\n"),"\n"),"\n",s.createElement(n.li,null,s.createElement(n.a,{href:"#2-%EC%9E%90%EB%8F%99%ED%99%94"},"2. 자동화"),"\n",s.createElement(n.ul,null,"\n",s.createElement(n.li,null,s.createElement(n.a,{href:"#21-pre-commit"},"2.1. pre-commit")),"\n"),"\n"),"\n",s.createElement(n.li,null,s.createElement(n.a,{href:"#3-%EA%B2%B0%EA%B3%BC"},"3. 결과")),"\n",s.createElement(n.li,null,s.createElement(n.a,{href:"#4-%EA%B0%9C%EC%84%A0%EC%A0%90"},"4. 개선점?")),"\n",s.createElement(n.li,null,s.createElement(n.a,{href:"#references"},"References")),"\n")))}var c,o,r,p=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?s.createElement(n,e,s.createElement(l,e)):l(e)},i=a(1880),u=a(1883),m=a(3723),h=a(6758),d=a(3904),k=a(891),E=a(6120),g=a(5777),v=a(7178),f=a(2889),b=a(5924),y=a(7466);function S(e){let{data:n,children:a}=e;const t=s.useRef(),{frontmatter:l,sameSeriesPosts:c}=n.mdx,{title:o,slug:r,date:p,tags:i,series:m,heroImage:d,heroImageAlt:k}=l;return s.useEffect((()=>{var e;const n=null===(e=t.current)||void 0===e?void 0:e.querySelectorAll(".md h1, .md h2, .md h3, .md h4, .md h5, .md h6"),a=new IntersectionObserver((()=>(0,b.Z)(t,n)),{rootMargin:"0px 0px -90% 0px",threshold:[0,1]});return null==n||n.forEach((e=>a.observe(e))),()=>a.disconnect()}),[]),s.createElement(h.Z,null,s.createElement(C,null,s.createElement("h1",null,s.createElement(u.Link,{to:"/posts/"+r},o)),s.createElement(w,null,p),s.createElement(f.Z,{tags:i})),s.createElement(v.Z,{name:m,data:c,current:r}),s.createElement(y.Z,{data:d,alt:k}),s.createElement(H,{ref:t},a),s.createElement(g.Z,null))}const C=k.ZP.div(c||(c=(0,i.Z)(["\n  margin: 60px 0 72px;\n  padding: 0 24px;\n\n  & > h1 {\n    font-size: 2.5rem;\n    word-break: keep-all;\n    margin: 0;\n\n    > a {\n      color: ",";\n    }\n  }\n"])),(e=>e.theme.colors.onBackground)),w=k.ZP.div(o||(o=(0,i.Z)(["\n  margin: 16px 0;\n"]))),H=(0,k.ZP)(E.Z)(r||(r=(0,i.Z)(["\n  margin-bottom: 60px;\n"]))),_=e=>{var n,a;let{data:t}=e;const{frontmatter:{title:l,slug:c,tags:o,heroImage:r,previewContent:p},excerpt:i}=t.mdx,u=r?(0,m.c)(r):null;return s.createElement(d.Z,{title:l,description:null!=p?p:i,path:"posts/"+c,thumbnail:null==u||null===(n=u.images)||void 0===n||null===(a=n.fallback)||void 0===a?void 0:a.src,keywords:o,ogType:"article"})};function A(e){return s.createElement(S,e,s.createElement(p,e))}}}]);
//# sourceMappingURL=component---src-pages-posts-mdx-frontmatter-slug-tsx-content-file-path-users-kangseong-workspace-private-ricalelog-posts-2021-210325-apply-eslint-index-mdx-73d1aa02e756a3cedb7b.js.map