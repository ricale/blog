{"version":3,"file":"component---src-pages-posts-mdx-frontmatter-slug-tsx-content-file-path-users-kangseong-workspace-private-ricalelog-posts-210320-sqlite-3-data-types-index-mdx-18afd58106058b9c65a5.js","mappings":"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","sources":["webpack://ricalelog/./posts/210320-sqlite3-data-types/index.mdx","webpack://ricalelog/./src/pages/posts/{mdx.frontmatter__slug}.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    hr: \"hr\",\n    h2: \"h2\",\n    blockquote: \"blockquote\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    strong: \"strong\",\n    ol: \"ol\",\n    h4: \"h4\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"아래 내용은 sqlite 의 공식 문서인 \", React.createElement(_components.a, {\n    href: \"https://www.sqlite.org/datatype3.html\"\n  }, \"Datatypes In SQLite Version 3\"), \"를 간단히 인용 및 정리한 것이다. 정확한 내용은 본문보다는 해당 문서 참고를 권장한다.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, null, \"1. Datatypes In SQLite\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"In SQLite, the datatype of a value is associated with the value itself, not with its container.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"sqlite는 SQL이지만 데이터 타입은 동적 타입을 사용한다.\"), \"\\n\", React.createElement(_components.h2, null, \"2. Storage Classes and Datatypes\"), \"\\n\", React.createElement(_components.p, null, \"Storage class 는 다섯 가지가 있다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"NULL\"), \"\\n\", React.createElement(_components.li, null, \"INTEGER. signed 1,2,3,4,5,6,8 byte number.\"), \"\\n\", React.createElement(_components.li, null, \"REAL: floating point value. 8 byte.\"), \"\\n\", React.createElement(_components.li, null, \"TEXT\"), \"\\n\", React.createElement(_components.li, null, \"BLOB: blob of data\"), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"A storage class is more general than a datatype. (...) And so for the most part, \\\"storage class\\\" is indistinguishable from \\\"datatype\\\" and the two terms can be used interchangeably.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Storage class 는 데이터 타입보다 더 일반적인 개념이다. (...) 대부분의 경우, storage class 와 데이터 타입은 구분할 수 없다. 두 용어는 혼용될수 있다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Any column in an SQLite version 3 database, except an INTEGER PRIMARY KEY column, may be used to store a value of any storage class.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"INTEGER PRIMARY KEY 컬럼을 제외한 모든 컬럼은, 어떤 storage class 의 값이라도 저장할 수 있다.\"), \"\\n\", React.createElement(_components.h3, null, \"2.1. Boolean Datatype\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Boolean values are stored as integers 0 (false) and 1 (true).\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"2.2. Date and Time Datatype\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"SQLite does not have a storage class set aside for storing dates and/or times. Instead, the \", React.createElement(_components.a, {\n    href: \"https://www.sqlite.org/lang_datefunc.html\"\n  }, \"built-in Date And Time Functions\"), \" of SQLite are capable of storing dates and times as TEXT, REAL, or INTEGER values\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"일시(날짜 및 시간)을 위한 storage class 는 따로 없고, 해당 값을 TEXT, REAL, INTEGER 로 저장할 수 있게 도와주는 함수들이 존재한다.\"), \"\\n\", React.createElement(_components.h2, null, \"3. Type Affinity\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"The type affinity of a column is the recommended type for data stored in that column. The important idea here is that the type is recommended, not required.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Type affinity 는 특정 컬럼에 저장하도록 \", React.createElement(_components.strong, null, \"권장\"), \"하는 데이터 타입을 말한다.\"), \"\\n\", React.createElement(_components.p, null, \"아래와 같은 다섯 가지 Type affinity 가 존재함\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"TEXT: 숫자 타입(INTEGER, REAL)은 TEXT 로 변환되어 저장된다. 나머지 storage class 는 그대로 저장된다.\"), \"\\n\", React.createElement(_components.li, null, \"NUMERIC: 문자열은 가능하면 REAL 혹은 INTEGER 로 변환되어 저장되고, 가능하지 않다면 TEXT 로 저장된다. 숫자도 (실수라고 해도) INTEGER 로 변환 가능하다면 (변환해도 잃는 값이 없다면) 변환된다. 나머지 storage class 는 그대로 저장된다.\"), \"\\n\", React.createElement(_components.li, null, \"INTEGER: \", React.createElement(_components.a, {\n    href: \"https://www.sqlite.org/lang_expr.html#castexpr\"\n  }, \"CAST expression\"), \" 을 제외하고 NUMERIC 과 동일하다.\"), \"\\n\", React.createElement(_components.li, null, \"REAL: INTERGER 를 REAL 로 변환하여 저장함. 나머지는 NUMERIC 과 동일하다.\"), \"\\n\", React.createElement(_components.li, null, \"BLOB: 별다른 타입 변환 없이 그대로 저장된다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"3.1. Determination Of Column Affinity\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"If the declared type contains the string \\\"INT\\\" then it is assigned INTEGER affinity.\"), \"\\n\", React.createElement(_components.li, null, \"If the declared type of the column contains any of the strings \\\"CHAR\\\", \\\"CLOB\\\", or \\\"TEXT\\\" then that column has TEXT affinity. Notice that the type VARCHAR contains the string \\\"CHAR\\\" and is thus assigned TEXT affinity.\"), \"\\n\", React.createElement(_components.li, null, \"If the declared type for a column contains the string \\\"BLOB\\\" or if no type is specified then the column has affinity BLOB.\"), \"\\n\", React.createElement(_components.li, null, \"If the declared type for a column contains any of the strings \\\"REAL\\\", \\\"FLOA\\\", or \\\"DOUB\\\" then the column has REAL affinity.\"), \"\\n\", React.createElement(_components.li, null, \"Otherwise, the affinity is NUMERIC.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"CREATE TABLE 문 등으로 컬럼의 타입 선언 시\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"컬럼의 선언된 타입 이름에 \\\"INT\\\" 가 들어가면 INTEGER affinity\"), \"\\n\", React.createElement(_components.li, null, \"선언된 타입 이름에 \\\"CHAR\\\", \\\"CLOB\\\", \\\"TEXT\\\"가 들어가면 TEXT affinity\"), \"\\n\", React.createElement(_components.li, null, \"이름에 \\\"BLOB\\\"가 들어가거나 타입이 지정되지 않으면 BLOB affinity\"), \"\\n\", React.createElement(_components.li, null, \"이름에 \\\"REAL\\\", \\\"FLOA\\\", \\\"DOUB\\\"가 들어가면 REAL affinity\"), \"\\n\", React.createElement(_components.li, null, \"위 조건에 모두 걸리지 않으면, NUMERIC affinity\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"가 지정된다.\"), \"\\n\", React.createElement(_components.h4, null, \"3.1.1. Affinity Name Examples\"), \"\\n\", React.createElement(_components.p, null, \"해당 문서의 해당 항목 참고\"), \"\\n\", React.createElement(_components.h3, null, \"3.2. Affinity Of Expression\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Every table column has a type affinity (one of BLOB, TEXT, INTEGER, REAL, or NUMERIC) but expressions do not necessarily have an affinity.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"모든 테이블 컬럼은 type affinity 를 갖지만, 표현식(Expression)은 type affinity 가 필수적이지 않다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"The right-hand operand of an IN or NOT IN operator has no affinity if the operand is a list and has the same affinity as the affinity of the result set expression if the operand is a SELECT.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"IN/NOT IN 문의 오른쪽 피연산자는 리스트면서 피연산자가 SELECT 인 결과 표현식의 affinity 와 같은 affinity 를 갖는다면 affinity 가 없다. \", React.createElement(\"span\", {\n    style: {\n      color: \"darkgray\"\n    }\n  }, \"(무슨 말인지 모르겠다..)\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"When an expression is a simple reference to a column of a real table (not a VIEW or subquery) then the expression has the same affinity as the table column.\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Parentheses around the column name are ignored.\"), \"\\n\", React.createElement(_components.li, null, \"Any operators applied to column names, including the no-op unary \\\"+\\\" operator, convert the column name into an expression which always has no affinity.\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"표현식이 테이블의 컬럼에 대한 레퍼런스라면, affinity 는 해당 컬럼과 동일하다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"affinity 판단 시 괄호는 무시된다.\"), \"\\n\", React.createElement(_components.li, null, \"연산자를 사용했다면, 해당 표현식은 무조건 affinity 가 없다.\"), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"An expression of the form \\\"CAST(expr AS type)\\\" has an affinity that is the same as a column with a declared type of \\\"type\\\".\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"\\\"CAST(expr AS type)\\\" 형식의 표현식은 \\\"type\\\" affinity 를 갖는다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"A COLLATE operator has the same affinity as its left-hand side operand.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"COLLATE 연산자는 왼쪽 피연산자와 같은 affinity 를 갖는다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Otherwise, an expression has no affinity.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"여기까지 해당사항이 없으면, 해당 표현식에 affinity 는 없다.\"), \"\\n\", React.createElement(_components.h3, null, \"3.3. Column Affinity For Views And Subqueries\"), \"\\n\", React.createElement(\"span\", {\n    style: {\n      color: \"darkgray\"\n    }\n  }, React.createElement(_components.p, null, \"(뷰와 서브쿼리는 사용해 본 적이 거의 없으므로, 이 문단은 생략.)\")), \"\\n\", React.createElement(_components.h3, null, \"3.4. Column Affinity Behavior Example\"), \"\\n\", React.createElement(_components.p, null, \"해당 문서의 해당 항목 참고\"), \"\\n\", React.createElement(_components.h2, null, \"4. Comparison Expressions\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"\\\"=\\\", \\\"==\\\", \\\"<\\\", \\\"<=\\\", \\\">\\\", \\\">=\\\", \\\"!=\\\", \\\"\\\", \\\"IN\\\", \\\"NOT IN\\\", \\\"BETWEEN\\\", \\\"IS\\\", and \\\"IS NOT\\\"\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"4.1. Sort Order\"), \"\\n\", React.createElement(_components.p, null, \"정렬 시 순서는 아래처럼 적용된다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"NULL < not NULL\"), \"\\n\", React.createElement(_components.li, null, \"INTEGER/REAL < TEXT < BLOB\"), \"\\n\", React.createElement(_components.li, null, \"BLOB 끼리의 비교에는 memcmp() 사용\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"4.2. Type Conversion Prior To Comparison\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"If one operand has INTEGER, REAL or NUMERIC affinity and the other operand has TEXT or BLOB or no affinity then NUMERIC affinity is applied to other operand.\"), \"\\n\", React.createElement(_components.li, null, \"If one operand has TEXT affinity and the other has no affinity, then TEXT affinity is applied to the other operand.\"), \"\\n\", React.createElement(_components.li, null, \"Otherwise, no affinity is applied and both operands are compared as is.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"피연산자 하나가 INTEGER/REAL/NUMERIC 이고 다른 피연산자가 TEXT/BLOB/affinity없음 이면, 숫자 유형이 다른 피연산자 유형으로 변환된다.\"), \"\\n\", React.createElement(_components.li, null, \"피연산자 하나가 TEXT 이고 다른 피연산자의 affinity 가 없으면 TEXT 가 다른 피연산자 유형으로 적용된다. \", React.createElement(\"span\", {\n    style: {\n      color: \"darkgray\"\n    }\n  }, \"(?? affinity 가 없는 걸로 적용된다고? 3.1. 항목을 보면 affinity 가 없는 경우는 없는 것 같은데, BLOB 를 말하는 건가?)\")), \"\\n\", React.createElement(_components.li, null, \"그렇지 않으면, 두 피연산자는 affinity 변환 없이 있는 그대로 비교된다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"4.3. Comparison Example\"), \"\\n\", React.createElement(_components.p, null, \"해당 문서의 해당 항목 참고\"), \"\\n\", React.createElement(\"span\", {\n    style: {\n      color: \"darkgray\"\n    }\n  }, \"(예시에 있는 CREATE 문을 보면\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"CREATE TABLE t1(\\n    a TEXT,      -- text affinity\\n    b NUMERIC,   -- numeric affinity\\n    c BLOB,      -- no affinity\\n    d            -- no affinity\\n);\\n\")), \"\\n\", React.createElement(\"span\", {\n    style: {\n      color: \"darkgray\"\n    }\n  }, React.createElement(_components.p, null, \"c 는 BLOB 로 지정하고 d 는 지정하지 않았는데, 주석으로 no affinity 라고\\n되어있다. 3.1. 항목에 나온대로라면 BLOB affinity 가 적용되어야 하는 것 아닌가?\\n의문.)\")), \"\\n\", React.createElement(_components.h2, null, \"5. Operators\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"+, -, *, /, %, <<, >>, &, and |\"), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"The implied type conversion of mathematical operands is slightly different from \", React.createElement(_components.a, {\n    href: \"https://www.sqlite.org/lang_expr.html#castexpr\"\n  }, \"CAST to NUMERIC\"), \" in that string and BLOB values that look like real numbers but have no fractional part are kept as REAL instead of being converted into INTEGER as they would be for \", React.createElement(_components.a, {\n    href: \"https://www.sqlite.org/lang_expr.html#castexpr\"\n  }, \"CAST to NUMERIC\"), \".\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"수학적 피연산자의 암시적 타입 변환은 \", React.createElement(_components.a, {\n    href: \"https://www.sqlite.org/lang_expr.html#castexpr\"\n  }, \"CAST to NUMERIC\"), \" 문서에 나온 것과는 약간 다르다. 문자열이나 BLOB 값이 REAL 형식이면서 소숫점 아래 값이 없을 경우, INTEGER 로 자동 변환하는 것이 아니라 REAL 로 유지한다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"The conversion from STRING or BLOB into REAL or INTEGER is performed even if it is lossy and irreversible.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"수학적 피연산자로 사용된 문자열이나 BLOB 값은 무조건 REAL/INTEGER 로 변환된다. 심지어는 변환으로 인해 값의 손실이 생기더라도.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Some mathematical operators (%, <<, >>, &, and |) expect INTEGER operands. For those operators, REAL operands are converted into INTEGER in the same way as a CAST to INTEGER.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"어떤 연산자들은 피연산자로 INTEGER 값만을 사용한다. 이런 연산자들은 만약 REAL 이 피연산자로 사용되면, 값의 손실이 생기더라도 이 값을 INTEGER 로 변환한다.\"), \"\\n\", React.createElement(_components.h2, null, \"6. Sorting, Grouping and Compound SELECTs\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"When query results are sorted by an ORDER BY clause, values with storage class NULL come first, followed by INTEGER and REAL values interspersed in numeric order, followed by TEXT values in collating sequence order, and finally BLOB values in memcmp() order.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"쿼리 결과가 ORDER BY 문으로 정렬될 경우, 아래 순서대로 값이 나온다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"NULL 값이 먼저 나옴. 그 뒤를 따라서\"), \"\\n\", React.createElement(_components.li, null, \"INTEGER/REAL 값들이 숫자 순서에 따라 정렬됨. 그 뒤를 따라서\"), \"\\n\", React.createElement(_components.li, null, \"TEXT 값들이 collaing sequence 순서에 따라 정렬됨. 그 뒤를 따라서\"), \"\\n\", React.createElement(_components.li, null, \"BLOB 값이 memcmp() 순서에 따라 정렬됨\"), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"When grouping values with the GROUP BY clause values with different storage classes are considered distinct, except for INTEGER and REAL values which are considered equal if they are numerically equal.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"쿼리 결과를 GROUP BY 절에 의해 묶을 경우, storage class 가 다른 값은 별개의 값으로 판단된다. 단, INTEGER/REAL 의 경우 같은 숫자값이라면 같은 값으로 판단된다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"The compound SELECT operators UNION, INTERSECT and EXCEPT perform implicit comparisons between values. No affinity is applied to comparison operands for the implicit comparisons associated with UNION, INTERSECT, or EXCEPT - the values are compared as is.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"UNION, INTERSEC, EXCEPT 문을 사용할 때 각 값 간에 암시적 비교가 실시된다. 이 때 변환은 일어나지 않고 값들은 있는 그대로 비교된다.\"), \"\\n\", React.createElement(_components.h2, null, \"7. Collating Sequences\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"When SQLite compares two strings, it uses a collating sequence or collating function (two words for the same thing) to determine which string is greater or if the two strings are equal. SQLite has three built-in collating functions: BINARY, NOCASE, and RTRIM.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"두 문자열을 비교할 때, collating sequence 혹은 collating function 을 사용한다. sqlite 는 세 개의 내장 collating function 을 제공한다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"BINARY: 문자열 비교에 memcmp() 사용\"), \"\\n\", React.createElement(_components.li, null, \"NOCASE: 문자열 비교에 \", React.createElement(_components.a, {\n    href: \"https://www.sqlite.org/c3ref/stricmp.html\"\n  }, \"sqlite3_strnicmp()\"), \" 사용\"), \"\\n\", React.createElement(_components.li, null, \"RTRIM: BINARY 와 동일하나 앞뒤 공백 문자는 제거한 뒤 비교\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"7.1. Assigning Collating Sequences from SQL\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"If either operand has an explicit collating function assignment using the postfix COLLATE operator, then the explicit collating function is used for comparison, with precedence to the collating function of the left operand.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"만약 두 피연산자가 COLLATE 문을 사용해 collating function 이 지정되어 있다면, 두 값의 비교를 위해 이 명시적 collating function 이 사용된다. 왼쪽 피연산자의 collating function 가 우선권을 가진다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.ol, {\n    start: \"2\"\n  }, \"\\n\", React.createElement(_components.li, null, \"If either operand is a column, then the collating function of that column is used with precedence to the left operand. For the purposes of the previous sentence, a column name preceded by one or more unary \\\"+\\\" operators and/or CAST operators is still considered a column name.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(\"span\", {\n    style: {\n      color: \"darkgray\"\n    }\n  }, \"(무슨 말인지 잘 모르겠다..)\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.ol, {\n    start: \"3\"\n  }, \"\\n\", React.createElement(_components.li, null, \"Otherwise, the BINARY collating function is used for comparison.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"그렇지 않으면 BINARY collating function 이 사용된다.\"), \"\\n\", React.createElement(_components.h3, null, \"7.2. Collating Sequence Example\"), \"\\n\", React.createElement(_components.p, null, \"해당 문서의 해당 항목 참고\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/kangseong/workspace/private/ricalelog/posts/210320-sqlite3-data-types/index.mdx\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nvar _templateObject;\nimport * as React from \"react\";\nimport {Link} from \"gatsby\";\nimport {GatsbyImage, getImage} from \"gatsby-plugin-image\";\nimport Layout from \"../../components/Layout\";\nimport Seo from \"../../components/Seo\";\nimport styled from \"../../themes\";\nimport MdxContent from \"../../components/MdxContent\";\nconst PostDetailPage = _ref => {\n  let {data, children} = _ref;\n  const {title, date, tags, heroImage, heroImageAlt} = data.mdx.frontmatter;\n  const image = heroImage ? getImage(heroImage) : null;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, title), React.createElement(Tags, null, tags.map(tag => React.createElement(\"li\", {\n    key: tag\n  }, React.createElement(Link, {\n    to: \"/tags/\" + tag\n  }, tag)))), React.createElement(\"div\", null, date), !!image && React.createElement(GatsbyImage, {\n    image: image,\n    alt: heroImageAlt !== null && heroImageAlt !== void 0 ? heroImageAlt : \"\"\n  }), React.createElement(MdxContent, null, children));\n};\nconst Tags = styled.ul(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  display: flex;\\n  flex-direction: row;\\n  flex-wrap: wrap;\\n  gap: \", \"px;\\n\\n  margin: 0;\\n  padding: 0;\\n  list-style: none;\\n\\n  > li {\\n    padding: \", \"px \", \"px\\n      0px;\\n    border-radius: 2px;\\n\\n    background-color: \", \";\\n    color: \", \";\\n\\n    > a {\\n      text-decoration: none;\\n    }\\n  }\\n\"])), p => p.theme.dimens.gutter, p => p.theme.dimens.thin, p => p.theme.dimens.gutter, p => p.theme.colors.tag, p => p.theme.colors.onTag);\nconst query = \"3533977744\";\nexport const Head = _ref2 => {\n  var _image$images, _image$images$fallbac;\n  let {data} = _ref2;\n  const {frontmatter: {title, slug, tags, heroImage}, excerpt} = data.mdx;\n  const image = heroImage ? getImage(heroImage) : null;\n  return React.createElement(Seo, {\n    title: title,\n    description: excerpt,\n    path: \"posts/\" + slug,\n    thumbnail: image === null || image === void 0 ? void 0 : (_image$images = image.images) === null || _image$images === void 0 ? void 0 : (_image$images$fallbac = _image$images.fallback) === null || _image$images$fallbac === void 0 ? void 0 : _image$images$fallbac.src,\n    keywords: tags,\n    ogType: \"article\"\n  });\n};\nPostDetailPage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostDetailPage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","hr","h2","blockquote","ul","li","h3","strong","ol","h4","pre","code","_provideComponents","components","React","href","style","color","className","start","_templateObject","wrapper","MDXLayout","PostDetailPage","_ref","data","children","title","date","tags","heroImage","heroImageAlt","mdx","frontmatter","image","getImage","Layout","Tags","map","tag","key","Link","to","GatsbyImage","alt","MdxContent","styled","_taggedTemplateLiteralLoose","theme","dimens","gutter","thin","colors","onTag","Head","_ref2","_image$images","_image$images$fallbac","slug","excerpt","Seo","description","path","thumbnail","images","fallback","src","keywords","ogType","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}