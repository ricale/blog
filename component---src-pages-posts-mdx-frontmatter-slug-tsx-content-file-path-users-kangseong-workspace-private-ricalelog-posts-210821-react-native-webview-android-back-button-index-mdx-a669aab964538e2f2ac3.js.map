{"version":3,"file":"component---src-pages-posts-mdx-frontmatter-slug-tsx-content-file-path-users-kangseong-workspace-private-ricalelog-posts-210821-react-native-webview-android-back-button-index-mdx-a669aab964538e2f2ac3.js","mappings":"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","sources":["webpack://ricalelog/./posts/210821-react-native-webview-android-back-button/index.mdx","webpack://ricalelog/./src/pages/posts/{mdx.frontmatter__slug}.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\",\n    h3: \"h3\",\n    h4: \"h4\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"React Native 를 웹뷰 컨테이너로 사용해 웹앱을 구현하고 있다.\"), \"\\n\", React.createElement(_components.p, null, \"웹뷰를 사용한 하이브리드앱 구현 시 주의해야 할 점 중 하나는 안드로이드 기기의 백버튼(뒤로가기 버튼)에 대한 처리다. 사람들은 이전 웹페이지로 돌아가길 기대하며 백버튼을 누르지만, React Native 는 웹뷰 내에서의 이전 페이지로 이동하는 것이 아니라 React Native 상의 이전 화면으로 돌아가기 때문이다.\"), \"\\n\", React.createElement(_components.p, null, \"만약 웹뷰 화면이 해당 앱의 첫 화면이라면, 백버튼을 눌렀을 때 이전 웹페이지로 가는 것이 아니라 앱이 종료되는 것을 경험할 수 있다. 당연하게도 그것은 개발자가 의도한 사항도, 사용자가 의도한 사항도 아니다.\"), \"\\n\", React.createElement(_components.p, null, \"그러면 웹뷰가 있는 화면에서 백버튼을 눌렀을 때 React Native 의 이전 화면이 아닌 웹뷰의 이전 웹페이지가로 가도록 코드를 수정해보자.\"), \"\\n\", React.createElement(_components.h2, null, \"1. \", React.createElement(_components.code, null, \"onNavigationStateChange\")), \"\\n\", React.createElement(_components.p, null, \"React Native WebView 를 사용하고 있다면 \", React.createElement(_components.a, {\n    href: \"https://github.com/react-native-webview/react-native-webview/blob/master/docs/Reference.md#onnavigationstatechange\"\n  }, React.createElement(_components.code, null, \"onNavigationStateChange\"), \" 콜백\"), \"과 \", React.createElement(_components.a, {\n    href: \"https://reactnative.dev/docs/backhandler\"\n  }, React.createElement(_components.code, null, \"BackHandler\"), \" API\"), \"를 사용해 이전 웹페이지로 이동하도록 백버튼의 기능을 조정할 수 있다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"const HomeScreen = (props) => {\\n  const ref = useRef();\\n  const [navState, setNavState] = useState();\\n\\n  useEffect(() => {\\n    const onPress = () => {\\n      if (navState.canGoBack) {\\n        // 뒤로 갈 수 있는 상태라면 이전 웹페이지로 이동한다\\n        ref.current.goBack();\\n        // 기본 뒤로가기 동작을 수행하지 않을 거라면 true 를 리턴한다.\\n        return true;\\n      } else {\\n        // 뒤로 갈 수 없는 상태라면\\n        // 다른 원하는 행동을 하면 된다\\n        console.log(\\\"do something\\\");\\n        // 기본 뒤로가기 동작을 수행하지 않을 거라면 true 가 아닌 값을 리턴한다.\\n        return false;\\n      }\\n    };\\n\\n    // 안드로이드 백버튼이 눌렸을 때 이벤트 리스너를 등록한다.\\n    BackHandler.addEventListener(\\\"hardwareBackPress\\\", onPress);\\n    return () => {\\n      BackHandler.removeEventListener(\\\"hardwareBackPress\\\", onPress);\\n    };\\n  }, [navState.canGoBack]);\\n\\n  return (\\n    <WebView\\n      // ...\\n      ref={ref}\\n      // 웹뷰의\\n      onNavigationStateChange={setNavState}\\n    />\\n  );\\n};\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"onNavigationStateChange\"), \" 콜백의 첫 번째 인자(\", React.createElement(_components.code, null, \"navState\"), \")는 웹뷰의 현재 상태가 담긴 객체인데, 해당 객체의 \", React.createElement(_components.code, null, \"canGoBack\"), \" 값은 현재 웹뷰에서 뒤로가기가 가능한 상태인지를 알려준다 (예를 들어 첫페이지에서는 뒤로 갈 수 없을 것이다. 그런 경우에는 \", React.createElement(_components.code, null, \"false\"), \" 값을 가진다).\"), \"\\n\", React.createElement(_components.p, null, \"뒤로 갈 수 있다면 \", React.createElement(_components.code, null, \"ref.current.goBack()\"), \"메서드를 사용해 이전 페이지로 돌아가고, 그렇지 않다면 필요한 다른 작업을 하면 되겠다.\"), \"\\n\", React.createElement(_components.h2, null, \"2. HTML5 History API 대응\"), \"\\n\", React.createElement(_components.p, null, \"하지만 \", React.createElement(_components.code, null, \"onNavigationStateChange\"), \" 콜백에 문제가 있으니, 바로 \", React.createElement(_components.code, null, \"pushState()\"), \", \", React.createElement(_components.code, null, \"replaceState()\"), \" 등 \", React.createElement(_components.a, {\n    href: \"https://developer.mozilla.org/en-US/docs/Web/API/History_API\"\n  }, \"HTML5 History API\"), \"로 추가된 기능으로 페이지 이동을 하면 동작하지 않는다는 것이다. 이는 \", React.createElement(_components.code, null, \"canGoBack\"), \" 값이 최신화되지 않는다는 뜻이고, 위에서 작성한 코드가 정상적으로 동작할 수 없다는 뜻이다.\"), \"\\n\", React.createElement(_components.p, null, \"물론 여기서 주저앉을 수는 없다. 이제 우리는 \", React.createElement(_components.a, {\n    href: \"https://github.com/react-native-webview/react-native-webview/blob/master/docs/Reference.md#onmessage\"\n  }, React.createElement(_components.code, null, \"onMessage\"), \" 콜백\"), \"과 \", React.createElement(_components.a, {\n    href: \"https://github.com/react-native-webview/react-native-webview/blob/master/docs/Reference.md#injectjavascriptstr\"\n  }, React.createElement(_components.code, null, \"webview.injectJavaScript()\"), \" 메서드\"), \"를 통해 \", React.createElement(_components.code, null, \"pushState()\"), \", \", React.createElement(_components.code, null, \"replaceState()\"), \" 동작 시 웹뷰의 상태를 받아오도록 할 것이다.\"), \"\\n\", React.createElement(_components.h3, null, \"2.1. \", React.createElement(_components.code, null, \"webview.injectJavaScript()\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"webview.injectJavaScript()\"), \" 메서드는 웹뷰에 자바스크립트 코드를 삽입할 수 있도록 해주는 메서드이다. 해당 메서드를 통해 \", React.createElement(_components.code, null, \"pushState()\"), \"와 \", React.createElement(_components.code, null, \"replaceState()\"), \" 메서드를 래핑해줄 것이다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"const INJECTED_CODE = `\\n(function() {\\n  function wrap(fn) {\\n    return function wrapper() {\\n      var res = fn.apply(this, arguments);\\n      window.ReactNativeWebView.postMessage('navigationStateChange');\\n      return res;\\n    }\\n  }\\n\\n  history.pushState = wrap(history.pushState);\\n  history.replaceState = wrap(history.replaceState);\\n  window.addEventListener('popstate', function() {\\n    window.ReactNativeWebView.postMessage('navigationStateChange');\\n  });\\n})();\\n\\ntrue;\\n`;\\nconst HomeScreen = (props) => {\\n  // ...\\n  return (\\n    <WebView\\n      // ...\\n      ref={ref}\\n      onLoadStart={() => ref.current.injectJavaScript(INJECTED_CODE)}\\n      onNavigationStateChange={setNavState}\\n    />\\n  );\\n};\\n\")), \"\\n\", React.createElement(_components.h4, null, \"2.1.1. \", React.createElement(_components.code, null, \"injectedJavaScript\"), \" props 는 안 되나?\"), \"\\n\", React.createElement(_components.p, null, \"React Native WebView 에는 \", React.createElement(_components.code, null, \"webview.injectJavaScript()\"), \"메서드와 비슷한 기능을 하는 \", React.createElement(_components.a, {\n    href: \"https://github.com/react-native-webview/react-native-webview/blob/master/docs/Reference.md#injectedjavascript\"\n  }, React.createElement(_components.code, null, \"injectedJavaScript\"), \" prop\"), \"도 존재한다. 하지만 결정적인 차이점이 존재하는데, \", React.createElement(_components.code, null, \"webview.injectJavaScript()\"), \"는 우리가 원하는 때에만 골라서 코드를 삽입할 수 있지만, \", React.createElement(_components.code, null, \"injectedJavaScript\"), \"는 \", React.createElement(_components.code, null, \"onLoad\"), \" 이벤트가 발생할 때마다 코드를 삽입된다는 것이다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"onLoadStart\"), \" 이벤트는 실제 페이지 이동이 일어날 때만 발생하는데 반해 \", React.createElement(_components.code, null, \"onLoad\"), \" 이벤트는 History API 등으로 로딩이 발생할 때도 발생한다. 때문에 같은 코드가 중복적으로 삽입될 수 있고, 우리는 그러한 현상을 피하기 위해 \", React.createElement(_components.code, null, \"onLoadStart\"), \"와 \", React.createElement(_components.code, null, \"injectJavaScript()\"), \" 메서드를 조합해서 코드를 삽입한다.\"), \"\\n\", React.createElement(_components.p, null, \"(단, \", React.createElement(_components.code, null, \"injectedJavaScriptBeforeContentLoaded\"), \" prop 을 사용하면 위 코드와 거의 동일한 효과를 낼 수 있다.)\"), \"\\n\", React.createElement(_components.h4, null, \"2.1.2. 삽입된 코드는 어떤 코드?\"), \"\\n\", React.createElement(_components.p, null, \"위 코드에는 삽입된 코드가 통문자열로 되어있기 때문에 알아보기 힘들다. 하이라이트된 코드로 다시 살펴보자.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"(function () {\\n  function wrap(fn) {\\n    return function wrapper() {\\n      var res = fn.apply(this, arguments);\\n      window.ReactNativeWebView.postMessage(\\\"navigationStateChange\\\");\\n      return res;\\n    };\\n  }\\n\\n  history.pushState = wrap(history.pushState);\\n  history.replaceState = wrap(history.replaceState);\\n  window.addEventListener(\\\"popstate\\\", function () {\\n    window.ReactNativeWebView.postMessage(\\\"navigationStateChange\\\");\\n  });\\n})();\\n\\ntrue;\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"pushState()\"), \"와 \", React.createElement(_components.code, null, \"replaceState()\"), \"를 래핑하고 \", React.createElement(_components.code, null, \"popState\"), \" 이벤트에 리스너를 붙이는 코드라는 것을 알 수 있다. 모든 코드들은 공통적으로 \", React.createElement(_components.a, {\n    href: \"https://github.com/react-native-webview/react-native-webview/blob/master/docs/Reference.md#postmessagestr\"\n  }, React.createElement(_components.code, null, \"ReactNativeWebView.postMessage()\"), \" 메서드\"), \"를 호출하는 것을 볼 수 있다. 이 메서드가 호출될 때마다 웹뷰는 웹페이지의 상태를 \", React.createElement(_components.code, null, \"onMessage\"), \" 콜백으로 받아볼 수 있다.\"), \"\\n\", React.createElement(_components.h3, null, \"2.2. \", React.createElement(_components.code, null, \"onMessage\")), \"\\n\", React.createElement(_components.p, null, \"그럼 \", React.createElement(_components.code, null, \"onMessage\"), \" 콜백도 넣어보자.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"const HomeScreen = (props) => {\\n  // ...\\n  return (\\n    <WebView\\n      // ...\\n      ref={ref}\\n      onLoadStart={() => ref.current.injectJavaScript(INJECTED_CODE)}\\n      onNavigationStateChange={setNavState}\\n      onMessage={({ nativeEvent }) => {\\n        if (nativeEvent.data === \\\"navigationStateChange\\\") {\\n          setNavState(nativeEvent);\\n        }\\n      }}\\n    />\\n  );\\n};\\n\")), \"\\n\", React.createElement(_components.p, null, \"됐다. 이제 \", React.createElement(_components.code, null, \"pushState()\"), \", \", React.createElement(_components.code, null, \"replaceState()\"), \"도 놓치지 않게 되었다.\"), \"\\n\", React.createElement(_components.h2, null, \"3. 전체 코드\"), \"\\n\", React.createElement(_components.p, null, \"(아래 코드는 이해를 돕기 위한 의사코드로, 실제로는 동작하지 않을 수도 있다)\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"const INJECTED_CODE = `\\n(function() {\\n  function wrap(fn) {\\n    return function wrapper() {\\n      var res = fn.apply(this, arguments);\\n      window.ReactNativeWebView.postMessage('navigationStateChange');\\n      return res;\\n    }\\n  }\\n\\n  history.pushState = wrap(history.pushState);\\n  history.replaceState = wrap(history.replaceState);\\n  window.addEventListener('popstate', function() {\\n    window.ReactNativeWebView.postMessage('navigationStateChange');\\n  });\\n})();\\n\\ntrue;\\n`;\\n\\nconst HomeScreen = (props) => {\\n  const ref = useRef();\\n  const [navState, setNavState] = useState();\\n\\n  useEffect(() => {\\n    const onPress = () => {\\n      if (navState.canGoBack) {\\n        // 뒤로 갈 수 있는 상태라면 이전 웹페이지로 이동한다\\n        ref.current.goBack();\\n      } else {\\n        // 뒤로 갈 수 없는 상태라면\\n        // 다른 원하는 행동을 하면 된다\\n      }\\n    };\\n\\n    // 안드로이드 백버튼이 눌렸을 때 이벤트 리스너를 등록한다.\\n    BackHandler.addEventListener(\\\"hardwareBackPress\\\", onPress);\\n    return () => {\\n      BackHandler.removeEventListener(\\\"hardwareBackPress\\\", onPress);\\n    };\\n  }, [navState.canGoBack]);\\n\\n  return (\\n    <WebView\\n      // ...\\n      ref={ref}\\n      onLoadStart={() => ref.current.injectJavaScript(INJECTED_CODE)}\\n      onNavigationStateChange={setNavState}\\n      onMessage={({ nativeEvent }) => {\\n        if (nativeEvent.data === \\\"navigationStateChange\\\") {\\n          setNavState(nativeEvent);\\n        }\\n      }}\\n    />\\n  );\\n};\\n\")), \"\\n\", React.createElement(_components.h2, null, \"4. 참고\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://github.com/react-native-webview/react-native-webview\"\n  }, \"React Native WebView\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://github.com/react-native-webview/react-native-webview/issues/24#issuecomment-483956651\"\n  }, \"MIGRATED: iOS WebView doesn't support hash url change. The onNavigationStateChange listener will not be called when url hash changes. (#20447) #24\")), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/kangseong/workspace/private/ricalelog/posts/210821-react-native-webview-android-back-button/index.mdx\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nvar _templateObject;\nimport * as React from \"react\";\nimport {Link} from \"gatsby\";\nimport {GatsbyImage, getImage} from \"gatsby-plugin-image\";\nimport Layout from \"../../components/Layout\";\nimport Seo from \"../../components/Seo\";\nimport styled from \"../../themes\";\nimport MdxContent from \"../../components/MdxContent\";\nconst PostDetailPage = _ref => {\n  let {data, children} = _ref;\n  const {title, date, tags, heroImage, heroImageAlt} = data.mdx.frontmatter;\n  const image = heroImage ? getImage(heroImage) : null;\n  console.log(\"image\", image);\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, title), React.createElement(Tags, null, tags.map(tag => React.createElement(\"li\", {\n    key: tag\n  }, React.createElement(Link, {\n    to: \"/tags/\" + tag\n  }, tag)))), React.createElement(\"div\", null, date), !!image && React.createElement(GatsbyImage, {\n    image: image,\n    alt: heroImageAlt !== null && heroImageAlt !== void 0 ? heroImageAlt : \"\"\n  }), React.createElement(MdxContent, null, children));\n};\nconst Tags = styled.ul(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  display: flex;\\n  flex-direction: row;\\n  flex-wrap: wrap;\\n  gap: \", \"px;\\n\\n  margin: 0;\\n  padding: 0;\\n  list-style: none;\\n\\n  > li {\\n    padding: \", \"px \", \"px\\n      0px;\\n    border-radius: 2px;\\n\\n    background-color: \", \";\\n    color: \", \";\\n\\n    > a {\\n      text-decoration: none;\\n    }\\n  }\\n\"])), p => p.theme.dimens.gutter, p => p.theme.dimens.thin, p => p.theme.dimens.gutter, p => p.theme.colors.tag, p => p.theme.colors.onTag);\nconst query = \"3533977744\";\nexport const Head = _ref2 => {\n  var _image$images, _image$images$fallbac;\n  let {data} = _ref2;\n  const {frontmatter: {title, slug, heroImage}, excerpt} = data.mdx;\n  const image = heroImage ? getImage(heroImage) : null;\n  return React.createElement(Seo, {\n    title: title,\n    og: {\n      title: title,\n      path: slug,\n      type: \"article\",\n      description: excerpt,\n      image: image === null || image === void 0 ? void 0 : (_image$images = image.images) === null || _image$images === void 0 ? void 0 : (_image$images$fallbac = _image$images.fallback) === null || _image$images$fallbac === void 0 ? void 0 : _image$images$fallbac.src\n    }\n  });\n};\nPostDetailPage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostDetailPage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","code","a","pre","h3","h4","ul","li","_provideComponents","components","React","href","className","_templateObject","wrapper","MDXLayout","PostDetailPage","_ref","data","children","title","date","tags","heroImage","heroImageAlt","mdx","frontmatter","image","getImage","console","log","Layout","Tags","map","tag","key","Link","to","GatsbyImage","alt","MdxContent","styled","_taggedTemplateLiteralLoose","theme","dimens","gutter","thin","colors","onTag","Head","_ref2","_image$images","_image$images$fallbac","slug","excerpt","Seo","og","path","type","description","images","fallback","src","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}