"use strict";(self.webpackChunkricalelog=self.webpackChunkricalelog||[]).push([[9405],{5356:function(e,n,t){t.r(n),t.d(n,{Head:function(){return R},default:function(){return w}});var a=t(1151),l=t(7294);function r(e){const n=Object.assign({h2:"h2",p:"p",ul:"ul",li:"li",a:"a",code:"code",h3:"h3",blockquote:"blockquote",h4:"h4",pre:"pre"},(0,a.ah)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.h2,null,"1. 서두"),"\n",l.createElement(n.p,null,"토이 프로젝트에서 아래 라이브러리를 사용해 소셜 로그인을 구현하고 있다."),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,l.createElement(n.a,{href:"https://www.npmjs.com/package/@react-native-firebase/app"},"@react-native-firebase/app"),": React Native Firebase 코어 모듈"),"\n",l.createElement(n.li,null,l.createElement(n.a,{href:"https://www.npmjs.com/package/@react-native-firebase/auth"},"@react-native-firebase/auth"),": React Native Firebase Authentication 모듈"),"\n",l.createElement(n.li,null,l.createElement(n.a,{href:"https://github.com/react-native-google-signin/google-signin"},"@react-native-google-signin/google-signin"),": React Native 구글 소셜 로그인 라이브러리"),"\n",l.createElement(n.li,null,l.createElement(n.a,{href:"https://github.com/invertase/react-native-apple-authentication"},"@invertase/react-native-apple-authentication"),": React Native 애플 소셜 로그인 라이브러리"),"\n"),"\n",l.createElement(n.p,null,"이 글에서는 애플 소셜 로그인에서도 탈퇴(앱과 연결 끊기) 기능 구현을 정리한다. 탈퇴는 사용자에게 당연히 제공되어야 하는 사용자의 권리다. 뭐 필수 기능이니 구현하는 데 어려울 건 없을 것이다. 아마 라이브러리에 ",l.createElement(n.code,null,"탈퇴하기()")," 같은 메서드가 있을 것이고 우리는 그걸 호출하기만 하면 될 것이다. 아주 쉽다. 자 시작해보자. ...어? 아니네?"),"\n",l.createElement(n.h3,null,"1.1. 엥? 로그인은? 로그아웃은? 구글은?"),"\n",l.createElement(n.p,null,"애플 소셜 로그인/로그아웃, 구글 소셜 로그인/로그아웃/탈퇴 기능 구현에는 특별한 이슈가 없다. 개발자가 상상하고 있는 거의 그대로 메서드가 나와있고 우리는 호출하기만 되는 형태다. 일부 콜백을 사용해야 하긴 하지만 큰 문제는 아니다. 따라서 일단은 이슈가 있다고 생각되는 애플 쪽의 탈퇴 기능을 먼저 정리한다. (나머지 기능들은 나중에 정리할 수도 있다.) 일단은 공식문서들을 참고하시라."),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,l.createElement(n.a,{href:"https://rnfirebase.io/auth/usage"},"React Native Firebase - Authentication")),"\n",l.createElement(n.li,null,l.createElement(n.a,{href:"https://github.com/react-native-google-signin/google-signin"},"Github - react-native-google-signin/google-signin")),"\n",l.createElement(n.li,null,l.createElement(n.a,{href:"https://github.com/invertase/react-native-apple-authentication"},"GitHub - invertase/react-native-apple-authentication")),"\n"),"\n",l.createElement(n.h2,null,"2. 구현"),"\n",l.createElement(n.h3,null,"2.1. ",l.createElement(n.code,null,"onCredentialRevoked()")),"\n",l.createElement(n.p,null,"일단 ",l.createElement(n.a,{href:"https://github.com/invertase/react-native-apple-authentication"},"@invertase/react-native-apple-authentication")," 라이브러리의 README 를 찬찬히 살펴봐도 탈퇴를 위한 메서드는 존재하지 않는다. (구글 쪽 라이브러리에서는 ",l.createElement(n.code,null,"revokeAccess()"),"라는 메서드를 제공하는 것과 대조적이다.) 그나마 탈퇴 쪽과 관련된 메서드라면 ",l.createElement(n.code,null,"onCredentialRevoked(listener)")," 가 있다. 이 메서드는 사용자가 탈퇴되었을 때 실행되는 콜백을 등록하게 해준다."),"\n",l.createElement(n.p,null,"여기서 평소 iOS 를 사용하지 않는 사람들은 당황할 수 있다 (내가 그랬다). 탈퇴 기능은 제공하지 않지만 탈퇴 상태를 들을 수 있는 이벤트 리스너만 제공하고 있는 것이다. 그럼 대체 탈퇴는 어떻게 하는 거야?"),"\n",l.createElement(n.p,null,"다행히 답은 멀리 있지 않다. 애플은 iOS 기기 내에서 특정 앱과의 연결을 끊을 수 있는 (탈퇴할 수 있는) 기능을 제공한다. (apple.com 에서도 제공하는 것으로 알고 있다. 확인해보지는 않았다.)"),"\n",l.createElement(n.blockquote,null,"\n",l.createElement(n.p,null,"iOS 기기의 [설정] 앱 - 최상단의 자신의 이름 영역 선택 - [암호 및 보안] - [Apple ID를 사용하는 앱] - 탈퇴할 앱 선택 - [Apple ID 사용 중단]"),"\n"),"\n",l.createElement(n.p,null,"이 말은 즉슨, 탈퇴 기능을 직접 구현할 필요는 없다는 것이다. 우리는 사용자가 애플을 통해 탈퇴를 했을 때 그에 대응하는 처리만 해주면 된다."),"\n",l.createElement(n.h4,null,"구현 예"),"\n",l.createElement(n.p,null,"그럼 문서에 나와있는대로 탈퇴 기능을 구현해보자."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"function App() {\n  // ...\n\n  useEffect(() => {\n    // 현재 기기가 애플 로그인을 지원하는 기기인지 확인\n    if(!appleAuth.isSupported) {\n      return;\n    }\n\n    const unsubscriber = appleAuth.onCredentialRevoked(() => {\n      // 사용자의 정보를 가지고 탈퇴 기능을 수행하자.\n      doSomethingForRevoke();\n      // firebase 에서도 로그아웃\n      auth().signOut();\n    });\n    return unsubscriber;\n  }, []);\n\n  // ...\n\n  return (\n    <View>\n    </View>\n  )\n}\n\n});\n")),"\n",l.createElement(n.h3,null,"2.2. ",l.createElement(n.code,null,"getCredentialStateForUser()")),"\n",l.createElement(n.p,null,"좋다. 구현이 완료되었다. 라이브러리의 README 에는 예외 처리에 대한 안내가 없는 걸로 봐서 이 콜백은 사용자의 탈퇴 시 무조건 실행을 보장하는 것 같다 (API 문서를 보고 싶지만 링크가 깨져있다)."),"\n",l.createElement(n.p,null,"그렇게 믿고 싶다. 하지만 세상에 백퍼센트는 없다. 특히 앱 프로세스가 완전히 죽은 상태에서 탈퇴를 하고 앱을 실행했을 때 ",l.createElement(n.code,null,"onCredentialRevoked()")," 가 실행되지 않는 것을 여러차례 직접 목격한 나로서는, 더더욱 무시할 수 없었다. 이 콜백이 실행되지 않을 때를 대비해야 한다."),"\n",l.createElement(n.p,null,"이럴 때 쓸 수 있는 메서드가 ",l.createElement(n.code,null,"getCredentialStateForUser(user)"),"다. 이 메서드는 현재 사용자의 상태를 반환한다."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-typescript"},"enum AppleCredentialState {\n  REVOKED = 0, // The Opaque user ID was revoked by the user.\n  AUTHORIZED = 1, // The Opaque user ID is in good state.\n  NOT_FOUND = 2, // The Opaque user ID was not found.\n  TRANSFERRED = 3, // N/A\n}\n")),"\n",l.createElement(n.p,null,"즉 사용자가 앱에 진앱했을 때, 혹은 사용자 정보가 업데이트되었다고 추정될 때, 이 메서드로 사용자의 상태를 확인하면 탈퇴 여부를 확인할 수 있다는 말이다."),"\n",l.createElement(n.h4,null,"구현 예"),"\n",l.createElement(n.p,null,'여기서는 "사용자의 인증 정보가 바뀐 시점"을 React Native Firebase 의 ',l.createElement(n.code,null,"auth().onAuthStateChanged()")," 콜백으로 확인한다. 만약 React Native Firebase 를 사용하지 않는다면 다른 방법으로 해당 시점을 찾아야 할 것이다."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"function App() {\n  // ...\n\n  useEffect(() => {\n    const subscribe = auth().onAuthStateChanged(async user => {\n      if(!user) {\n        // 로그아웃된 상태 처리\n        loggedOut();\n        return;\n      }\n\n      const isApple = (\n        appleAuth.isSupported\n        && user.providerData[0].providerId === 'apple.com'\n      );\n      const uidInProvider = user.providerData[0].uid;\n      const appleState = await appleAuth.getCredentialStateForUser(uidInProvider);\n\n      if(isApple && appleState === appleAuth.State.REVOKED) {\n        // 사용자의 정보를 가지고 탈퇴 기능을 수행하자.\n        revokeThisService();\n        // firebase 에서도 로그아웃\n        auth().signOut();\n      }\n    })\n  }, []);\n\n  // ...\n\n  return (\n    <View>\n    </View>\n  )\n}\n\n});\n")),"\n",l.createElement(n.h2,null,"3. 결론"),"\n",l.createElement(n.p,null,"마지막으로 요약하자. React Native 에서 ",l.createElement(n.a,{href:"https://github.com/invertase/react-native-apple-authentication"},"@invertase/react-native-apple-authentication")," 라이브러리를 사용해 탈퇴 기능을 구현할 때는 아래 두 개의 메서드를 적절히 잘 조합하면 되겠다."),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,l.createElement(n.code,null,"onCredentialRevoked()")),"\n",l.createElement(n.li,null,l.createElement(n.code,null,"getCredentialStateForUser()")),"\n"))}var c,i,u,o=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?l.createElement(n,e,l.createElement(r,e)):r(e)},p=t(1880),s=t(1883),m=t(3723),E=t(1858),h=t(3904),d=t(891),g=t(5534),v=t(5777);const f=e=>{let{data:n,children:t}=e;const{title:a,date:r,tags:c,heroImage:i,heroImageAlt:u}=n.mdx.frontmatter,o=i?(0,m.c)(i):null;return l.createElement(E.Z,null,l.createElement(b,null,l.createElement("h1",null,a),l.createElement(k,null,r),l.createElement(A,null,c.map((e=>l.createElement("li",{key:e},l.createElement(s.rU,{to:"/tags/"+e},e)))))),!!o&&l.createElement(m.G,{image:o,alt:null!=u?u:""}),l.createElement(g.Z,null,t),l.createElement(v.Z,null))},b=d.ZP.div(c||(c=(0,p.Z)(["\n  margin: 60px 0 72px;\n  padding: 0 24px;\n\n  & > h1 {\n    font-size: 2.5rem;\n    word-break: keep-all;\n    margin: 0;\n  }\n"]))),k=d.ZP.div(i||(i=(0,p.Z)(["\n  margin: 16px 0;\n"]))),A=d.ZP.ul(u||(u=(0,p.Z)(["\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: ","px;\n\n  margin: 0;\n  padding: 0;\n  list-style: none;\n\n  > li {\n    padding: ","px\n      ","px;\n    border-radius: 2px;\n\n    background-color: ",";\n    color: ",";\n\n    > a {\n      text-decoration: none;\n    }\n  }\n"])),(e=>e.theme.dimens.gutter),(e=>e.theme.dimens.spacing),(e=>e.theme.dimens.gutter),(e=>e.theme.colors.tag),(e=>e.theme.colors.onTag)),R=e=>{var n,t;let{data:a}=e;const{frontmatter:{title:r,slug:c,tags:i,heroImage:u},excerpt:o}=a.mdx,p=u?(0,m.c)(u):null;return l.createElement(h.Z,{title:r,description:o,path:"posts/"+c,thumbnail:null==p||null===(n=p.images)||void 0===n||null===(t=n.fallback)||void 0===t?void 0:t.src,keywords:i,ogType:"article"})};function w(e){return l.createElement(f,e,l.createElement(o,e))}}}]);
//# sourceMappingURL=component---src-pages-posts-mdx-frontmatter-slug-tsx-content-file-path-users-kangseong-workspace-private-ricalelog-posts-2022-220102-react-native-apple-login-revoke-index-mdx-0da2933b6d9daed01651.js.map